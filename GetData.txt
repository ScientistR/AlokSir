using System;
using System.Collections.Generic;
using System.Web;
using System.Web.Services;
using System.Web.Script.Serialization;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Web.Script;
using System.Runtime.Serialization.Json;
using System.Collections;
using AjaxControlToolkit;
using System.Collections;
using System.Collections.Specialized;
using System.Configuration;
using Currency;
using System.Globalization;


/// <summary>
/// Summary description for Getdata_member
/// </summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
// [System.Web.Script.Services.ScriptService]

[System.Web.Script.Services.ScriptService]
public class Getdata_member : System.Web.Services.WebService
{

    DataUtility objDUT = new DataUtility();
    Utility objUT = new Utility();
    SqlDataReader sdr;
    DateTime Test;
    public Getdata_member()
    {

        //Uncomment the following line if using designed components 
        //InitializeComponent(); 
    }

    protected DateTime dateformat(string str)
    {
        string[] str1;
        str1 = str.Split('/');
        return Convert.ToDateTime(str1[1] + "/" + str1[0] + "/" + str1[2].ToString());
    }

    /// <summary>
    /// Calender Picker Values Seprate into From and To in Number Format 
    /// Ex:- July 8, 2014 - August 6, 2014 
    /// From => 07/08/2014
    /// To => 08/08/2014
    /// </summary>
    /// <param name="date">string</param>
    /// <returns>Array</returns>
    /// <example>[0]= From </example>
    ///  <example>[1]= To </example>
    public string[] DateFormat(string date)
    {
        string[] From_To_Date = new string[2];
        try
        {
            int Month = 0; string Day = null; string year = null;
            string completedate = date.Trim();
            string[] FromandTo = completedate.Split('-');
            for (int i = 0; i < FromandTo.Length; i++)
            {
                string[] ss = FromandTo[i].Split(' ');
                for (int j = 0; j < ss.Length; j++)
                {
                    if (i == 0)
                    {
                        Month = DateTime.ParseExact(ss[0], "MMMM", System.Globalization.CultureInfo.InvariantCulture).Month;
                        Day = ss[1].ToString();
                        int index1 = ss[1].IndexOf(',');
                        if (index1 != -1)
                        {
                            Day = ss[1].Remove(index1, 1);
                        }
                        year = ss[2].ToString();
                        From_To_Date[i] = Convert.ToString(Month) + "/" + Day + "/" + year;
                    }

                    if (i == 1)
                    {
                        Month = DateTime.ParseExact(ss[1], "MMMM", System.Globalization.CultureInfo.InvariantCulture).Month;
                        Day = ss[2].ToString();
                        int index1 = ss[2].IndexOf(',');
                        if (index1 != -1)
                        {
                            Day = ss[2].Remove(index1, 1);
                        }
                        year = ss[3].ToString();
                        From_To_Date[i] = Convert.ToString(Month) + "/" + Day + "/" + year;
                    }
                }
            }
        }
        catch (Exception excep)
        {
            From_To_Date[0] = "";
            From_To_Date[1] = "";
        }

        return From_To_Date;
    }

    protected DateTime DateFormat1(string str)
    {
        string[] str1;
        str1 = str.Split('/', '-');
        return Convert.ToDateTime(str1[1] + "/" + str1[0] + "/" + str1[2]);
    }



    [WebMethod]
    public Hello GetCity(Hello city2)
    {
        SqlConnection CON = new SqlConnection();
        SqlCommand CMD = new SqlCommand("insert into abc  values ('" + city2.Name + "','" + city2.Population + "' , 0)", CON);
        CON.Open();
        int res = CMD.ExecuteNonQuery();
        CON.Close();
        return city2;
    }

    /// <summary>
    /// Purpose :  Change Password of Member
    /// page : DynamicMember.master
    /// </summary>
    /// 

    [WebMethod]
    public List<payoutStatement> SCGetPayid(string Loginid, string payid)
    {
        Utility objUT = new Utility();
        NumberToEnglish ntoe = new NumberToEnglish();
        sdr = null;
        int pFrom = Convert.ToInt32(objDUT.GetScalar("select sPayFromPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        int pTo = Convert.ToInt32(objDUT.GetScalar("select sPayToPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        long regNo = Convert.ToInt64(Loginid);

        string st = null;
        List<payoutStatement> PayoutList = new List<payoutStatement>();
        try
        {
            st = "select  count(totalIncome)  from member_payout where  totalIncome>0 and payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + regNo + "  group by regno";


            DataTable dt = objDUT.GetDataTable(st);

            payoutStatement Payout = new payoutStatement();
            if (dt.Rows.Count > 0)
            {
                Payout.pvIncome = "1";
            }
            else
            {
                Payout.pvIncome = "0";
            }




            PayoutList.Add(Payout);

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return PayoutList;
    }
    [WebMethod]
    public List<Payout> SGetPayid()
    {
        sdr = null;
        string st = null;
        List<Payout> PayoutList = new List<Payout>();
        try
        {
            st = "select spayid,pay=(cast(spayid as varchar)+'->'+convert(varchar(10),spayfromdate,103)+'-'+convert(varchar(10),SpayToDate,103)) from payout_settlement order by spayid desc";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Payout Payout = new Payout();
                Payout.pay = sdr["pay"].ToString();
                Payout.payid = Convert.ToInt32(sdr["spayid"].ToString());

                PayoutList.Add(Payout);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return PayoutList;
    }

    [WebMethod]
    public List<payoutStatement> getPayoutStatement(string Loginid, string payid)
    {
        Utility objUT = new Utility();
        NumberToEnglish ntoe = new NumberToEnglish();
        sdr = null;
        int pFrom = Convert.ToInt32(objDUT.GetScalar("select sPayFromPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        int pTo = Convert.ToInt32(objDUT.GetScalar("select sPayToPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        long regNo = Convert.ToInt64(Loginid);

        string st = null;
        List<payoutStatement> PayoutList = new List<payoutStatement>();
        try
        {
            st = "select regNo, sum(paidPV) as 'paidPV',sum(flushPV) as 'flushPV',sum(pvIncome) as 'bIncome', sum(singleLegIncome) as 'sIncome',sum(levelIncome) as 'levelIncome', sum(singleLegDeduction) as 'slD', sum(tdsAmount) as 'TDS', sum(hAmount) as 'HC'  from member_payout where  totalIncome>0 and payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + regNo + "  group by regno";


            DataTable dt = objDUT.GetDataTable(st);

            payoutStatement Payout = new payoutStatement();
            Payout.regNo = dt.Rows[0]["regno"].ToString();
            Payout.pvIncome = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["bIncome"].ToString()));
            Payout.singleIncome = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["sIncome"].ToString()));
            Payout.levelIncome = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["levelIncome"].ToString()));
            Payout.singleDeduction = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["slD"].ToString()));
            Payout.TDSAmount = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["TDS"].ToString()));
            Payout.HCAmount = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["HC"].ToString()));
            Payout.paidPV = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["paidPV"].ToString()));
            Payout.flushPV = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["flushPV"].ToString()));
            double totincome = Convert.ToDouble(Payout.pvIncome) + Convert.ToDouble(Payout.singleIncome) + Convert.ToDouble(Payout.levelIncome);
            double totded = Convert.ToDouble(Payout.TDSAmount) + Convert.ToDouble(Payout.HCAmount) + Convert.ToDouble(Payout.singleDeduction);
            double netincome = totincome - totded;
            string inword = ntoe.changeNumericToWords(netincome);
            Payout.TotIncome = string.Format("{0:f}", totincome);
            Payout.TotDeduction = string.Format("{0:f}", totded);
            Payout.NetIncome = string.Format("{0:f}", netincome);
            Payout.ValueInWord = inword.ToString();
            DataTable dtDetails = objDUT.GetDataTable("Select regno, (fname+' '+lname) as 'Name', Loginid, Emailid, Mobile, Address,oState, oCity, landMark, distName, memPan, pinCode from member_master where regno=" + regNo + " ");

            Payout.Name = dtDetails.Rows[0]["Name"].ToString();
            Payout.Loginid = dtDetails.Rows[0]["Loginid"].ToString();
            Payout.emailID = dtDetails.Rows[0]["emailid"].ToString();
            Payout.mobile = dtDetails.Rows[0]["Mobile"].ToString();
            Payout.LandMark = dtDetails.Rows[0]["landMark"].ToString();
            Payout.Address = dtDetails.Rows[0]["Address"].ToString();
            Payout.ostate = dtDetails.Rows[0]["oState"].ToString();
            Payout.ocity = dtDetails.Rows[0]["oCity"].ToString();
            Payout.district = dtDetails.Rows[0]["distName"].ToString();
            Payout.pinCode = dtDetails.Rows[0]["pinCode"].ToString();

            //________________ B/F
            double bflpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            double bfrpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.bfLeft = string.Format("{0:f}", bflpv);
            Payout.bfRight = string.Format("{0:f}", bfrpv);
            //__________________ Current
            double lpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)) from member_payout where payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            double rpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)) from member_payout where payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.currentLeft = string.Format("{0:f}", lpv);
            Payout.currentRight = string.Format("{0:f}", rpv);

            //________________ C/F
            double cflpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            double cfrpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.cfLeft = string.Format("{0:f}", cflpv);
            Payout.cfRight = string.Format("{0:f}", cfrpv);

            //------------------ Total
            double totalLeft = 0, totalRight = 0;
            totalLeft = (bflpv + lpv);
            totalRight = (bfrpv + rpv);
            Payout.totalLeft = string.Format("{0:f}", totalLeft);
            Payout.totalRight = string.Format("{0:f}", totalRight);

            //___________________ Paid
            double matched = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)) from member_payout where payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.matched = string.Format("{0:f}", matched);

            //_____________ payid

            Payout.payid = payid;
            Payout.payFrom = string.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(objDUT.GetScalar("select sPayFromDate  from payout_settlement where sPayID=" + payid + "").ToString()));
            Payout.payTo = string.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(objDUT.GetScalar("select sPayToDate  from payout_settlement where sPayID=" + payid + "").ToString()));


            PayoutList.Add(Payout);

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return PayoutList;
    }
    [WebMethod]
    public string UpdatePasswordMember(string loginid, string oldpassword, string newpassword)
    {
        string status = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
            param[0].Value = loginid;
            param[1] = new SqlParameter("@Newpassword", SqlDbType.VarChar, 100);
            param[1].Value = newpassword;
            param[2] = new SqlParameter("@oldpassword", SqlDbType.VarChar, 100);
            param[2].Value = oldpassword;
            param[3] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[3].Direction = ParameterDirection.Output;

            int result = objDUT.ExecuteSqlSP(param, "sp_updatepassword_member");

            if (result > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }
        return status;
    }

    /// <summary>
    /// Purpose : Check Old Password Valid or Not
    /// page : DynamicMaster.master.aspx.aspx
    /// </summary>
    [WebMethod]
    public string CheckOldPassword(string loginid, string oldpassword)
    {
        string status = "false";
        try
        {
            string query = "Select Password from Member_login  where loginid='" + loginid + "' and  Password='" + oldpassword + "'";
            string oldpass = Convert.ToString(objDUT.GetScalar(query));
            if (oldpass.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }

    [WebMethod]
    public List<transEvoucher> TransactionEvoucherList(string kid, string solddate_from, string solddate_to, string loginid, string TRANSID)
    {
        string[] str1;
        if (solddate_from == "")
        {
            solddate_from = "";
            solddate_to = "";
        }
        else
        {
            str1 = solddate_from.Split('/', '-');

            solddate_from = Convert.ToString(str1[1] + "/" + str1[0] + "/" + str1[2]);
            str1 = solddate_to.Split('/', '-');
            solddate_to = Convert.ToString(str1[1] + "/" + str1[0] + "/" + str1[2]);
        }

        List<transEvoucher> TransEvoucherList = new List<transEvoucher>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
            param[0].Value = kid;
            param[1] = new SqlParameter("@sold_date_from", SqlDbType.VarChar, 50);
            param[1].Value = solddate_from;
            param[2] = new SqlParameter("@sold_date_to", SqlDbType.VarChar, 50);
            param[2].Value = solddate_to;
            param[3] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[3].Value = loginid;

            sdr = objDUT.GetDataReaderSP(param, "sp_transevoucher");
            while (sdr.Read())
            {
                transEvoucher translistv = new transEvoucher();
                translistv.Id = sdr["sepinid"].ToString();
                translistv.Date = Convert.ToDateTime(sdr["SEDate"]).ToString("dd/MM/yyyy");
                translistv.Quantity = sdr["seqty"].ToString();
                translistv.kittype = sdr["kittype"].ToString();
                translistv.kitprice = string.Format("{0:f}", Convert.ToDouble(sdr["kitprice"].ToString()));
                translistv.Amount = string.Format("{0:f}", Convert.ToDouble(sdr["Amount"].ToString()));
                translistv.loginid = sdr["loginid"].ToString();
                translistv.Name = sdr["Name"].ToString();
                translistv.Address = sdr["address"].ToString();
                translistv.Paymentmode = sdr["sepaymode"].ToString();
                TransEvoucherList.Add(translistv);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return TransEvoucherList;

    }



    [WebMethod]
    public List<ListVoucher> ListEVouchers(string sepinid, string kid, string solddate_from, string solddate_to, string loginid, string type)
    {
        if (solddate_from == "" && solddate_to == "")
        {
            solddate_from = "";
            solddate_to = "";
        }
        else
        {
            solddate_from = Convert.ToString(DateFormat1(solddate_from));
            solddate_to = Convert.ToString(DateFormat1(solddate_to));
        }


        List<ListVoucher> EvoucherList = new List<ListVoucher>();
        //try
        //{
        sdr = null;
        SqlParameter[] param = new SqlParameter[8];
        param[0] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
        param[0].Value = kid;
        param[1] = new SqlParameter("@sold_date_from", SqlDbType.VarChar, 50);
        param[1].Value = solddate_from;
        param[2] = new SqlParameter("@sold_date_to", SqlDbType.VarChar, 50);
        param[2].Value = solddate_to;
        param[3] = new SqlParameter("@join_date", SqlDbType.VarChar, 50);
        param[3].Value = "";
        param[4] = new SqlParameter("@generated_date", SqlDbType.VarChar, 50);
        param[4].Value = "";
        param[5] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
        param[5].Value = loginid;
        param[6] = new SqlParameter("@filtertype", SqlDbType.VarChar, 500);
        param[6].Value = type;
        param[7] = new SqlParameter("@sepinid", SqlDbType.VarChar, 500);
        param[7].Value = sepinid;

        sdr = objDUT.GetDataReaderSP(param, "sp_evoucherlist_test");
        while (sdr.Read())
        {
            ListVoucher listv = new ListVoucher();
            listv.epinNumber = sdr["EpinNumber"].ToString();
            listv.epincode = sdr["Epincode"].ToString();
            listv.kitType = sdr["kitType"].ToString();
            listv.SoldTo = sdr["SoldTo"].ToString();
            listv.LinkTo= sdr["usedby"].ToString();
            listv.gDate = Convert.ToDateTime(sdr["GDate"]).ToString("dd/MM/yyyy");
            listv.SName = sdr["soldby"].ToString();
            listv.kitCode = sdr["kitCode"].ToString();
            if (sdr["sedate"].ToString() == "1/1/1900 12:00:00 AM")
            {
                listv.SDate = "";
            }
            else
            {
                listv.SDate = Convert.ToDateTime(sdr["sedate"]).ToString("dd/MM/yyyy");
            }

            EvoucherList.Add(listv);
        }
        sdr.Dispose();

        //}
        //catch (Exception exce)
        //{
        //}
        return EvoucherList;
    }


    [WebMethod]
    public List<ListVoucher> ListMemberVouchers(string kid, string solddate_from, string solddate_to, string loginid, string type, string Mtype)
    {
        if (solddate_from != "")
        {
            string[] a1 = solddate_from.Split('/');

            solddate_from = a1[1] + "/" + a1[0] + "/" + a1[2];

        }
        if (solddate_to != "")
        {

            string[] a2 = solddate_to.Split('/');

            solddate_to = a2[1] + "/" + a2[0] + "/" + a2[2];
        }

        List<ListVoucher> EvoucherList = new List<ListVoucher>();
        //try
        //{
        sdr = null;
        SqlParameter[] param = new SqlParameter[9];
        param[0] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
        param[0].Value = kid;
        param[1] = new SqlParameter("@sold_date_from", SqlDbType.VarChar, 50);
        param[1].Value = solddate_from;
        param[2] = new SqlParameter("@sold_date_to", SqlDbType.VarChar, 50);
        param[2].Value = solddate_to;
        param[3] = new SqlParameter("@join_date", SqlDbType.VarChar, 50);
        param[3].Value = "";
        param[4] = new SqlParameter("@generated_date", SqlDbType.VarChar, 50);
        param[4].Value = "";
        param[5] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
        param[5].Value = loginid;
        param[6] = new SqlParameter("@filtertype", SqlDbType.VarChar, 500);
        param[6].Value = type;
        param[7] = new SqlParameter("@Mtype", SqlDbType.VarChar, 500);
        param[7].Value = "";
        param[8] = new SqlParameter("@linkto", SqlDbType.VarChar, 50);
        param[8].Value = "";
        sdr = objDUT.GetDataReaderSP(param, "sp_evoucherMemberlist1_test");
        while (sdr.Read())
        {
            ListVoucher listv = new ListVoucher();
            listv.epinNumber = sdr["EpinNumber"].ToString();
            listv.kitCode = sdr["linkedto"].ToString();
            listv.gDate = string.Format("{0:dd/MM/yyyy}", sdr["GDate"]);
            listv.SoldTo = sdr["activateby"].ToString();
            listv.SName = sdr["SeName"].ToString();

            listv.activationdate = sdr["ActivatedOn"].ToString();
            if (sdr["ActivatedOn"].ToString() == "1/1/1900 12:00:00 AM")
            {
                listv.activationdate = "";
            }
            else
            {
                listv.activationdate = string.Format("{0:dd/MM/yyyy}", sdr["ActivatedOn"]);
            }
            if (sdr["sedate"].ToString() == "1/1/1900 12:00:00 AM")
            {
                listv.SDate = "";
            }
            else
            {
                listv.SDate = string.Format("{0:dd/MM/yyyy}", sdr["sedate"]);
            }

            EvoucherList.Add(listv);
        }
        sdr.Dispose();

        //}
        //catch (Exception exce)
        //{
        //}
        return EvoucherList;
    }

    [WebMethod]
    public CountEpin CountKYCEvoucherDetails(string regno)
    {
        CountEpin coutepin = new CountEpin();
        coutepin.Free = Convert.ToString(objDUT.GetScalar("select count(em.epinid) from epin_master em ,kit_master KM  where em.kid=km.kid  and em.eactive=1 and em.sepinid=0 and  km.kittype=0 "));
        coutepin.Sold = Convert.ToString(objDUT.GetScalar("select count(em.epinid) from epin_master em ,kit_master KM , soldepin sp where em.kid=km.kid and em.sepinid=sp.sepinid and em.eactive=1 and em.sepinid>0 and km.kittype=0  and sp.refregno='" + regno + "'"));
        coutepin.TotalGenerated = Convert.ToString(objDUT.GetScalar("select count(em.epinid) from epin_master em ,kit_master KM  where em.kid=km.kid  and em.eactive=1 and   km.kittype=0"));
        return coutepin;
    }

    /// <summary>
    /// Purpose : View All Announcment
    /// page : Default.aspx
    /// </summary>
    [WebMethod]
    public List<Mail> GetAnnouncement(string annID)
    {

        List<Mail> mailList = new List<Mail>();
        try
        {
            if (annID == "")
            {
                sdr = objDUT.GetDataReader(@"Select NewsID, News, cast(newsDate as varchar) as newDate, activeFlag, display  from [eventNews] where activeFlag=1");
            }
            else
            {
                sdr = objDUT.GetDataReader(@"Select NewsID, News, cast(newsDate as varchar) as newDate, activeFlag, display  from [eventNews] where NewsID='" + annID + "'");
            }

            while (sdr.Read())
            {
                Mail mail = new Mail();
                mail.msgID = sdr.GetInt32(0);
                mail.Message = sdr.GetString(1);
                mail.msgDate = sdr.GetString(2);
                mail.activeFlag = sdr.GetBoolean(3);
                mail.display = sdr.GetInt32(4);
                mailList.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return mailList;
    }
    /// <summary>
    /// Purpose : View All Kit Details
    /// page : RequestedEvoucher.aspx
    /// </summary>
    [WebMethod]
    public List<Kit> GetKit(string kid, string kitType)
    {
        string query = string.Empty;
        List<Kit> kitList = new List<Kit>();
        try
        {
            query = "Select kid, kitCode, KitDesc, KitPrice, kitPV, kitbv, kitType,kitproducts from kit_master where kitActive=1  ";
            if (kid != "0")
            {
                query += " and kid='" + kid + "' ";
            }
            if (kitType != "-1")
            {
                query += " and kitType='" + kitType + "' ";
            }
            query += " order by kittype asc";

            sdr = objDUT.GetDataReader(query);

            while (sdr.Read())
            {
                Kit kit = new Kit();
                kit.kID = sdr.GetInt32(0);
                kit.kitCode = sdr.GetString(1);
                kit.kitDesc = sdr.GetString(2);
                kit.kitPrice = sdr.GetDecimal(3);
                kit.kitPV = sdr.GetDecimal(4);
                kit.boardBV = sdr.GetDecimal(5);
                kit.kitType = sdr.GetInt32(6);
                kit.kitproduct = sdr.GetString(7);
                kitList.Add(kit);
            }
        }
        catch (Exception ex)
        {


        }
        return kitList;
    }
    [WebMethod]
    public List<Kit> GetKit1(string kid, string kitType)
    {
        string query = string.Empty;
        List<Kit> kitList = new List<Kit>();
        try
        {

            query = "Select kid, kitCode, KitDesc, KitPrice, kitPV, kitbv, kitType from kit_master where kitActive=1 ";

            if (kid != "0")
            {
                query += " and kid='" + kid + "'  order by kittype asc ";
            }
            if (kitType != "-1")
            {
                query += " and kitType='" + kitType + "'  order by kittype asc ";
            }

            sdr = objDUT.GetDataReader(query);

            while (sdr.Read())
            {
                Kit kit = new Kit();
                kit.kID = sdr.GetInt32(0);
                kit.kitCode = sdr.GetString(1);
                kit.kitDesc = sdr.GetString(2);
                kit.kitPrice = sdr.GetDecimal(3);
                kit.kitPV = sdr.GetDecimal(4);
                kit.boardBV = sdr.GetDecimal(5);
                kit.kitType = sdr.GetInt32(6);
                kitList.Add(kit);
            }
        }
        catch (Exception ex)
        {


        }
        return kitList;
    }
    /// <summary>
    /// Purpose : Get Evoucher Details
    /// page : RequestedEvoucher.aspx
    /// </summary>
    [WebMethod]
    public List<ListEpin> GetVouchers(string kid, string dDate, string regNo)
    {

        string query = string.Empty;
        List<ListEpin> voucherList = new List<ListEpin>();
        DataTable dt;
        //try
        //{
        query = "Select top 100  E.EpinNumber, E.EpinCode, Cast(E.GDate as varchar) as GDate, K.KitCode, K.KitPrice, S.SeName, cast(S.SeDate as varchar) as SeDate, S.RefRegNo, isnull(M.LoginID,''), isnull(Cast(M.regDate as varchar),'') as regDate from epin_master E Left outer join Kit_Master K on E.Kid=K.kid left outer join SoldEpin S on S.sepinid=E.SepinID Left Outer Join Member_master M on M.regno=E.Regno where E.eActive=1 and E.sepinid>0 ";
        if (kid != "0")
        {
            query = query + " and E.Kid='" + kid + "' ";
        }
        if (regNo != "0")
        {
            query = query + " and S.refRegNo='" + regNo + "' ";
        }
        if (dDate != "0")
        {
            query = query + " and S.seDate>='" + dDate + "' ";
        }
        query = query + " Order by E.EpinID desc ";
        sdr = objDUT.GetDataReader(query);
        while (sdr.Read())
        {
            ListEpin LE = new ListEpin();

            LE.epinNumber = sdr.GetString(0);
            LE.epinCode = sdr.GetString(1);
            LE.gDate = sdr.GetString(2);
            LE.kitCode = sdr.GetString(3);
            //LE.kitPrefix = sdr.GetString(4);
            LE.kitPrice = sdr.GetDecimal(4).ToString();
            LE.SName = sdr.GetString(5);
            LE.SDate = sdr.GetString(6);
            //LE.SUserName = sdr.GetString(7);
            LE.JName = sdr.GetString(8);
            LE.JDate = sdr.GetString(9);
            voucherList.Add(LE);
        }

        //}
        //catch { }
        return voucherList;
    }

    /// <summary>
    /// Purpose : Get Evoucher Details
    /// page : RequestedEvoucher.aspx
    /// </summary>

    [WebMethod]
    public string Epinvalidornot(string epinnumber, string kid)
    {
        string status = "false";
        try
        {
            string query = "Select e.EpinNumber from Epin_master e,Kit_Master k where e.kid=k.kid  and e.regNo=0 AND e.sepinid<>0  and e.eactive=1 and k.kittype=1 and e.kid>1 and e.EpinNumber='" + epinnumber + "' and e.kid='" + kid + "'  ";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }




    [WebMethod]
    public string RequestActivation(string sellBy, string reqID, string LoginID, string Name, string Location, string State, string Address, string KCode, string Quantity, string payMode, string payDate, string payNo, string payBank, string pin)
    {
        int reqid = 0;
        try
        {
            if (reqID == "" || reqID == null)
            {
                reqid = 0;
            }
            else
            {
                reqid = Convert.ToInt32(reqID);
            }
        }
        catch (Exception excep)
        {
            reqid = 0;
        }
        string returnValue = string.Empty;
        long regNo = objUT.GetRegistrationNo(LoginID);

        //**************** get kit & Price details ******   
        Decimal Amount = 0, kitPrice = 0;
        int kid = 0;
        DataTable dt = objDUT.GetDataTable("Select kid, KitPrice from kit_master where kitCode='" + KCode + "'");
        kitPrice = Convert.ToDecimal(dt.Rows[0]["KitPrice"].ToString());
        kid = Convert.ToInt32(dt.Rows[0]["kid"].ToString());
        Amount = (kitPrice * Convert.ToDecimal(Quantity));
        dt.Dispose();
        //***********************************************
        try
        {
            if (payMode != "E-Pin")
            {
                SqlParameter[] p = new SqlParameter[11];
                p[0] = new SqlParameter("@RefRegNo", DbType.Int64);
                p[0].Value = regNo;
                p[1] = new SqlParameter("@SEQty", DbType.Int32);
                p[1].Value = Convert.ToInt32(Quantity);
                p[2] = new SqlParameter("@paymode", DbType.String);
                p[2].Value = payMode;
                p[3] = new SqlParameter("@paydate", DbType.DateTime);
                p[3].Value = Convert.ToDateTime(payDate);
                p[4] = new SqlParameter("@refNo", DbType.String);
                p[4].Value = payNo;
                p[5] = new SqlParameter("@bankName", DbType.String);
                p[5].Value = payBank;
                p[6] = new SqlParameter("@amount", DbType.Decimal);
                p[6].Value = Amount;
                p[7] = new SqlParameter("@kid", DbType.Int32);
                p[7].Value = kid;
                p[8] = new SqlParameter("@Country", DbType.Int32);
                p[8].Value = "";
                p[9] = new SqlParameter("@comment", DbType.String);
                p[9].Value = "";
                p[10] = new SqlParameter("@intResult", DbType.Int32);
                p[10].Direction = ParameterDirection.Output;
                returnValue = objDUT.ExecuteSqlSP(p, "SP_RequestEpin_Activation").ToString();
            }
            else
            {
                SqlParameter[] p = new SqlParameter[19];
                p[0] = new SqlParameter("@RefRegNo", DbType.Int64);
                p[0].Value = regNo;
                p[1] = new SqlParameter("@SEName", DbType.String);
                p[1].Value = Name;
                p[2] = new SqlParameter("@SEAddress", DbType.String);
                p[2].Value = Address;
                p[3] = new SqlParameter("@SEMobile", DbType.String);
                p[3].Value = "";
                p[4] = new SqlParameter("@SECity", DbType.String);
                p[4].Value = Location;
                p[5] = new SqlParameter("@SEState", DbType.String);
                p[5].Value = State;
                p[6] = new SqlParameter("@SEQty", DbType.Int32);
                p[6].Value = Convert.ToInt32(Quantity);
                p[7] = new SqlParameter("@SEPaymode", DbType.String);
                p[7].Value = payMode;
                p[8] = new SqlParameter("@SEPayDate", DbType.DateTime);
                p[8].Value = Convert.ToDateTime(payDate);
                p[9] = new SqlParameter("@SERefNo", DbType.String);
                p[9].Value = payNo;
                p[10] = new SqlParameter("@SEBankName", DbType.String);
                p[10].Value = payBank;
                p[11] = new SqlParameter("@SEAmount", DbType.Decimal);
                p[11].Value = Amount;
                p[12] = new SqlParameter("@kid", DbType.Int32);
                p[12].Value = kid;
                p[13] = new SqlParameter("@kprice", DbType.Decimal);
                p[13].Value = kitPrice;
                p[14] = new SqlParameter("@reqid", DbType.Int32);
                p[14].Value = reqid;
                p[15] = new SqlParameter("@sellby", DbType.Int64);
                p[15].Value = Convert.ToInt64(sellBy);
                p[16] = new SqlParameter("@intResult", DbType.Int32);
                p[16].Direction = ParameterDirection.Output;
                p[17] = new SqlParameter("@ACTIVATEBY", DbType.String);
                p[17].Value = "EPIN";
                p[18] = new SqlParameter("@EpinNumber", DbType.String);
                p[18].Value = pin;
                returnValue = objDUT.ExecuteSqlSP(p, "sp_RequestActivation").ToString();
            }

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return returnValue;
    }


    /// <summary>
    /// Purpose : this funcation use for view all Requested E-Voucher of Single Member
    /// Pages : requested_voucher.aspx
    /// </summary>
    /// <param name="Datefrom">satring</param>
    /// <param name="Dateto">string</param>
    /// <returns>List Type [Class]</returns>
    [WebMethod]
    public List<RequestedVoucher> RequestedEvoucher(string Datefrom, string Dateto, string regno, string mtype)
    {
        if (Datefrom == "")
        {
            Datefrom = "";
            Dateto = "";
        }
        else
        {
            string[] date = DateFormat(Datefrom);
            Datefrom = date[0];
            Dateto = date[1];
        }

        List<RequestedVoucher> reqevoucherlist = new List<RequestedVoucher>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[5];
            param[0] = new SqlParameter("@Req_date_from", SqlDbType.VarChar, 50);
            param[0].Value = Datefrom;
            param[1] = new SqlParameter("@Req_date_to", SqlDbType.VarChar, 50);
            param[1].Value = Dateto;
            param[2] = new SqlParameter("@Regno", SqlDbType.BigInt);
            param[2].Value = regno;
            param[3] = new SqlParameter("@ReqKitType", SqlDbType.VarChar, 50);
            param[3].Value = "Package";
            param[4] = new SqlParameter("@mtype", SqlDbType.VarChar, 50);
            param[4].Value = mtype;
            sdr = objDUT.GetDataReaderSP(param, "sp_reqCard_mem");
            while (sdr.Read())
            {
                RequestedVoucher RequestedEvoucher = new RequestedVoucher();
                RequestedEvoucher.RequestedCode = sdr["ReqCode"].ToString();
                RequestedEvoucher.Username = sdr["LoginID"].ToString();
                RequestedEvoucher.Noofevoucher = sdr["NoOfepin"].ToString();
                RequestedEvoucher.Kittype = sdr["kittype"].ToString();
                RequestedEvoucher.Date = Convert.ToDateTime(sdr["refDate"]).ToString("dd/MM/yyyy");
                RequestedEvoucher.Paymode = sdr["Paymode"].ToString();
                RequestedEvoucher.RequestedID = sdr["ReqID"].ToString();
                RequestedEvoucher.status = sdr["reqStatus"].ToString();
                RequestedEvoucher.class_sp = sdr["class"].ToString();


                reqevoucherlist.Add(RequestedEvoucher);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return reqevoucherlist;
    }

    /// <summary>
    /// Purpose : this function use for view Profile i or Edit
    /// Pages : ProfileEdit.aspx
    /// </summary>
    /// <param name="Username">String</param>
    /// <returns>List Type [View_MemberProfile]</returns>


     [WebMethod]
    public List<View_MemberProfile> ViewProfile_Member(string username)
    {
        List<View_MemberProfile> viewprofile = new List<View_MemberProfile>();
        View_MemberProfile memberpro = new View_MemberProfile();
        sdr = null;
        if (username.Length <= 0)
        {
            memberpro.ResultStatus = "2"; // Null Username
        }
        else
        {
            try
            {
                long ctr = Convert.ToInt64(objDUT.GetScalar("Select Count(loginid) from Member_master where loginid='" + username + "'"));
                if (ctr > 0)
                {
                    long active = Convert.ToInt64(objDUT.GetScalar("Select  active from Member_master where loginid='" + username + "'"));
                    if (active > 0)
                    {
                        try
                        {
                            SqlParameter[] param = new SqlParameter[1];
                            param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
                            param[0].Value = username;
                            sdr = objDUT.GetDataReaderSP(param, "sp_getMemberDetails");
                            if (sdr.HasRows)
                            {
                                while (sdr.Read())
                                {
                                    memberpro.nomneename = sdr["nomname"].ToString();
                                    memberpro.nomneerelation = sdr["relation"].ToString();
                                    memberpro.confpayno = sdr["confPayNo"].ToString();
                                    memberpro.loginid = sdr["loginid"].ToString();
                                    memberpro.title = sdr["title"].ToString();
                                    memberpro.fname = sdr["fname"].ToString();
                                    memberpro.lname = sdr["lname"].ToString();
                                    memberpro.dob = sdr["dob"].ToString();
                                    memberpro.Gender = Convert.ToInt32(sdr["Gender"]).ToString();
                                    memberpro.mobile = sdr["mobile"].ToString();
                                    memberpro.emailID = sdr["emailID"].ToString();
                                    memberpro.sid = sdr["sid"].ToString();
                                    memberpro.oState = sdr["oState"].ToString();
                                    memberpro.Ctid = sdr["Ctid"].ToString();
                                    memberpro.cid = sdr["cid"].ToString();
                                    memberpro.oCity = sdr["oCity"].ToString();
                                    memberpro.pincode = sdr["pincode"].ToString();
                                    memberpro.address = sdr["address"].ToString();
                                    memberpro.LandMark = sdr["LandMark"].ToString();
                                    memberpro.firstS_Qid = sdr["Secret_Qid"].ToString();
                                    memberpro.firstS_ANS = sdr["Secret_ANS"].ToString();
                                    memberpro.coreBank = sdr["coreBank"].ToString();
                                    memberpro.branchCode = sdr["branch"].ToString();
                                    memberpro.IFSCCode = sdr["IFSCCode"].ToString();
                                    memberpro.accountNo = sdr["accountNo"].ToString();
                                    memberpro.fat_husName = sdr["fat_husName"].ToString();
                                    memberpro.pancard = sdr["mempan"].ToString();
                                    memberpro.ResultStatus = "1";
                                    memberpro.phone = sdr["phone"].ToString();
                                    memberpro.profession = sdr["profession"].ToString();
                                    //memberpro.pancheck = sdr["pancheck"].ToString();
                                    //memberpro.bankcheck = sdr["bankcheck"].ToString();
                                    //memberpro.paymentrelease = sdr["paymentrelease"].ToString();
                                    viewprofile.Add(memberpro);
                                }
                            }
                            else
                            {
                                memberpro.title = "";
                                memberpro.fname = "";
                                memberpro.lname = "";
                                memberpro.dob = "";
                                memberpro.Gender = "";
                                memberpro.mobile = "";
                                memberpro.phone = "";
                                memberpro.profession = "";
                                memberpro.emailID = "";
                                memberpro.sid = "";
                                memberpro.oState = "";
                                memberpro.Ctid = "";
                                memberpro.oCity = "";
                                memberpro.pincode = "";
                                memberpro.address = "";
                                memberpro.LandMark = "";
                                memberpro.firstS_Qid = "";
                                memberpro.firstS_ANS = "";
                                memberpro.coreBank = "";
                                memberpro.branchCode = "";
                                memberpro.IFSCCode = "";
                                memberpro.accountNo = "";
                                memberpro.ResultStatus = "0";
                                memberpro.pancheck = "0";
                                memberpro.bankcheck = "0";
                                memberpro.paymentrelease = "0";
                            }

                        }
                        catch (Exception excep)
                        {
                        }
                    }
                    else
                    {
                        memberpro.ResultStatus = "5";  // Member Deactive
                    }
                }
                else
                {
                    memberpro.ResultStatus = "4";  // Invalid Username
                }
            }
            catch (Exception Excep)
            {
                memberpro.ResultStatus = "3";  // Invalid Username
            }
        }
        return viewprofile;
    }


    [WebMethod]
    public string Checkusername(string username)
    {
        string status = "false";
        try
        {
            int sponsor_limits = 0;
            sponsor_limits = Convert.ToInt32(objDUT.GetScalar("select limits from settings where caption='Companyid'"));
            string query = "Select  loginid from Member_master where (loginid='" + username + "' or randomid='" + username + "' )  and regno>=" + sponsor_limits + "";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    /// <summary>
    /// Purpose: Edit Profile
    /// Pages : profileEdit.aspx
    /// </summary>
    /// <param name="regno"></param>
    /// <param name="QueryType"></param>
    /// <param name="intResult"></param>
    /// <param name="title"></param>
    /// <param name="fname"></param>
    /// <param name="lname"></param>
    /// <param name="dob"></param>
    /// <param name="Gender"></param>
    /// <param name="mobile"></param>
    /// <param name="emailID"></param>
    /// <param name="sid"></param>
    /// <param name="oState"></param>
    /// <param name="Ctid"></param>
    /// <param name="oCity"></param>
    /// <param name="pincode"></param>
    /// <param name="address"></param>
    /// <param name="LandMark"></param>
    /// <param name="LoginID"></param>
    /// <param name="firstS_Qid"></param>
    /// <param name="firstS_ANS"></param>
    /// <param name="coreBank"></param>
    /// <param name="branchCode"></param>
    /// <param name="IFSCCode"></param>
    /// <param name="accountNo"></param>
    /// <returns></returns>

    [WebMethod]
    public string UpdateMemberProfile(string regno, string QueryType, string intResult, string title, string fname, string lname, string fatherName, string dob, string Gender, string mobile, string emailID, string sid, string oState, string Ctid, string oCity, string pincode, string address, string LandMark, string LoginID, string firstS_Qid, string firstS_ANS, string coreBank, string bankaddress, string IFSCCode, string accountNo, string CountryID, string distid, string distName, string pancard, string nomname, string relation, string pancheck, string bankchcek, string paymentcheck,string phone,string profession)
    {
        string ResultStatus = "0";


        //try
        //{
        regno = Convert.ToString(objDUT.GetScalar("Select regno from Member_master where loginid='" + LoginID + "'"));
        SqlParameter[] param = new SqlParameter[36];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
        param[1].Value = "update";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        param[3] = new SqlParameter("@title", SqlDbType.VarChar, 50);
        param[3].Value = title;
        param[4] = new SqlParameter("@fname", SqlDbType.VarChar, 50);
        param[4].Value = fname;
        param[5] = new SqlParameter("@lname", SqlDbType.VarChar, 100);
        param[5].Value = lname;
        param[6] = new SqlParameter("@dob", SqlDbType.VarChar, 50);
        param[6].Value = dateformat(dob);
        param[7] = new SqlParameter("@Gender", SqlDbType.Int);
        param[7].Value = Gender;
        param[8] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
        param[8].Value = mobile;
        param[9] = new SqlParameter("@emailID", SqlDbType.VarChar, 100);
        param[9].Value = emailID;
        param[10] = new SqlParameter("@sid", SqlDbType.Int);
        param[10].Value = sid;
        param[11] = new SqlParameter("@oState", SqlDbType.VarChar, 100);
        param[11].Value = oState;
        param[12] = new SqlParameter("@Ctid", SqlDbType.Int);
        param[12].Value = Ctid;
        param[13] = new SqlParameter("@oCity", SqlDbType.VarChar, 100);
        param[13].Value = oCity;
        param[14] = new SqlParameter("@pincode", SqlDbType.Int);
        param[14].Value = pincode;
        param[15] = new SqlParameter("@address", SqlDbType.VarChar, 100);
        param[15].Value = address;
        param[16] = new SqlParameter("@LandMark", SqlDbType.VarChar, 100);
        param[16].Value = LandMark;
        param[17] = new SqlParameter("@LoginID", SqlDbType.VarChar, 100);
        param[17].Value = LoginID;
        param[18] = new SqlParameter("@firstS_Qid", SqlDbType.VarChar, 100);
        param[18].Value = firstS_Qid;
        param[19] = new SqlParameter("@firstS_ANS", SqlDbType.VarChar, 100);
        param[19].Value = firstS_ANS;
        param[20] = new SqlParameter("@coreBank", SqlDbType.VarChar, 100);
        param[20].Value = coreBank;
        param[21] = new SqlParameter("@branchCode", SqlDbType.VarChar, 100);
        param[21].Value = bankaddress;
        param[22] = new SqlParameter("@IFSCCode", SqlDbType.VarChar, 100);
        param[22].Value = IFSCCode;
        param[23] = new SqlParameter("@accountNo", SqlDbType.VarChar, 100);
        param[23].Value = accountNo;
        param[24] = new SqlParameter("@countryid", SqlDbType.Int, 4);
        param[24].Value = CountryID;
        param[25] = new SqlParameter("@fatherName", SqlDbType.VarChar, 100);
        param[25].Value = fatherName;
        param[26] = new SqlParameter("@distid", SqlDbType.Int, 4);
        param[26].Value = distid;
        param[27] = new SqlParameter("@odistrict", SqlDbType.VarChar, 100);
        param[27].Value = distName;
        param[28] = new SqlParameter("@pancard", SqlDbType.VarChar, 100);
        param[28].Value = pancard;
        param[29] = new SqlParameter("@nomname", SqlDbType.VarChar, 200);
        param[29].Value = nomname;
        param[30] = new SqlParameter("@relation", SqlDbType.VarChar, 200);
        param[30].Value = relation;
        param[31] = new SqlParameter("@pancheck", SqlDbType.Int, 4);
        param[31].Value = Convert.ToInt32(pancheck);
        param[32] = new SqlParameter("@bankcheck", SqlDbType.Int, 4);
        param[32].Value = Convert.ToInt32(bankchcek);
        param[33] = new SqlParameter("@paymentrelease", SqlDbType.Int, 4);
        param[33].Value = Convert.ToInt32(paymentcheck);
        param[34].Value = new SqlParameter("@phone", SqlDbType.VarChar, 20);
        param[34].Value = phone;
        param[35].Value = new SqlParameter("@profession", SqlDbType.VarChar, 100);
        param[35].Value = profession;
        int result = objDUT.ExecuteSqlSP(param, "sp_manageMemberProfile");
        if (result > 0)
        {
            ResultStatus = "1";
        }
        else
        {
            ResultStatus = "0";
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }

    [WebMethod]
    public string UpdateMemberProfile1(string regno, string QueryType, string intResult, string title, string fname, string lname, string fatherName, string dob, string Gender, string mobile, string emailID, string sid, string oState, string Ctid, string oCity, string pincode, string address, string LandMark, string LoginID, string firstS_Qid, string firstS_ANS, string coreBank, string bankaddress, string IFSCCode, string accountNo, string CountryID, string distid, string distName, string pancard, string nomname, string relation,string phone,string profession)
    {
        string ResultStatus = "0";


        //try
        //{
        regno = Convert.ToString(objDUT.GetScalar("Select regno from Member_master where loginid='" + LoginID + "'"));

        SqlParameter[] param = new SqlParameter[33];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
        param[1].Value = "update";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        param[3] = new SqlParameter("@title", SqlDbType.VarChar, 50);
        param[3].Value = title;
        param[4] = new SqlParameter("@fname", SqlDbType.VarChar, 50);
        param[4].Value = fname;
        param[5] = new SqlParameter("@lname", SqlDbType.VarChar, 100);
        param[5].Value = lname;
        param[6] = new SqlParameter("@dob", SqlDbType.VarChar, 50);
        param[6].Value = dateformat(dob);
        param[7] = new SqlParameter("@Gender", SqlDbType.Int);
        param[7].Value = Gender;
        param[8] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
        param[8].Value = mobile;
        param[9] = new SqlParameter("@emailID", SqlDbType.VarChar, 100);
        param[9].Value = emailID;
        param[10] = new SqlParameter("@sid", SqlDbType.Int);
        param[10].Value = sid;
        param[11] = new SqlParameter("@oState", SqlDbType.VarChar, 100);
        param[11].Value = oState;
        param[12] = new SqlParameter("@Ctid", SqlDbType.Int);
        param[12].Value = Ctid;
        param[13] = new SqlParameter("@oCity", SqlDbType.VarChar, 100);
        param[13].Value = oCity;
        param[14] = new SqlParameter("@pincode", SqlDbType.VarChar, 50);
        param[14].Value = pincode;
        param[15] = new SqlParameter("@address", SqlDbType.VarChar, 100);
        param[15].Value = address;
        param[16] = new SqlParameter("@LandMark", SqlDbType.VarChar, 100);
        param[16].Value = LandMark;
        param[17] = new SqlParameter("@LoginID", SqlDbType.VarChar, 100);
        param[17].Value = LoginID;
        param[18] = new SqlParameter("@firstS_Qid", SqlDbType.VarChar, 100);
        param[18].Value = firstS_Qid;
        param[19] = new SqlParameter("@firstS_ANS", SqlDbType.VarChar, 100);
        param[19].Value = firstS_ANS;
        param[20] = new SqlParameter("@coreBank", SqlDbType.VarChar, 100);
        param[20].Value = coreBank;
        param[21] = new SqlParameter("@branchCode", SqlDbType.VarChar, 100);
        param[21].Value = bankaddress;
        param[22] = new SqlParameter("@IFSCCode", SqlDbType.VarChar, 100);
        param[22].Value = IFSCCode;
        param[23] = new SqlParameter("@accountNo", SqlDbType.VarChar, 100);
        param[23].Value = accountNo;
        param[24] = new SqlParameter("@countryid", SqlDbType.Int, 4);
        param[24].Value = CountryID;
        param[25] = new SqlParameter("@fatherName", SqlDbType.VarChar, 100);
        param[25].Value = fatherName;
        param[26] = new SqlParameter("@distid", SqlDbType.Int, 4);
        param[26].Value = distid;
        param[27] = new SqlParameter("@odistrict", SqlDbType.VarChar, 100);
        param[27].Value = distName;
        param[28] = new SqlParameter("@pancard", SqlDbType.VarChar, 100);
        param[28].Value = pancard;
        param[29] = new SqlParameter("@nomname", SqlDbType.VarChar, 200);
        param[29].Value = nomname;
        param[30] = new SqlParameter("@relation", SqlDbType.VarChar, 200);
        param[30].Value = relation;
        param[31] = new SqlParameter("@phone", SqlDbType.VarChar, 30);
        param[31].Value = phone;
        param[32] = new SqlParameter("@profession", SqlDbType.VarChar, 100);
        param[32].Value = profession;

        int result = objDUT.ExecuteSqlSP(param, "sp_manageMemberProfile1");
        if (result == 1)
        {
            ResultStatus = "1";
        }
        else if (result == 2)
        {
            ResultStatus = "2";
        }
        else
        {
            ResultStatus = "0";
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }
   [WebMethod]
    public string UpdateMemberProfile12(string regno, string QueryType, string intResult, string title, string fname, string lname, string fatherName, string dob, string Gender, string mobile, string emailID, string sid, string oState, string Ctid, string oCity, string pincode, string address, string LandMark, string LoginID, string firstS_Qid, string firstS_ANS, string coreBank, string bankaddress, string IFSCCode, string accountNo, string CountryID, string distid, string distName, string pancard, string nomname, string relation, string loginidusername)
    {
        string ResultStatus = "0";


        //try
        //{
        regno = Convert.ToString(objDUT.GetScalar("Select regno from Member_master where loginid='" + LoginID + "'"));
        int countryid1 = Convert.ToInt32(objDUT.GetScalar("Select cid from country where countryname='" + CountryID + "'"));
        SqlParameter[] param = new SqlParameter[31];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
        param[1].Value = "update";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        param[3] = new SqlParameter("@title", SqlDbType.VarChar, 50);
        param[3].Value = title;
        param[4] = new SqlParameter("@fname", SqlDbType.VarChar, 50);
        param[4].Value = fname;
        param[5] = new SqlParameter("@lname", SqlDbType.VarChar, 100);
        param[5].Value = lname;
        param[6] = new SqlParameter("@dob", SqlDbType.VarChar, 50);
        param[6].Value = dateformat(dob);
        param[7] = new SqlParameter("@Gender", SqlDbType.Int);
        param[7].Value = Gender;
        param[8] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
        param[8].Value = mobile;
        param[9] = new SqlParameter("@emailID", SqlDbType.VarChar, 100);
        param[9].Value = emailID;
        param[10] = new SqlParameter("@sid", SqlDbType.Int);
        param[10].Value = sid;
        param[11] = new SqlParameter("@oState", SqlDbType.VarChar, 100);
        param[11].Value = oState;
        param[12] = new SqlParameter("@Ctid", SqlDbType.Int);
        param[12].Value = Ctid;
        param[13] = new SqlParameter("@oCity", SqlDbType.VarChar, 100);
        param[13].Value = oCity;
        param[14] = new SqlParameter("@pincode", SqlDbType.VarChar, 50);
        param[14].Value = pincode;
        param[15] = new SqlParameter("@address", SqlDbType.VarChar, 100);
        param[15].Value = address;
        param[16] = new SqlParameter("@LandMark", SqlDbType.VarChar, 100);
        param[16].Value = LandMark;
        param[17] = new SqlParameter("@LoginID", SqlDbType.VarChar, 100);
        param[17].Value = LoginID;
        param[18] = new SqlParameter("@firstS_Qid", SqlDbType.VarChar, 100);
        param[18].Value = "0";
        param[19] = new SqlParameter("@firstS_ANS", SqlDbType.VarChar, 100);
        param[19].Value = firstS_ANS;
        param[20] = new SqlParameter("@coreBank", SqlDbType.VarChar, 100);
        param[20].Value = coreBank;
        param[21] = new SqlParameter("@branchCode", SqlDbType.VarChar, 100);
        param[21].Value = bankaddress;
        param[22] = new SqlParameter("@IFSCCode", SqlDbType.VarChar, 100);
        param[22].Value = IFSCCode;
        param[23] = new SqlParameter("@accountNo", SqlDbType.VarChar, 100);
        param[23].Value = accountNo;
        param[24] = new SqlParameter("@countryid", SqlDbType.Int, 4);
        param[24].Value = countryid1;
        param[25] = new SqlParameter("@fatherName", SqlDbType.VarChar, 100);
        param[25].Value = fatherName;
        param[26] = new SqlParameter("@distid", SqlDbType.Int, 4);
        param[26].Value = distid;
        param[27] = new SqlParameter("@odistrict", SqlDbType.VarChar, 100);
        param[27].Value = distName;
        param[28] = new SqlParameter("@pancard", SqlDbType.VarChar, 100);
        param[28].Value = pancard;
        param[29] = new SqlParameter("@nomname", SqlDbType.VarChar, 200);
        param[29].Value = nomname;
        param[30] = new SqlParameter("@relation", SqlDbType.VarChar, 200);
        param[30].Value = loginidusername;

        int result = objDUT.ExecuteSqlSP(param, "sp_manageMemberProfile1");
        if (result == 1)
        {
            ResultStatus = "1";
        }
        else if (result == 2)
        {
            ResultStatus = "2";
        }
        else
        {
            ResultStatus = "0";
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }

    [WebMethod]
    public List<Member> GetMem(string LoginID)
    {
        string query = string.Empty;
        List<Member> memList = new List<Member>();
        // try
        // {

        query = @"Select M.RegNo, Cast(M.memCode as varchar), M.randomID, L.Loginid,
                            (M.fName+' '+M.lname) as fullName,cast(M.regDate as varchar) as regDate,
                            isnull(M.address,'') as 'Address' ,c.countryname,M.ostate,
                               m.oCity,  isnull(M.pinCode,'') as 'Pincode',isnull(M.mobile,'') as 'Mobile',
                              isnull(M.emailID,'')as 'EmailID', L.password from Member_master M,country c,
                               Member_login L where M.regno=L.regNo and m.cid=c.cid and  (M.Loginid='" + LoginID + "' or M.Randomid='" + LoginID + "') ";

        sdr = objDUT.GetDataReader(query);

        while (sdr.Read())
        {
            Member mem = new Member();
            mem.regNo = sdr.GetInt64(0);
            mem.memCode = sdr.GetString(1);
            mem.randomID = sdr.GetString(2);
            mem.Loginid = sdr.GetString(3);
            mem.fullName = sdr.GetString(4);
            mem.regDate = sdr.GetString(5);
            mem.address = sdr.GetString(6);
            mem.oCountry = sdr.GetString(7);
            mem.oState = sdr.GetString(8);
            mem.oCity = sdr.GetString(9);
            mem.pinCode = sdr.GetString(10);
            mem.emailID = sdr.GetString(12);
            mem.password = sdr.GetString(12);
            mem.transPass = sdr.GetString(13);
            //mem.active = sdr.GetBoolean(14);
            memList.Add(mem);

        }
        //}
        //catch (Exception ex)
        //{


        //}
        return memList;
    }

    [WebMethod]
    public string genkycepin(string sellBy, string reqID, string LoginID, string Name, string Location, string State, string Country, string Address, string KCode, string Quantity)
    {
        string returnValue = string.Empty;
        long regNo = objUT.GetRegistrationNo(LoginID);
        //int t = Convert.ToInt32(objDUT.GetScalar("select confpayno from member_master where regno=" + regNo));
        //if (t == 0)
        //{
        //    returnValue = "2";// "You have not authority to generate Evoucher. Please activate yourself.";
        //    return returnValue;
        //}
        int sid = Convert.ToInt32(objDUT.GetScalar("select sid from STATE WHERE statename='" + State + "'"));
        int ctid = Convert.ToInt32(objDUT.GetScalar("select ctid from CITY where cityname='" + Location + "'"));
        int reqid = 0;
        try
        {
            if (reqID == "" || reqID == null)
            {
                reqid = 0;
            }
            else
            {
                reqid = Convert.ToInt32(reqID);
            }
        }
        catch (Exception excep)
        {
            reqid = 0;
        }



        //**************** get kit & Price details ******   
        Decimal Amount = 0, kitPrice = 0;
        int kid = 0;
        DataTable dt = objDUT.GetDataTable("Select kid, KitPrice from kit_master where kitCode='" + KCode + "'");
        kitPrice = Convert.ToDecimal(dt.Rows[0]["KitPrice"].ToString());
        kid = Convert.ToInt32(dt.Rows[0]["kid"].ToString());
        Amount = (kitPrice * Convert.ToDecimal(Quantity));
        dt.Dispose();
        //***********************************************

        try
        {
            SqlParameter[] p = new SqlParameter[17];
            p[0] = new SqlParameter("@RefRegNo", DbType.Int64);
            p[0].Value = regNo;
            p[1] = new SqlParameter("@SEName", DbType.String);
            p[1].Value = Name;
            p[2] = new SqlParameter("@SEAddress", DbType.String);
            p[2].Value = Address;
            p[3] = new SqlParameter("@SEMobile", DbType.String);
            p[3].Value = "";
            p[4] = new SqlParameter("@SECity", DbType.Int32);
            p[4].Value = ctid;
            p[5] = new SqlParameter("@SEState", DbType.Int32);
            p[5].Value = sid;
            p[6] = new SqlParameter("@SEQty", DbType.Int32);
            p[6].Value = Convert.ToInt32(Quantity);
            p[7] = new SqlParameter("@SEPaymode", DbType.String);
            p[7].Value = "";
            p[8] = new SqlParameter("@SEPayDate", DbType.DateTime);
            p[8].Value = "";
            p[9] = new SqlParameter("@SERefNo", DbType.Int64);
            p[9].Value = 0;
            p[10] = new SqlParameter("@SEBankName", DbType.String);
            p[10].Value = "";
            p[11] = new SqlParameter("@SEAmount", DbType.Decimal);
            p[11].Value = Amount;
            p[12] = new SqlParameter("@kid", DbType.Int32);
            p[12].Value = kid;
            p[13] = new SqlParameter("@kprice", DbType.Decimal);
            p[13].Value = kitPrice;
            p[14] = new SqlParameter("@reqid", DbType.Int32);
            p[14].Value = reqid;
            p[15] = new SqlParameter("@sellby", DbType.Int64);
            p[15].Value = 0;
            p[16] = new SqlParameter("@intResult", DbType.Int32);
            p[16].Direction = ParameterDirection.Output;

            returnValue = objDUT.ExecuteSqlSP(p, "SP_SaleNewEpinkycMember").ToString();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return returnValue;
    }






    /// <summary>
    /// 
    /// </summary>
    /// <param name="regno">String</param>
    /// <param name="Querytype">String</param>
    /// <returns></returns>
    [WebMethod]
    public List<BankDetails> ViewBankDetails(string regno, string Querytype)
    {
        List<BankDetails> BankDetailslist = new List<BankDetails>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[2];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = regno;
            param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
            param[1].Value = "View";

            sdr = objDUT.GetDataReaderSP(param, "Sp_BankDetails");
            while (sdr.Read())
            {
                BankDetails bankdetails = new BankDetails();
                bankdetails.Bankname = sdr["Bankname"].ToString();
                bankdetails.Branchcode = sdr["Branchcode"].ToString();
                bankdetails.Branchname = sdr["Branchname"].ToString();
                bankdetails.ifsccode = sdr["ifsccode"].ToString();
                bankdetails.accountno = sdr["accountno"].ToString();
                bankdetails.accountholdername = sdr["accountholdername"].ToString();
                bankdetails.accountType = sdr["accountType"].ToString();
                bankdetails.BankAddress = sdr["BankAddress"].ToString();
                BankDetailslist.Add(bankdetails);
            }
            sdr.Dispose();
        }
        catch (Exception exce)
        {
        }
        return BankDetailslist;
    }




    /// <summary>
    /// Purpose : Update Bankdetails 
    /// page : RequestedPayout.aspx
    /// </summary>
    [WebMethod]
    public int UpdateBankDetails(Bank_Param bank)
    {
        int res = 0;
        try
        {
            SqlParameter[] arrParam = new SqlParameter[10];
            arrParam[0] = new SqlParameter("@Bankname", SqlDbType.VarChar, 500);
            arrParam[0].Value = bank.Bankname;
            arrParam[1] = new SqlParameter("@Branchcode", SqlDbType.VarChar, 50);
            arrParam[1].Value = bank.Branchcode;
            arrParam[2] = new SqlParameter("@ifsccode", SqlDbType.VarChar, 50);
            arrParam[2].Value = bank.ifsccode;
            arrParam[3] = new SqlParameter("@Branchname", SqlDbType.VarChar, 100);
            arrParam[3].Value = bank.Branchname;
            arrParam[4] = new SqlParameter("@accountno", SqlDbType.VarChar, 50);
            arrParam[4].Value = bank.accountno;
            arrParam[5] = new SqlParameter("@accountholdername", SqlDbType.VarChar, 100);
            arrParam[5].Value = bank.accountholdername;
            arrParam[6] = new SqlParameter("@accountType", SqlDbType.VarChar, 100);
            arrParam[6].Value = bank.accountType;
            arrParam[7] = new SqlParameter("@BankAddress", SqlDbType.VarChar, 500);
            arrParam[7].Value = bank.BankAddress;
            arrParam[8] = new SqlParameter("@regno", SqlDbType.BigInt);
            arrParam[8].Value = bank.regno;
            arrParam[9] = new SqlParameter("@intResult", SqlDbType.Int);
            arrParam[9].Direction = ParameterDirection.Output;
            res = objDUT.ExecuteSqlSP(arrParam, "Sp_updateBankDetails");
        }
        catch (Exception excep)
        {
            res = 0;
        }
        return res;
    }



    /// <summary>
    /// 
    /// </summary>
    /// <param name="regno"></param>
    /// <param name="Querytype"></param>
    /// <returns></returns>
    [WebMethod]
    public bool CheckBankDetails(string regno, string Querytype)
    {

        bool result = false;
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[2];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = regno;
            param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
            param[1].Value = "View";

            sdr = objDUT.GetDataReaderSP(param, "Sp_BankDetails");
            while (sdr.Read())
            {
                if (String.IsNullOrEmpty(sdr["Bankname"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["Branchcode"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["Branchname"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["ifsccode"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["accountno"].ToString()))
                    result = false;
                //if (String.IsNullOrEmpty(sdr["accountholdername"].ToString()))
                //    result = false;
                //if (String.IsNullOrEmpty(sdr["accountType"].ToString()))
                //    result = false;
                //if (String.IsNullOrEmpty(sdr["BankAddress"].ToString()))
                //    result = false;
                else
                    result = true;
            }

            sdr.Dispose();
        }
        catch (Exception exce)
        {
            sdr.Close();
            sdr.Dispose();
            result = false;
        }
        return result;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="payoutparam"></param>
    /// <returns></returns>
    [WebMethod(EnableSession = true)]
    public int SaveRequestPayout(PayoutReq_parma payoutparam)
    {
        int result = 0;
        /* 
        0 :  there are some technical error
        1 : Record save succeessfully;
        2 : Member Not active or Invalid Member
        3 : your account balance is 0;
        4 : Your Amount is Invalid
        5 : your Request balance is more than available balance.
        6 : Incomplete your bank details. Please fill the  properly bank details.
         */
        string hostName = System.Net.Dns.GetHostName();
        string myIP = System.Net.Dns.GetHostByName(hostName).AddressList[0].ToString();
        long ctr = Convert.ToInt64(objDUT.GetScalar("Select Count(regno) from Member_master where active=1 and  regno='" + payoutparam.mRegNo + "'"));
        if (ctr <= 0)
        {
            result = 2;
            return result;
        }
        double CurrentBalance_beforePay = Convert.ToDouble(CurrentBalance.getBalance(Convert.ToInt64(payoutparam.mRegNo))) * Convert.ToDouble(HttpContext.Current.Session["CurrencyRate"]);
        double Request_Amount = Convert.ToDouble(payoutparam.Amount);
        if (Request_Amount > 99999999)
        {
            result = 4;
            return result;
        }
        if (CurrentBalance_beforePay <= 0)
        {
            result = 3;
            return result;
        }
        if (Request_Amount > CurrentBalance_beforePay)
        {
            result = 5;
            return result;
        }
        if (false == CheckBankDetails(payoutparam.mRegNo, "View"))
        {
            result = 6;
            return result;
        }
        SqlParameter[] arrParam = new SqlParameter[12];
        arrParam[0] = new SqlParameter("@mRegNo", SqlDbType.BigInt);
        arrParam[0].Value = payoutparam.mRegNo;
        arrParam[1] = new SqlParameter("@Amount", SqlDbType.Money);
        arrParam[1].Value = Convert.ToDouble(payoutparam.Amount) / Convert.ToDouble(HttpContext.Current.Session["CurrencyRate"]);
        arrParam[2] = new SqlParameter("@BankName", SqlDbType.VarChar, 100);
        arrParam[2].Value = payoutparam.BankName;
        arrParam[3] = new SqlParameter("@swiftCode", SqlDbType.VarChar, 100);
        arrParam[3].Value = "0000";
        arrParam[4] = new SqlParameter("@accountName", SqlDbType.VarChar, 100);
        arrParam[4].Value = payoutparam.accountName;
        arrParam[5] = new SqlParameter("@accountNumber", SqlDbType.VarChar, 100);
        arrParam[5].Value = payoutparam.accountNumber;
        arrParam[6] = new SqlParameter("@accountType", SqlDbType.VarChar, 100);
        arrParam[6].Value = payoutparam.accountType;
        arrParam[7] = new SqlParameter("@branch", SqlDbType.VarChar, 100);
        arrParam[7].Value = payoutparam.branch;
        arrParam[8] = new SqlParameter("@ip", SqlDbType.VarChar, 500);
        arrParam[8].Value = myIP;
        arrParam[9] = new SqlParameter("@branchcode", SqlDbType.VarChar, 50);
        arrParam[9].Value = payoutparam.branchcode; ;
        arrParam[10] = new SqlParameter("@ifsccode", SqlDbType.VarChar, 50);
        arrParam[10].Value = payoutparam.ifsccode;
        arrParam[11] = new SqlParameter("@intResult", SqlDbType.Int);
        arrParam[11].Direction = ParameterDirection.Output;
        int res = objDUT.ExecuteSqlSP(arrParam, "SP_RequestWithDrwa");
        if (res == 1)
        {
            result = 1;
        }
        if (res == 2)
        {
            result = 5;
        }
        result = res;
        return result;
    }

    public string SaveRequestPayout2(string reg)
    {

        string result = "s";
        return result;
    }

    [WebMethod]
    public List<Message> All_Message(string msgid, string caption)
    {

        List<Message> messagelist = new List<Message>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[2];
            param[0] = new SqlParameter("@msgid", SqlDbType.Int);
            param[0].Value = msgid;
            param[1] = new SqlParameter("@caption", SqlDbType.VarChar, 500);
            param[1].Value = caption;
            sdr = objDUT.GetDataReaderSP(param, "Sp_message");
            while (sdr.Read())
            {
                Message _message = new Message();
                _message.msgid = sdr["Msgid"].ToString();
                _message.caption = sdr["Caption"].ToString();
                _message.message = sdr["Message"].ToString();
                _message.status = sdr["Active"].ToString();
                messagelist.Add(_message);
            }
            sdr.Dispose();
        }
        catch (Exception exce)
        {
        }
        return messagelist;
    }

    [WebMethod]
    public string CheckCaption(string caption)
    {
        string status = "false";
        try
        {
            //string query = "Select ePassword from Member_login  where loginid='" + loginid + "' and  ePassword='" + oldpassword + "'";
            string query = "Select count(caption) from System_Message where  Caption='" + caption + "' and Active=1";
            string oldpass = Convert.ToString(objDUT.GetScalar(query));
            if (Convert.ToInt32(oldpass) > 0)
            {
                status = "false";
            }
            else
            {
                status = "true";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }



    [WebMethod]
    public List<string> GetMSg(string msgid)
    {
        sdr = null;
        List<string> msglist = new List<string>();
        try
        {
            string query = "Select Caption,Message from System_Message where  msgid ='" + msgid + "'  ";
            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                msglist.Add(sdr["Message"].ToString());
                msglist.Add(sdr["Caption"].ToString());
            }
            sdr.Close();
            sdr.Dispose();
        }
        catch (Exception excep)
        {
            sdr.Close();
            sdr.Dispose();
        }
        return msglist;
    }

    [WebMethod]
    public void UpdateMessage(string msgid, string key, string value)
    {
        Configuration myConfiguration = System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration("~/Message/");
        myConfiguration.AppSettings.Settings[key].Value = value;
        myConfiguration.Save();
        SqlParameter[] param = new SqlParameter[2];
        param[0] = new SqlParameter("@caption", SqlDbType.VarChar, 500);
        param[0].Value = key;
        param[1] = new SqlParameter("@message", SqlDbType.NVarChar, 4000);
        param[1].Value = value;
        int res = objDUT.ExecuteSqlSP(param, "sp_insertMSG");
    }
    [WebMethod]
    public List<EvoucherBank> EvoucherBank(string regno, string kid, string Reg_date_from, string Reg_date_to, string loginid, string type)
    {
        if (Reg_date_from == "")
        {
            Reg_date_from = "";
            Reg_date_to = "";
        }
        else
        {
            string[] date = DateFormat(Reg_date_from);
            Reg_date_from = date[0];
            Reg_date_to = date[1];
        }

        List<EvoucherBank> evoucherbanklist = new List<EvoucherBank>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[8];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = regno;
            param[1] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
            param[1].Value = kid;
            param[2] = new SqlParameter("@Reg_date_from", SqlDbType.VarChar, 50);
            param[2].Value = Reg_date_from;
            param[3] = new SqlParameter("@Reg_date_to", SqlDbType.VarChar, 50);
            param[3].Value = Reg_date_to;
            param[4] = new SqlParameter("@invoice_date_from", SqlDbType.VarChar, 50);
            param[4].Value = "";
            param[5] = new SqlParameter("@invoice_date_to", SqlDbType.VarChar, 50);
            param[5].Value = "";
            param[6] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[6].Value = loginid;
            param[7] = new SqlParameter("@filtertype", SqlDbType.VarChar, 500);
            param[7].Value = type;

            sdr = objDUT.GetDataReaderSP(param, "Sp_epinbank");
            while (sdr.Read())
            {
                EvoucherBank evoucherbank = new EvoucherBank();
                evoucherbank.RequestNo = sdr["RequestNo"].ToString();
                evoucherbank.KitCode = sdr["KitCode"].ToString();
                evoucherbank.KitType = sdr["KitType"].ToString();
                evoucherbank.EpinNumber = sdr["EpinNumber"].ToString();
                evoucherbank.EpinCode = sdr["EpinCode"].ToString();
                evoucherbank.Registredby = sdr["Registredby"].ToString();
                evoucherbank.RegistredDate = sdr["RegistredDate"].ToString();
                evoucherbank.InvoiceNo = sdr["InvoiceNo"].ToString();
                if (sdr["InvoiceDate"].ToString() == "" || sdr["InvoiceDate"].ToString() == null)
                {
                    evoucherbank.InvoiceDate = "";
                }
                else
                {
                    evoucherbank.InvoiceDate = Convert.ToDateTime(sdr["InvoiceDate"]).ToString("dd/MM/yyyy");
                }
                if (sdr["RegistredDate"].ToString() == "1/1/1900 12:00:00 AM" || evoucherbank.RegistredDate == "")
                {
                    evoucherbank.RegistredDate = "";
                }
                else
                {
                    evoucherbank.RegistredDate = Convert.ToDateTime(sdr["RegistredDate"]).ToString("dd/MM/yyyy");
                }

                evoucherbanklist.Add(evoucherbank);
            }
            sdr.Close();
            sdr.Dispose();

        }
        catch (Exception exce)
        {
            sdr.Close();
            sdr.Dispose();
        }
        return evoucherbanklist;
    }

    [WebMethod]
    public List<string> CountEvoucherBank(string regno)
    {
        List<string> evoucherCtr = new List<string>();

        evoucherCtr.Insert(0, Convert.ToString(objDUT.GetScalar("Select  Count(Epin_master.epinnumber)  from  SoldEpin INNER JOIN  Epin_Master ON SoldEpin.SEPinId = Epin_Master.SEPinID Inner Join  Epin_Request ON SoldEpin.Reqid = Epin_Request.reqid where   Epin_request.reqstatus=1 and Epin_request.regno='" + regno + "'")));
        evoucherCtr.Insert(1, Convert.ToString(objDUT.GetScalar("Select  Count(Epin_master.epinnumber)  from  SoldEpin INNER JOIN  Epin_Master ON SoldEpin.SEPinId = Epin_Master.SEPinID Inner Join  Epin_Request ON SoldEpin.Reqid = Epin_Request.reqid where   Epin_request.reqstatus=1 and Epin_request.regno='" + regno + "' and Epin_Master.regno = 0")));
        evoucherCtr.Insert(2, Convert.ToString(objDUT.GetScalar("Select  Count(Epin_master.epinnumber)  from  SoldEpin INNER JOIN  Epin_Master ON SoldEpin.SEPinId = Epin_Master.SEPinID Inner Join  Epin_Request ON SoldEpin.Reqid = Epin_Request.reqid where   Epin_request.reqstatus=1 and Epin_request.regno='" + regno + "' and Epin_Master.regno > 0")));
        return evoucherCtr;
    }

    [WebMethod]
    public string SendMessage(message_parma msgparam)
    {
        SqlParameter[] param = new SqlParameter[7];
        param[0] = new SqlParameter("@FromRegno", SqlDbType.BigInt, 500);
        param[0].Value = msgparam.fromRegno;
        param[1] = new SqlParameter("@loginid", SqlDbType.NVarChar, 4000);
        param[1].Value = msgparam.to;
        param[2] = new SqlParameter("@Message_type", SqlDbType.NVarChar, 4000);
        param[2].Value = msgparam.messagetype;
        param[3] = new SqlParameter("@Message_subject", SqlDbType.NVarChar, 4000);
        param[3].Value = msgparam.subject;
        param[4] = new SqlParameter("@message", SqlDbType.NVarChar, 4000);
        param[4].Value = msgparam.message;
        param[5] = new SqlParameter("@type", SqlDbType.VarChar, 100);
        param[5].Value = msgparam.QuertType;
        param[6] = new SqlParameter("@intResult", SqlDbType.Int);
        param[6].Direction = ParameterDirection.Output;

        int res = objDUT.ExecuteSqlSP(param, "sp_messageSend_Member");
        return "true";
    }


    /// <summary>
    /// Pupose : Get all Member_Message
    /// pages : mailbox.aspx
    /// </summary>
    /// <param name="PageIndex">int</param>
    /// <param name="PageSize">int</param>
    /// <returns></returns>
    [WebMethod]
    public List<MemberMail> GetMails(Message_Param message)
    {
        List<MemberMail> mailList = new List<MemberMail>();
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@PageIndex", SqlDbType.Int);
            param[0].Value = message.PageIndex;
            param[1] = new SqlParameter("@PageSize", SqlDbType.Int);
            param[1].Value = message.PageSize;
            param[2] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[2].Value = message.Loginid;
            param[3] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[3].Value = message.Regno;
            sdr = objDUT.GetDataReaderSP(param, "SP_MemberMailbox");
            while (sdr.Read())
            {
                MemberMail mail = new MemberMail();
                mail.msgID = Convert.ToInt64(sdr["MsgID"].ToString());
                mail.msgType = sdr["MsgType"].ToString();
                mail.msgSubject = sdr["MsgSubject"].ToString();
                mail.fromRegNo = sdr["LoginID"].ToString();
                mail.toRegNo = sdr["LoginID"].ToString();
                mail.msgDate = sdr["Date"].ToString();
                mail.Message = sdr["Message"].ToString();
                mail.smalltext = sdr["Smalltext"].ToString();
                mail.seen = sdr["msgseen"].ToString();
                mail.Regno = sdr["FromRegNo"].ToString();
                mail.Attachments = sdr["MsgAttachments"].ToString();
                mailList.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return mailList;
    }

    /// <summary>
    /// Pupose : Get all Member_Message
    /// pages : mailbox.aspx
    /// </summary>
    /// <param name="PageIndex">int</param>
    /// <param name="PageSize">int</param>
    /// <returns></returns>
    [WebMethod]
    public List<MemberMail> GetSentMails_Member(Message_Param message)
    {
        List<MemberMail> mailList = new List<MemberMail>();
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@PageIndex", SqlDbType.Int);
            param[0].Value = message.PageIndex;
            param[1] = new SqlParameter("@PageSize", SqlDbType.Int);
            param[1].Value = message.PageSize;
            param[2] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[2].Value = message.Loginid;
            param[3] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[3].Value = message.Regno;
            sdr = objDUT.GetDataReaderSP(param, "SP_SentMemberMailbox");
            while (sdr.Read())
            {
                MemberMail mail = new MemberMail();
                mail.msgID = Convert.ToInt64(sdr["MsgID"].ToString());
                mail.msgType = sdr["MsgType"].ToString();
                mail.msgSubject = sdr["MsgSubject"].ToString();
                mail.fromRegNo = sdr["LoginID"].ToString();
                mail.toRegNo = sdr["LoginID"].ToString();
                mail.msgDate = sdr["Date"].ToString();
                mail.Message = sdr["Message"].ToString();
                mail.smalltext = sdr["Smalltext"].ToString();
                mail.seen = sdr["msgseen"].ToString();
                mail.Regno = sdr["FromRegNo"].ToString();
                mail.Attachments = sdr["MsgAttachments"].ToString();
                mailList.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return mailList;
    }


    [WebMethod]
    public string RemoveMessage(string regnostr, string type)
    {
        string res = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[3];
            param[0] = new SqlParameter("@Regno", SqlDbType.VarChar, 500);
            param[0].Value = regnostr;
            param[1] = new SqlParameter("@type", SqlDbType.VarChar, 100);
            param[1].Value = type;
            param[2] = new SqlParameter("@intresult", SqlDbType.Int);
            param[2].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_MemberMessageRemove");

            if (result > 0)
            {
                res = "true";
            }
            else
            {
                res = "false";
            }
        }
        catch (Exception exce)
        {
            res = "false";
        }
        return res;
    }



    /// <summary>
    ///  Delete sent message from member_mailbox
    /// </summary>
    /// <param name="regnostr"></param>
    /// <param name="type"></param>
    /// <returns></returns>
    [WebMethod]
    public string RemoveSentMessage(string regnostr, string type)
    {
        string res = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[3];
            param[0] = new SqlParameter("@Regno", SqlDbType.VarChar, 500);
            param[0].Value = regnostr;
            param[1] = new SqlParameter("@type", SqlDbType.VarChar, 100);
            param[1].Value = type;
            param[2] = new SqlParameter("@intresult", SqlDbType.Int);
            param[2].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_MemberSentMessageRemove");

            if (result > 0)
            {
                res = "true";
            }
            else
            {
                res = "false";
            }
        }
        catch (Exception exce)
        {
            res = "false";
        }
        return res;
    }

    [WebMethod]
    public List<AchieverList> GetAchieverList(string loginid)
    {
        long regno = objUT.GetRegistrationNo(loginid);
        List<AchieverList> achieverlist = new List<AchieverList>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 10);
        param[0].Value = regno;
        // param[0].Value = 0;
        sdr = objDUT.GetDataReaderSP(param, "sp_Achiverlist");
        while (sdr.Read())
        {
            AchieverList achiever = new AchieverList();
            achiever.regNo = sdr["regno"].ToString();
            achiever.Loginid = sdr["Username"].ToString();
            achiever.fullName = sdr["Name"].ToString();
            achiever.BoardName = sdr["boardName"].ToString();
            achiever.MatureDate = string.Format("{0:dd/MM/yyyy}", sdr["matureDate"]);
            achiever.BoardIncome = sdr["boardIncome"].ToString();
            achieverlist.Add(achiever);
        }
        sdr.Dispose();
        return achieverlist;
    }

    [WebMethod]
    public List<Board> BoardHistory(string regno)
    {

        List<Board> Boardlist = new List<Board>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        sdr = objDUT.GetDataReaderSP(param, "Sp_boardhgistory");
        while (sdr.Read())
        {
            Board board = new Board();
            board.username = sdr["loginid"].ToString();
            board.BoardNo = sdr["boardno"].ToString();
            board.Boardtype = sdr["boardname"].ToString();
            board.PostionInBoard = sdr["bpos"].ToString();
            board.firstPoint = sdr["reflection1"].ToString();
            board.Secpoint = sdr["reflection2"].ToString();
            Boardlist.Add(board);
        }
        sdr.Dispose();
        return Boardlist;
    }

    //*********************  uploaded Date 5th Nov 14 ****************

    [WebMethod(EnableSession = true)]
    public List<AutoShip_Message> AutoSAhipPopup(string regno)
    {

        List<AutoShip_Message> AutoshipMsgList = new List<AutoShip_Message>();
        string Discriptionstatus = Utility.GetAutoshipStatus(Convert.ToInt64(regno), "Balance");

        AutoShip_Message autoshipItem = new AutoShip_Message();
        if (Discriptionstatus == "0")
        {
            autoshipItem.viewstatus = "0";
        }
        else
        {
            autoshipItem.viewstatus = "1";
        }
        double Total_amount = Convert.ToDouble(objDUT.GetScalar("Select isnull(Limits,0) from Settings where sid=31 and Caption='AutoShip'"));
        double Purchase_amount = 0.0;
        try
        {
            Purchase_amount = Convert.ToDouble(objDUT.GetScalar("Select    isnull(Sum(TotalAmount),0) as 'PurchaseAmount'   from product_Order   where Status=1 and PaymentStatus=1 and regno='" + regno + "'    group by regno ,   datepart(mm,orderdate), datepart(yy,orderdate)     having datepart(mm,orderdate) = datepart(mm,getdate()) and datepart(yy,orderdate) =  datepart(yy,getdate())"));
        }
        catch (Exception excep)
        {
            Purchase_amount = 0.0;
        }
        string img = Convert.ToString(objDUT.GetScalar("sELECT ProfileImage   FROM Member_master where regno='" + regno + "'"));
        autoshipItem.MemPic = img;
        autoshipItem.Discription = @"" + Discriptionstatus + "<br/><strong><u>Purchase Amount</u> : " + CurrencySettings._CurrencySymbol() + "&nbsp;" + string.Format("{0:f}", CurrencySettings._ConvertCurrency(Purchase_amount)) + "</strong> <br/><strong><u>Remaining  Amount</u> : " + CurrencySettings._CurrencySymbol() + " &nbsp;" + string.Format("{0:f}", CurrencySettings._ConvertCurrency(Total_amount - Purchase_amount)) + "</strong>  <br/><a href='AutoShipProductList.aspx' style='color:#ccc'>Purchase Product</a>";
        AutoshipMsgList.Add(autoshipItem);
        return AutoshipMsgList;
    }


    [WebMethod]
    public List<Product_Order> ProductOrder(ProductOrder_param orderparam)
    {
        string query = string.Empty;
        string Order_DateFrom = string.Empty;
        string Order_DateTo = string.Empty;
        if (orderparam.orderdate_F == "")
        {
            Order_DateTo = "";
            Order_DateTo = "";
        }
        else
        {
            string[] date = DateFormat(orderparam.orderdate_F);
            Order_DateFrom = date[0];
            Order_DateTo = date[1];
        }
        List<Product_Order> productorderlist = new List<Product_Order>();
        try
        {


            SqlParameter[] param = new SqlParameter[14];
            param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 100);
            param[0].Value = orderparam.regno;
            param[1] = new SqlParameter("@username", SqlDbType.VarChar, 100);
            param[1].Value = orderparam.username;
            param[2] = new SqlParameter("@name", SqlDbType.VarChar, 100);
            param[2].Value = orderparam.name;
            param[3] = new SqlParameter("@orderdate_F", SqlDbType.VarChar, 100);
            param[3].Value = Order_DateFrom;
            param[4] = new SqlParameter("@orderdate_T", SqlDbType.VarChar, 100);
            param[4].Value = Order_DateTo;
            param[5] = new SqlParameter("@orderno", SqlDbType.VarChar, 100);
            param[5].Value = orderparam.orderno;
            param[6] = new SqlParameter("@paymentdate_F", SqlDbType.VarChar, 100);
            param[6].Value = Order_DateFrom;
            param[7] = new SqlParameter("@paymentdate_T", SqlDbType.VarChar, 100);
            param[7].Value = orderparam.paymentdate_T;
            param[8] = new SqlParameter("@paymode", SqlDbType.VarChar, 100);
            param[8].Value = orderparam.paymode;
            param[9] = new SqlParameter("@totalamount_S", SqlDbType.VarChar, 100);
            param[9].Value = orderparam.totalamount_S;
            param[10] = new SqlParameter("@totalamount_E", SqlDbType.VarChar, 100);
            param[10].Value = orderparam.totalamount_E;
            param[11] = new SqlParameter("@paymentstatus", SqlDbType.VarChar, 100);
            param[11].Value = orderparam.paymentstatus;
            param[12] = new SqlParameter("@ordertype", SqlDbType.VarChar, 100);
            param[12].Value = orderparam.ordertype;
            param[13] = new SqlParameter("@orderstatus", SqlDbType.VarChar, 100);
            param[13].Value = orderparam.orderstatus;

            sdr = objDUT.GetDataReaderSP(param, "Sp_MemOrderList");
            while (sdr.Read())
            {
                Product_Order productor = new Product_Order();
                // productor.UserName = sdr["UserName"].ToString();
                //  productor.Name = sdr["Name"].ToString();
                productor.OrderNo = sdr["orderno"].ToString();
                productor.OrderDate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"].ToString());
                productor.paymentdate = string.Format("{0:dd/MM/yyyy}", sdr["paymentDate"].ToString());
                productor.paymentmode = sdr["paymentMode"].ToString();
                productor.totamt = string.Format("{0:f}", Convert.ToDouble(sdr["TotalAmount"].ToString()));
                productor.paymentStatus = sdr["PaymentStatus"].ToString();
                productor.activeclass = sdr["ActiveClass"].ToString();
                productor.productType = sdr["ProductType"].ToString();
                productor.orderstatus = sdr["OrderStatus"].ToString();
                productor.orderactiveclass = sdr["OrdreActiveClass"].ToString();
                productorderlist.Add(productor);
            }


        }
        catch (Exception excep)
        {

        }

        return productorderlist;

    }

    [WebMethod(EnableSession = true)]
    public List<AccountDetails> transferEwallet(tranewallet_param tranparam)
    {
        string msg = string.Empty;
        double amount = 0;
        decimal after_payAmt = 0;
        List<AccountDetails> listAccdt = new List<AccountDetails>();
        AccountDetails accdetails = new AccountDetails();
        int ctr = 0;
        ctr = Convert.ToInt32(objDUT.GetScalar("Select Count(regno) from Member_master where regno='" + tranparam.fromregno + "'"));

        if (Convert.ToInt32(tranparam.fromregno) == Convert.ToInt32(objDUT.GetScalar("Select regno from member_master where loginid='" + tranparam.toregno + "'")))
        {
            accdetails.status = "0";
            listAccdt.Add(accdetails);
            return listAccdt;
        }
        if (ctr == 1)
        {
            try
            {
                amount = Convert.ToDouble(tranparam.amt);
                if (amount <= 0)
                {
                    msg = "Sorry, Enter  Amount Greater than 0. !!";
                    accdetails.status = msg;
                }
                else
                {
                    SqlParameter[] arrParam = new SqlParameter[6];
                    arrParam[0] = new SqlParameter("@from_Regno", SqlDbType.BigInt);
                    arrParam[0].Value = tranparam.fromregno;
                    arrParam[1] = new SqlParameter("@to_Regno", SqlDbType.BigInt);
                    arrParam[1].Value = Convert.ToInt32(objDUT.GetScalar("Select regno from member_master where loginid='" + tranparam.toregno + "'"));
                    arrParam[2] = new SqlParameter("@amount", SqlDbType.Money);
                    arrParam[2].Value = Convert.ToDouble(tranparam.amt) / Convert.ToDouble(HttpContext.Current.Session["CurrencyRate"].ToString());
                    arrParam[3] = new SqlParameter("@ewalletType", SqlDbType.VarChar, 100);
                    arrParam[3].Value = "";
                    arrParam[4] = new SqlParameter("@remark", SqlDbType.VarChar, 1000);
                    arrParam[4].Value = "";

                    arrParam[5] = new SqlParameter("@intResult", SqlDbType.Int);
                    arrParam[5].Direction = ParameterDirection.Output;

                    //************ Save Details in Database
                    int intResult = objDUT.ExecuteSqlSP(arrParam, "[sp_transferewallet]");
                    if (intResult == 1)
                    {
                        //after_payAmt = CurrentBalance.getBalance(Convert.ToInt64(tranparam.fromregno));
                        //accdetails.after_payamt = string.Format("{0:f}", after_payAmt);
                        //accdetails.CurrentBalance = string.Format("{0:f}", after_payAmt);
                        //accdetails.transfer_amt = string.Format("{0:f}", amount / Convert.ToDouble(HttpContext.Current.Session["A_CurrencyRate"].ToString()));
                        //accdetails.Regno = tranparam.fromregno;
                        accdetails.status = "1";
                    }
                    else
                    {
                        msg = "Sorry, Your amount is grater  than current balance. !!";
                        accdetails.status = msg;
                    }
                }
            }
            catch (Exception exce)
            {
                msg = "Sorry, Invalid Amount. !!";
                accdetails.status = msg;
            }

        }
        else
        {
            msg = "Sorry, Wrong Distributor ID. OR User Name !!";
            accdetails.status = msg;
        }
        listAccdt.Add(accdetails);
        return listAccdt;
    }

    [WebMethod]
    public List<Activatondetails> getActivationDetils(string Loginid)
    {
        sdr = null;
        string st = null;
        List<Activatondetails> Requestlist = new List<Activatondetails>();
        try
        {
            st = "select mp.order_no,sponsorname=mms.loginid,m.loginid,memstatus=case when m.confpayno=1 then  'Active' else 'Inactive' end,  doc=convert(NVARCHAR, m.doc, 103),epin.bankname,epin.refno,epin.paymode,Rdate=convert(NVARCHAR, rt.Rdate, 103),k.kitcode,kitprice =cast(k.kitprice as decimal(10,2)),k.kitPv,k.kitbv,k.kitdesc,k.kitproducts,rt.paymentmode,rt.* from member_master m,member_master mms, kit_master k, recharge_transaction rt, epin_request epin,member_product mp where k.kid=rt.Rkid and m.regno=rt.regno and rt.regno=epin.regno and isnull(epin.requesttype,0)=1 and rt.Rkid>1 and m.introregno=mms.regno and mp.regno=m.regno and m.loginid='" + Loginid + "'";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Activatondetails listv = new Activatondetails();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.Loginid = sdr["loginid"].ToString();
                listv.sponsername = sdr["sponsorname"].ToString();
                listv.Active = sdr["memstatus"].ToString();
                listv.invoiceno = Convert.ToInt32(sdr["order_no"].ToString());
                listv.kitcode = sdr["kitcode"].ToString();
                listv.kitPrice = sdr["kitprice"].ToString();
                listv.kitproduct = sdr["kitproducts"].ToString();
                listv.kitPV = sdr["kitpv"].ToString();
                listv.DOA = sdr["doc"].ToString();
                listv.kitDesc = sdr["kitdesc"].ToString();
                listv.MOP = sdr["paymode"].ToString();
                listv.Reqdate = sdr["Rdate"].ToString();
                listv.RefNo = sdr["refno"].ToString();
                listv.BankName = sdr["bankname"].ToString();
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    /// Purpose : this funcation use for show Activation Details1
    /// Pages : ActivationRequest.aspx,
    /// </summary>
    [WebMethod]
    public List<Activatondetails1> getActivationDetils1(string Loginid)
    {
        sdr = null;
        string st = null;
        List<Activatondetails1> Requestlist = new List<Activatondetails1>();
        try
        {
            //  st = "select mp.*,mm.loginid,mm.doc,memstatus=case when mm.confpayno=1 then 'Active' else 'Deactive' end ,rt.paymentmode,rt.rdate,sponsorname=(select loginid from member_master where regno=mm.introregno),km.kitcode,km.kitprice,km.kitpv,km.kitbv from member_product mp,member_master mm,kit_master km,recharge_transaction rt where mp.regno=mm.regno and mp.kid=km.kid and mp.rid=rt.rid and mm.loginid='" + Loginid + "'";
            // st = "select mm.*,memstatus=case when ep.requesttype=0 and ep.reqstatus=0 then 'Inactive' else 'Active' end ,sponsorname=(select loginid from member_master where regno=mm.introregno),km.kitcode,ep.kid from member_master mm,epin_request ep,kit_master km where mm.regno=ep.regno and km.kid=ep.kid and km.kid=1 and km.kittype=0  and ep.reqstatus=0 and ep.requesttype=0 and mm.loginid='"+Loginid+"'";
            st = "select mm.regno,mm.loginid,sponsorname=(select loginid from member_master where regno=mm.introregno),mm.chk_dft_ref_no,memstatus=case when mm.confpayno=1 then 'Confirm' else 'Pending' end,pakagename='KYC',km.kitcode,mm.regdate,km.kitdesc from member_master mm,kit_master km where mm.kid=km.kid and mm.loginid='" + Loginid + "' ";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Activatondetails1 listv = new Activatondetails1();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.Loginid = sdr["loginid"].ToString();
                // listv.fullName = sdr["name"].ToString();
                listv.sponsername = sdr["sponsorname"].ToString();
                listv.kitcode = sdr["kitcode"].ToString();
                listv.Active = sdr["memstatus"].ToString();

                listv.pin = sdr["chk_dft_ref_no"].ToString();
                listv.DOR = string.Format("{0:dd/MM/yyyy}", sdr["regdate"]);
                listv.description = sdr["kitdesc"].ToString();

                // listv.Reqdate = Convert.ToDateTime(sdr["rdate"]).ToString("dd/MM/yyyy");


                Requestlist.Add(listv);
            }
            sdr.Dispose();

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    /// <summary>
    /// Purpose : this funcation use for show Activation Details1
    /// Pages : ActivationRequest.aspx,
    /// </summary>
    [WebMethod]
    public List<Activatondetails2> getActivationDetils2(string Loginid)
    {
        sdr = null;
        string st = null;
        List<Activatondetails2> Requestlist2 = new List<Activatondetails2>();
        try
        {

            //  st = "select mm.regno,mm.loginid,sponsorname=(select loginid from member_master where regno=mm.introregno),mm.chk_dft_ref_no,memstatus=case when mm.confpayno=1 then 'Confirm' else 'Pending' end,pakagename='KYC',km.kitcode,mm.regdate,km.kitdesc from member_master mm,kit_master km where mm.kid=km.kid and mm.loginid='" + Loginid + "' ";
            st = "select m.regno, m.loginid,k.kitcode,k.kitproducts,k.kitdesc,k.kitprice,k.kitpv,er.reqdate,memstatus=case when er.reqstatus=1 then 'Confirm' else 'Pending' end  from epin_request er,kit_master k,member_master m where k.kid=er.kid and m.regno=er.regno and er.reqstatus=0 and er.requesttype=1 and m.loginid='" + Loginid + "' ";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Activatondetails2 listv = new Activatondetails2();
                listv.regno1 = Convert.ToInt32(sdr["regno"].ToString());
                listv.Loginid1 = sdr["loginid"].ToString();
                listv.kitcode1 = sdr["kitcode"].ToString();
                listv.Active1 = sdr["memstatus"].ToString();
                listv.Reqdate1 = string.Format("{0:dd/MM/yyyy}", sdr["reqdate"]);
                listv.kitprice1 = sdr["kitprice"].ToString();
                listv.kitpv1 = sdr["kitpv"].ToString();
                listv.kitproducts1 = sdr["kitproducts"].ToString();
                listv.description1 = sdr["kitdesc"].ToString();
                Requestlist2.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist2;
    }

    [WebMethod]
    public string Ecodevalidornot(string epinnumber, string epincode)
    {
        string status = "false";
        try
        {
            string query = "Select Epincode from Epin_master where Epincode = '" + epincode + "' and epinnumber ='" + epinnumber + "' and  eactive=1 ";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod]
    public string CheckPancard(string username)
    {
        string status = "false";
        try
        {
            if (username != "")
            {
                string query = "Select  count(mempan) from Member_master where mempan='" + username + "'";
                int loginid = Convert.ToInt32(objDUT.GetScalar(query).ToString());
                if (loginid> 3)
                {
                    status = "false";
                }
                else
                {
                    status = "true";
                }
            }
            else
            {
                status = "true";
            }
        }
        catch (Exception excep)
        {
            status = "true";
        }

        return status;
    }

    [WebMethod]
    public List<Questions> GetQuestionList(int QID)
    {
        sdr = null;
        string Query = null;
        List<Questions> questionlist = new List<Questions>();
        if (QID <= 0)
        {
            Query = "Select * from Security_Question Where Qactive=1";
        }
        else
        {
            Query = "select qid,question from Security_Question Where qid='" + QID + "' Qactive=1";
        }

        sdr = objDUT.GetDataReader(Query);
        while (sdr.Read())
        {
            Questions QItem = new Questions();
            QItem.qid = Convert.ToInt32(sdr["qid"].ToString());
            QItem.question = sdr["question"].ToString();

            questionlist.Add(QItem);
        }
        return questionlist;
    }
    [WebMethod]
    public List<PayoutDeatils> getPayoutIncomeMWise_weekly(string payid)
    {
        sdr = null;
        int p = Convert.ToInt32(objDUT.GetScalar("select isnull(max(sPayID),0)  from payout_settlement").ToString());
        List<PayoutDeatils> PayoutList = new List<PayoutDeatils>();

        DataTable dsde = new DataTable();
        DataTable dtC = new DataTable();
        dtC.Columns.Add(new DataColumn("regno", typeof(string)));
        dtC.Columns.Add(new DataColumn("payid", typeof(string)));
        dtC.Columns.Add(new DataColumn("fullName", typeof(string)));
        dtC.Columns.Add(new DataColumn("Loginid", typeof(string)));
        dtC.Columns.Add(new DataColumn("llpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("rpv", typeof(string)));

        dtC.Columns.Add(new DataColumn("CFlpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("CFRpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("paidpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("PVIncome", typeof(string)));
        dtC.Columns.Add(new DataColumn("singleLegIncome", typeof(string)));
        dtC.Columns.Add(new DataColumn("singlelegDed", typeof(string)));
        dtC.Columns.Add(new DataColumn("totalincome", typeof(string)));

        for (int i = p; i >= 1; i--)
        {
            sdr = null;
            int pFrom = Convert.ToInt32(objDUT.GetScalar("select sPayFromPayid  from payout_settlement where sPayID=" + i + "").ToString());
            int pTo = Convert.ToInt32(objDUT.GetScalar("select sPayToPayid  from payout_settlement where sPayID=" + i + "").ToString());
            string st = null;



            if (payid != "")
            {
                st = "select mp.regno, llpv=isnull(sum(mp.lpv),0), rpv=isnull(sum(mp.rpv),0), paidpv=isnull(sum(mp.paidpv),0), pvincome=isnull(sum(mp.PVIncome),0), singleLegIncome=isnull(sum(mp.singleLegIncome),0), singleLegdeduction=isnull(sum(mp.singleLegdeduction),0),LevelIncome=isnull(sum(mp.levelIncome),0), totalincome=(isnull(sum(mp.totalincome),0)-isnull(sum(mp.singleLegdeduction),0)) from MEMBER_PAYOUT mp, member_master mm where mp.regno=mm.regno and mm.loginid='" + payid + "' and mp.payid>='" + pFrom + "' and mp.payid<='" + pTo + "' group by mp.regno having sum(mp.totalIncome)>0 order by mp.regno";

            }
            DataTable dt = objDUT.GetDataTable(st);


            DataRow drC = dtC.NewRow();
            foreach (DataRow row in dt.Rows)
            {


                drC[0] = Convert.ToInt32(row["regno"].ToString());
                //   Payout.payid 
                drC[1] = objDUT.GetScalar("select (cast(spayid as varchar)+'->'+cast(convert(date,spaydate,103) as varchar))  from payout_settlement where spayid=" + i + "").ToString(); //row["payid"].ToString();

                DataTable dtDetails = objDUT.GetDataTable("select (title+' '+fname+' '+isnull(lname,'')) as 'fullName', loginid from member_master where regno=" + row["regNo"] + "");

                // 
                drC[2] = dtDetails.Rows[0]["fullname"].ToString();
                // 
                drC[3] = dtDetails.Rows[0]["loginid"].ToString();

                // 
                drC[4] = string.Format("{0:f}", row["llpv"]);
                // 
                drC[5] = string.Format("{0:f}", string.Format("{0:f}", row["rpv"]));

                // double cflpv =
                drC[6] = string.Format("{0:f}", Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + row["regno"])));
                //  double cfrpv = 
                drC[7] = string.Format("{0:f}", Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + row["regno"])));
                //  = string.Format("{0:f}", cflpv);
                //Payout.CFRpv = string.Format("{0:f}", cfrpv);

                //   
                drC[8] = string.Format("{0:f}", row["paidpv"]);
                //   
                drC[9] = string.Format("{0:f}", row["PVIncome"]);

                //  
                drC[10] = string.Format("{0:f}", row["singleLegIncome"]);
                //  = 
                drC[11] = string.Format("{0:f}", row["singleLegdeduction"]);
                //  = 
                drC[12] = string.Format("{0:f}", row["totalincome"]);


                dtDetails.Dispose();
            }
            if (dt.Rows.Count > 0)
            {
                dtC.Rows.Add(drC);
            }



        }

        foreach (DataRow rows in dtC.Rows)
        {
            PayoutDeatils Payout = new PayoutDeatils();
            Payout.regno = Convert.ToInt32(rows["regno"].ToString());
            Payout.payid = rows["payid"].ToString();
            Payout.fullName = rows["fullName"].ToString();
            Payout.Loginid = rows["Loginid"].ToString();
            Payout.llpv = rows["llpv"].ToString();
            Payout.rpv = rows["rpv"].ToString();
            Payout.CFlpv = rows["CFlpv"].ToString();
            Payout.CFRpv = rows["CFRpv"].ToString();
            Payout.paidpv = rows["paidpv"].ToString();
            Payout.PVIncome = rows["PVIncome"].ToString();
            Payout.singleLegIncome = rows["singleLegIncome"].ToString();
            Payout.singlelegDed = rows["singlelegDed"].ToString();
            Payout.totalincome = rows["totalincome"].ToString();
            PayoutList.Add(Payout);
        }
        return PayoutList;
    }


   
    [WebMethod(EnableSession = true)]
    public string GetPassword(string loginid, string Mtype)
    {
        string CompanyName = "", u = "", p = "", host = "", comlogo = "", BodyMessage = "", Subject = "", Headermessage = "";
        string result = "";
        CompanySettings comSettings;
        SendMail objSent = new SendMail();       
        comSettings = Session["CompanySettings"] as CompanySettings;
        DataTable dtComailsetting = new DataTable();
        dtComailsetting = objDUT.GetDataTable("select * from company_mail_settings where caption='Forget Password' and active=1");
        if (dtComailsetting.Rows.Count > 0)
        {
            CompanyName = comSettings.CompanyName;
            u = dtComailsetting.Rows[0]["SenderEmailID"].ToString();
            p = dtComailsetting.Rows[0]["SenderPassword"].ToString();
            comlogo = comSettings.Company_Logo;
            host = dtComailsetting.Rows[0]["Sender_SMTP"].ToString();
            BodyMessage = dtComailsetting.Rows[0]["Body_Message"].ToString();
            Subject = dtComailsetting.Rows[0]["Subject"].ToString();
            Headermessage = dtComailsetting.Rows[0]["Header_message"].ToString();
        }
        else
        {
            u = comSettings.Sender_Email;
            p = comSettings.Sender_Email_Password;
            host = comSettings.Sender_Email_SMTP;
            comlogo = comSettings.Company_Logo;
            CompanyName = comSettings.CompanyName;
        }
        SqlParameter[] param = new SqlParameter[3];
        param[0] = new SqlParameter("@username", SqlDbType.VarChar, 200);
        param[0].Value = loginid.Trim();

        //param[1] = new SqlParameter("@Mtype", SqlDbType.VarChar, 100);
        //param[1].Value = Mtype;
        param[1] = new SqlParameter("@type", SqlDbType.VarChar, 100);
        param[1].Value = "RequestforPassword";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int);
        param[2].Direction = ParameterDirection.Output;
        int res = objDUT.ExecuteSqlSP(param, "SP_forget_mail");
        if (res == 0)
        {
            result = "0";
        }
        if (res == 1)
        {
            if (Mtype != "Merchant")
            {

                string name, password, emailid;
                DataTable dt = objDUT.GetDataTable("select isnull(mm.title,'')+' '+fname+' '+ isnull(mm.lname,'') as name,mm.emailid,ml.password from member_master mm inner join member_login ml on ml.regno=mm.regno where (mm.loginid='" + loginid + "' OR mm.emailid='" + loginid + "')");
                if (dt.Rows.Count > 0)
                {
                    name = dt.Rows[0]["name"].ToString();
                    password = dt.Rows[0]["Password"].ToString();
                    emailid = dt.Rows[0]["emailid"].ToString();
                    result = "1";
                    SendMail.EmailForget(emailid, "", name, loginid, password, "", u, p, host, comlogo, CompanyName, BodyMessage, Subject, Headermessage);
                }
            }
            else
            {
                string name, password, emailid;
                DataTable dt = objDUT.GetDataTable("select mm.name as name,mm.loginid,mm.pass from merchant_master mm where mm.loginid='" + loginid + "'");
                if (dt.Rows.Count > 0)
                {
                    name = dt.Rows[0]["name"].ToString();
                    password = dt.Rows[0]["pass"].ToString();
                    emailid = dt.Rows[0]["loginid"].ToString();
                    result = "1";
                    //SendMail.Email(emailid, "", name, loginid, password, "");
                }
            }


        }
        if (res == 3)
        {
            result = "3";
        }
        return result;
    }
    //[WebMethod]
    //public string GetPassword(string loginid, string Mtype)
    //{
    //    string result = "";
    //    SqlParameter[] param = new SqlParameter[4];
    //    param[0] = new SqlParameter("@username", SqlDbType.VarChar, 200);
    //    param[0].Value = loginid.Trim();

    //    param[1] = new SqlParameter("@Mtype", SqlDbType.VarChar, 100);
    //    param[1].Value = Mtype;
    //    param[2] = new SqlParameter("@type", SqlDbType.VarChar, 100);
    //    param[2].Value = "RequestforPassword";
    //    param[3] = new SqlParameter("@intResult", SqlDbType.Int);
    //    param[3].Direction = ParameterDirection.Output;
    //    int res = objDUT.ExecuteSqlSP(param, "SP_forget_mail");
    //    if (res == 0)
    //    {
    //        result = "0";
    //    }
    //    if (res == 1)
    //    {
    //        if (Mtype != "Merchant")
    //        {

    //            string name, password, emailid;
    //            DataTable dt = objDUT.GetDataTable("select isnull(mm.title,'')+' '+fname+' '+ isnull(mm.lname,'') as name,mm.emailid,ml.password from member_master mm inner join member_login ml on ml.regno=mm.regno where (mm.loginid='" + loginid + "' OR mm.emailid='" + loginid + "')");
    //            if (dt.Rows.Count > 0)
    //            {
    //                name = dt.Rows[0]["name"].ToString();
    //                password = dt.Rows[0]["Password"].ToString();
    //                emailid = dt.Rows[0]["emailid"].ToString();
    //                result = "1";
    //                SendMail.Email(emailid, "", name, loginid, password, "");
    //            }
    //        }
    //        else
    //        {
    //            string name, password, emailid;
    //            DataTable dt = objDUT.GetDataTable("select mm.name as name,mm.loginid,mm.pass from merchant_master mm where mm.loginid='" + loginid + "'");
    //            if (dt.Rows.Count > 0)
    //            {
    //                name = dt.Rows[0]["name"].ToString();
    //                password = dt.Rows[0]["pass"].ToString();
    //                emailid = dt.Rows[0]["loginid"].ToString();
    //                result = "1";
    //                SendMail.Email(emailid, "", name, loginid, password, "");
    //            }
    //        }


    //    }
    //    if (res == 3)
    //    {
    //        result = "3";
    //    }
    //    return result;
    //}

    /// <summary>
    /// Purpose : this function use for view merchant Profile  or Edit
    /// Pages : ProfileEdit.aspx
    /// </summary>
    /// <param name="Username">String</param>
    /// <returns>List Type Merchant_Details </returns>
    [WebMethod]
    public List<Merchant_Details> ViewProfile_Merchant(string MerchantId)
    {
        List<Merchant_Details> viewprofile = new List<Merchant_Details>();
        Merchant_Details memberpro = new Merchant_Details();
        sdr = null;
        if (Convert.ToInt32(MerchantId) <= 0)
        {
            memberpro.ResultStatus = 2; // Null Username
        }
        else
        {
            try
            {
                long ctr = Convert.ToInt64(objDUT.GetScalar("Select Count(mid) from Merchant_master where mid='" + MerchantId + "'"));
                if (ctr > 0)
                {
                    long active = Convert.ToInt64(objDUT.GetScalar("Select  isnull(active,0) from Merchant_master where mid='" + MerchantId + "'"));
                    if (active > 0)
                    {
                        try
                        {
                            SqlParameter[] param = new SqlParameter[1];
                            param[0] = new SqlParameter("@mid", SqlDbType.Int);
                            param[0].Value = Convert.ToInt32(MerchantId);
                            DataTable tb = objDUT.GetDataTableSP(param, "sp_GetMerchantDetails");
                            if (tb.Rows.Count > 0)
                            {
                                memberpro.mid = Convert.ToInt32(tb.Rows[0]["mid"].ToString());
                                memberpro.name = tb.Rows[0]["name"].ToString();
                                memberpro.emailid = tb.Rows[0]["emailid"].ToString();
                                memberpro.BusinessName = tb.Rows[0]["business"].ToString();
                                memberpro.active = Convert.ToInt32(tb.Rows[0]["active"].ToString());
                                memberpro.City = tb.Rows[0]["City"].ToString();
                                memberpro.Country = tb.Rows[0]["Country"].ToString();
                                memberpro.Comment = tb.Rows[0]["Comment"].ToString();
                                memberpro.Activation_date = tb.Rows[0]["keywords"].ToString();
                                memberpro.companyname = tb.Rows[0]["company_name"].ToString();
                                memberpro.State = tb.Rows[0]["State"].ToString();
                                memberpro.Address = tb.Rows[0]["Address"].ToString();
                                memberpro.Loginid = tb.Rows[0]["loginid"].ToString();
                                memberpro.Pincode = tb.Rows[0]["pincode"].ToString();
                                memberpro.status = tb.Rows[0]["Blockstatus"].ToString();
                                memberpro.mobile = tb.Rows[0]["mobile"].ToString();
                                memberpro.CashBackdiscount = Convert.ToDecimal(tb.Rows[0]["cashback_discount"].ToString());
                                memberpro.Rewardpoints = Convert.ToDecimal(tb.Rows[0]["rewrd_points"].ToString());
                                memberpro.ResultStatus = 6;
                                viewprofile.Add(memberpro);
                            }
                            else
                            {
                                memberpro.mid = 0;
                                memberpro.name = "";
                                memberpro.emailid = "";
                                memberpro.BusinessName = "";
                                memberpro.active = 0;
                                memberpro.City = "";
                                memberpro.Country = "";
                                memberpro.State = "";
                                memberpro.status = "";
                                memberpro.mobile = "";
                                memberpro.CashBackdiscount = 0;
                                memberpro.Rewardpoints = 0;
                                memberpro.ResultStatus = 1;
                            }

                        }
                        catch (Exception excep)
                        {
                        }
                    }
                    else
                    {
                        memberpro.ResultStatus = 5;  // Member Deactive
                    }
                }
                else
                {
                    memberpro.ResultStatus = 4;  // Invalid Username
                }
            }
            catch (Exception Excep)
            {
                memberpro.ResultStatus = 3;  // Invalid Username
            }
        }
        return viewprofile;
    }
    /// <summary>
    /// this method is created for updateing merchant profile
    /// date:27 july 2015
    /// </summary>
    /// <param name="mid"></param>
    /// <param name="Merchant_Id"></param>
    /// <param name="Merchant_Name"></param>
    /// <param name="Mobile"></param>
    /// <param name="Comment"></param>
    /// <param name="Email"></param>
    /// <param name="Address"></param>
    /// <param name="Country"></param>
    /// <param name="City"></param>
    /// <param name="State"></param>
    /// <param name="Businessname"></param>
    /// <param name="Pincode"></param>
    /// <param name="Cashback"></param>
    /// <param name="Loginid"></param>
    /// <param name="Reward_points"></param>
    /// <returns> int </returns>
    [WebMethod]
    public int UpdateMerchantProfile(string mid, string Merchant_Id, string Merchant_Name, string Mobile, string Comment, string keywords, string Email, string Address, string Country, string City, string State, string Businessname, string Pincode, string Cashback, string Loginid, string Reward_points)
    {
        int ResultStatus = 0;
        //try
        //{
        int merchantid = Convert.ToInt32(objDUT.GetScalar("Select mid from Merchant_master where mid='" + Convert.ToInt32(mid) + "'"));
        if (merchantid != 0)
        {
            SqlParameter[] param = new SqlParameter[19];
            param[0] = new SqlParameter("@mid", SqlDbType.BigInt);
            param[0].Value = mid;
            param[1] = new SqlParameter("@merchantid", SqlDbType.VarChar, 100);
            param[1].Value = Merchant_Id;
            param[2] = new SqlParameter("@businessname", SqlDbType.VarChar, 100);
            param[2].Value = Businessname;
            param[3] = new SqlParameter("@cashbackdiscount", SqlDbType.Money);
            param[3].Value = Convert.ToDouble(Cashback);
            param[4] = new SqlParameter("@rewardpoints", SqlDbType.Money);
            param[4].Value = Convert.ToDouble(Reward_points);
            param[5] = new SqlParameter("@name", SqlDbType.VarChar, 100);
            param[5].Value = Merchant_Name;
            param[6] = new SqlParameter("@address", SqlDbType.VarChar, 100);
            param[6].Value = Address;
            param[7] = new SqlParameter("@country", SqlDbType.VarChar, 100);
            param[7].Value = Country;
            param[8] = new SqlParameter("@state1", SqlDbType.VarChar, 100);
            param[8].Value = State;
            param[9] = new SqlParameter("@city", SqlDbType.VarChar, 100);
            param[9].Value = City;
            param[10] = new SqlParameter("@pincode", SqlDbType.VarChar, 100);
            param[10].Value = Pincode;
            param[11] = new SqlParameter("@emailid", SqlDbType.VarChar, 100);
            param[11].Value = Email;
            param[12] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
            param[12].Value = Mobile;
            param[13] = new SqlParameter("@coment", SqlDbType.VarChar, 100);
            param[13].Value = Comment;
            param[14] = new SqlParameter("@keywords", SqlDbType.VarChar, 1000);
            param[14].Value = keywords;
            param[15] = new SqlParameter("@pass", SqlDbType.VarChar, 50);
            param[15].Value = "";
            param[16] = new SqlParameter("@active", SqlDbType.Int);
            param[16].Value = 1;
            param[17] = new SqlParameter("@querytype", SqlDbType.VarChar, 100);
            param[17].Value = "Update";
            param[18] = new SqlParameter("@intResult", SqlDbType.Int);
            param[18].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_InsertUpdate_Merchant");
            if (result > 0)
            {
                ResultStatus = 1;
            }
            else
            {
                ResultStatus = 0;
            }
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }
    [WebMethod]
    public int UpdateCustomerOrder(string MID, string ideacardno, string purchaseamt, string msp, string redeem, string payment, string balance, string invoice)
    {
        int ResultStatus = 0;
        //try
        //{
        int merchantid = Convert.ToInt32(objDUT.GetScalar("Select Count(mid) from Merchant_master where mid='" + Convert.ToInt32(MID) + "'"));
        if (merchantid != 0)
        {
            SqlParameter[] param = new SqlParameter[9];
            param[0] = new SqlParameter("@merchantID", SqlDbType.BigInt);
            param[0].Value = MID;
            param[1] = new SqlParameter("@ideacardNo", SqlDbType.VarChar, 100);
            param[1].Value = ideacardno;
            param[2] = new SqlParameter("@totalamount", SqlDbType.VarChar, 100);
            param[2].Value = purchaseamt;
            param[3] = new SqlParameter("@MSP", SqlDbType.Money);
            param[3].Value = Convert.ToDouble(msp);
            param[4] = new SqlParameter("@redeem", SqlDbType.Money);
            param[4].Value = Convert.ToDouble(redeem);
            param[5] = new SqlParameter("@paymnetmode", SqlDbType.VarChar, 100);
            param[5].Value = payment;
            param[6] = new SqlParameter("@balance", SqlDbType.VarChar, 100);
            param[6].Value = balance;
            param[7] = new SqlParameter("@invoiceno", SqlDbType.VarChar, 100);
            param[7].Value = invoice;
            param[8] = new SqlParameter("@intResult", SqlDbType.Int);
            param[8].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_UpdateCustomerOrder");
            if (result > 0)
            {
                ResultStatus = 1;
            }
            else
            {
                ResultStatus = 0;
            }
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }



    [WebMethod]
    public int checkLoginid(string loginid)
    {
        sdr = null;
        string Query = null;
        int avaliable = 0;
        if (loginid != "")
        {
            Query = "Select 1 from  merchant_master where loginid='" + loginid + "'";
            avaliable = Convert.ToInt32(objDUT.GetScalar(Query));
            if (avaliable == 1)
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        else
        {
            return 2;
        }
    }



    [WebMethod]
    public List<YearAndMonth> getCutoffMonth(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select payid,FORMAT(dateadd(m,-1,payto), 'dd-MMMM') as date from Payout where payid >=1";
            if (YearString != "0")
            {
                StrQuery = StrQuery + " and DATEPART(YYYY,payto)='" + YearString + "' ";
            }
            StrQuery = StrQuery + "Order by payid";
            sdr = objDUT.GetDataReader(StrQuery);
            while (sdr.Read())
            {
                YearAndMonth listv = new YearAndMonth();
                listv.Year = sdr["payid"].ToString();
                listv.MonthID = sdr["payid"].ToString();
                YearMonthlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getMywalletRewardSummary(string loginid)
    {
        sdr = null;
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            ProductOrderToday listv = new ProductOrderToday();
            listv.Icon = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(worthvalue),0) from  gift_coupon where isactive=1 and redeemBy='" + loginid + "'"));
            listv.LRP = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as W5GP  from  member_account where transtype='MBP' and regno=" + loginid + " and trstatus=1 and isnull(wallettype,'RP')='RP'"));
            listv.GBP = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as W5GP  from  member_account where transtype='5GPINCOME' and regno= " + loginid + " and trstatus=1 and isnull(wallettype,'RP')='RP'"));
            listv.CashBack = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as cashback  from  member_account where transtype='CASHBACK' and regno= " + loginid + " and trstatus=1  and isnull(wallettype,'RP')='RP'"));
            listv.TotavWallet = string.Format("{0:f}", objDUT.GetScalar("select  (isnull(sum(credit),0.00)-isnull(sum(debit),0.00)) as Totalwallet  from  member_account where regno=  " + loginid + " and trstatus=1  and isnull(wallettype,'RP')='RP'"));
            listv.orderno = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as W5GP  from  member_account where transtype='levelIncomeStar' and regno=" + loginid + " and trstatus=1  and isnull(wallettype,'RP')='RP'"));
            listv.gp1 = string.Format("{0:f}", objDUT.GetScalar("select isnull(limits,0) from master_settings where caption='PromoterFee'  and active=1"));
            listv.gp2 = string.Format("{0:f}", objDUT.GetScalar("select isnull(paidpromoterfee,'0.00') from  member_master where regno='" + loginid + "'"));

            listv.gp3 = objDUT.GetScalar("select  max(loginid) as starid  from member_cycle_master where regno='" + loginid + "'").ToString();
            listv.gp4 = objDUT.GetScalar("select  isnull(paidpromoterfee,0.00) as paidpromoterfee  from member_master where regno='" + loginid + "'").ToString();
            listv.gp5 = objDUT.GetScalar("select  isnull(targetpromoterfee,0.00) as targetpromoterfee  from member_master where regno='" + loginid + "'").ToString();

            Requestlist.Add(listv);
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public List<ProductOrderToday> getGreditRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 4 isnull( credit ,0.00) as credit, transDate, substring(remark,1,10) as remark, remark as remarks  from  member_account where   regno=" + loginid + " and trstatus=1 and credit>0 and isnull(wallettype,'RP')='RP' order by acid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["credit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["transDate"]);
                listv.orderdate = sdr["remark"].ToString();
                listv.Username = sdr["remarks"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getDebitRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5  isnull(debit ,0.00) as debit, transDate,substring(remark,1,10) as remark, remark as remarks   from  member_account where   regno=" + loginid + " and trstatus=1 and debit>0 and isnull(wallettype,'RP')='RP' order by acid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["debit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["transDate"]);
                listv.orderdate = sdr["remark"].ToString();
                listv.Username = sdr["remarks"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }




    [WebMethod]
    public List<ProductOrderToday> getCAHSBACKRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5 mpoid,  isnull( CASHBACK ,0.00) as credit, invno,cast(isnull( invdate,'1990-01-01') as date) invdate from Product_order where regno=" + loginid + " and  status=1 and  invno is not null order by mpoid desc ";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["credit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["invdate"]);
                listv.Invoice = sdr["invno"].ToString();
                listv.mpoid = Convert.ToInt32(sdr["mpoid"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod(EnableSession=true)]
    public List<payoutdetails> getStatement(string regno, string fromdate, string todate, string transtype, string transaction, string wallettype)
    {
        if( regno == "")
        {
             regno = Session["MaxReg"].ToString();
        }
       
        sdr = null;
        string st = null;
        List<payoutdetails> Requestlist  = new List<payoutdetails>();
        try
        {
            if (regno != "" && transtype == "undefined")
            {
                st = "select regno,  convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5) ";
            }
            else if (regno != "" && transtype != "undefined")
            {
                if (regno != "" && transtype == "CASHBACK" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transtype + "'  and trstatus not in(3,5)";

                } if (regno != "" && transtype == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0   and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0  and trstatus not in(3,5)";
                }

                if (regno != "" && transtype == "" && transaction != "-1" && transaction != "c" && transaction != "d" && transaction != "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transaction + "' and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction == "-1" && wallettype != "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5)";
                }

            }


            //else
            //{
            //    st = "select regno,transdate,remark,debit,credit from member_account";
            //}


            //if (wallettype != "-1")
            //{
            //    st += " and  isnull(wallettype,'RP')='" + wallettype + "' ";
            //}
            st += " and  wallettype =1  ";
            //}
            if (transaction != "-1")
            {
                st += " and  transType ='" + transaction + "' ";
            }
            if (fromdate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime) >='" + dateformat(fromdate) + "'";
            }
            if (todate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime) <='" + dateformat(todate) + "'";
            }
            st += " order by acid desc";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                payoutdetails listv = new payoutdetails();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.name = sdr["remark"].ToString();
                listv.batchconfdate = sdr["transdate"].ToString();
                listv.netpayable = string.Format("{0:f}", sdr["debit"]);
                listv.totalamont = string.Format("{0:f}", sdr["credit"]);
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {
        }
        return Requestlist;
    }

    [WebMethod]
    public int MemberRequestEvoucher(Request_Param request)
    {
        int res = 0;
        SqlParameter[] arrParam = new SqlParameter[18];
        arrParam[0] = new SqlParameter("@RefRegNo", SqlDbType.BigInt, 8);
        arrParam[0].Value = request.RefRegNo;
        arrParam[1] = new SqlParameter("@kid", SqlDbType.Int, 8);
        arrParam[1].Value = request.kid;
        arrParam[2] = new SqlParameter("@SEQty", SqlDbType.Int, 8);
        arrParam[2].Value = request.SEQty;
        arrParam[3] = new SqlParameter("@amount", SqlDbType.Decimal, 8);
        arrParam[3].Value = Convert.ToDecimal(request.netAmount);
        arrParam[4] = new SqlParameter("@paymode", SqlDbType.VarChar, 50);
        arrParam[4].Value = request.paymode;
        arrParam[5] = new SqlParameter("@paydate", SqlDbType.DateTime, 8);
        arrParam[5].Value = DateTime.Today.ToString("MM/dd/yyyy");
        arrParam[6] = new SqlParameter("@refNo", SqlDbType.VarChar, 50);
        arrParam[6].Value = request.refNo;
        arrParam[7] = new SqlParameter("@bankName", SqlDbType.VarChar, 50);
        arrParam[7].Value = request.bankName;
        arrParam[8] = new SqlParameter("@bankBranch", SqlDbType.VarChar, 50);
        arrParam[8].Value = "";
        arrParam[9] = new SqlParameter("@Country", SqlDbType.VarChar, 50);
        arrParam[9].Value = "";
        arrParam[10] = new SqlParameter("@comment", SqlDbType.VarChar, 50);
        arrParam[10].Value = request.comment;

        arrParam[11] = new SqlParameter("@vatRate", SqlDbType.Money);
        arrParam[11].Value = Convert.ToDecimal(request.vatRates);
        arrParam[12] = new SqlParameter("@vatAmt", SqlDbType.Money);
        arrParam[12].Value = Convert.ToDecimal(request.vatAmount);
        arrParam[13] = new SqlParameter("@shipRate", SqlDbType.Money);
        arrParam[13].Value = Convert.ToDecimal(request.shipingRate);
        arrParam[14] = new SqlParameter("@shipAmt", SqlDbType.Money);
        arrParam[14].Value = Convert.ToDecimal(request.shipAmount);
        arrParam[15] = new SqlParameter("@linkTo", SqlDbType.VarChar, 50);
        arrParam[15].Value = Convert.ToInt64(request.RLinkTo);
        arrParam[16] = new SqlParameter("@ShipRateType", SqlDbType.VarChar, 50);
        arrParam[16].Value = request.shiprateType;
        arrParam[17] = new SqlParameter("@intResult", SqlDbType.Int);
        arrParam[17].Direction = ParameterDirection.Output;
        int result = objDUT.ExecuteSqlSP(arrParam, "SP_MemberRequestCard");

        return result;
    }


    [WebMethod]
    public List<ProductOrderToday> geLoyileltySoping(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 4 po.OrderNo,po.TotalAmount,po.totalbv,states=case po.Status when '1' then 'Active' else 'Pending' end from   product_order_details pod   join product_order po on po.MPOID=pod.MPOID where po.regNo='" + loginid + "' order by po.MPOID desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.POrder = sdr["OrderNo"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["TotalAmount"]);
                //listv.LRP = string.Format("{0:f}", sdr["states"]);
                listv.CashBack = string.Format("{0:f}", sdr["totalbv"]);
                listv.states = sdr["states"].ToString();
                Requestlist.Add(listv);

            }






        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> geVoucherSoping(string loginid)
    {
        sdr = null;
        string st = null;
        //st = "select top 4 pimage=(select top 1 pm.imgurl from productimage_master pm where pm.pid=p.Pid),p.mrp,p.dp,p.bv from product_master p join product_order_details pod on pod.ProductID=p.pid join product_order po on po.MPOID=pod.MPOID where po.regNo='" + loginid + "' and po.Status=1 order by po.MPOID desc";
        st = "select top 4 pimage=(select top 1 pm.imgurl from productimage_master pm where pm.pid=p.Pid),p.mrp,p.dp,p.bv from product_master p where p.pactive=1 and pid<4 order by p.pid";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.Icon = sdr["pimage"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["mrp"]);
                listv.LRP = string.Format("{0:f}", sdr["bv"]);

                listv.CashBack = string.Format("{0:f}", sdr["dp"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public List<ProductOrderToday> getPromterPool(string loginid)
    {
        sdr = null;
        string st = null;
        string sp = "sp_getpromotorpool";

        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {

            SqlParameter[] Param = new SqlParameter[1];
            Param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            Param[0].Value = loginid;
            DataTable dt = objDUT.GetDataTableSP(Param, sp);
            if (dt.Rows.Count > 0)
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.Invoice = dt.Rows[0]["livecount"].ToString();
                listv.GBP = string.Format("{0:f}", dt.Rows[0]["livepprp"]);
                listv.CashBack = string.Format("{0:f}", dt.Rows[0]["metredpprp"]);
                listv.orderno = dt.Rows[0]["meturedcount"].ToString();

                Requestlist.Add(listv);
            }


        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public List<ProductOrderToday> getmerchanlastpurchase(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5 orderno,totalamount,totalbv,lrp,cashback from product_order_today where status=1 and brid=" + loginid + " order by mpoid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["totalamount"]);
                listv.LRP = string.Format("{0:f}", sdr["lrp"]);
                listv.orderno = sdr["orderno"].ToString();
                listv.Icon = string.Format("{0:f}", sdr["totalbv"]).ToString();
                listv.CashBack = string.Format("{0:f}", sdr["cashback"]);
                Requestlist.Add(listv);

            }






        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public List<ProductOrderToday> get5generation(string loginid)
    {
        sdr = null;
        string st = null;


        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {




            string sp = "Sp_5generationincome";
            SqlParameter[] Param = new SqlParameter[1];
            Param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            Param[0].Value = loginid;
            DataTable dt = objDUT.GetDataTableSP(Param, sp);
            if (dt.Rows.Count > 0)
            {
                ProductOrderToday listv = new ProductOrderToday();

                listv.gp1 = string.Format("{0:f}", dt.Rows[0]["gp1"]);
                listv.gp2 = string.Format("{0:f}", dt.Rows[0]["gp2"]);
                listv.gp3 = string.Format("{0:f}", dt.Rows[0]["gp3"]);
                listv.gp4 = string.Format("{0:f}", dt.Rows[0]["gp4"]);
                listv.gp5 = string.Format("{0:f}", dt.Rows[0]["gp5"]);
                listv.Totavgp5 = string.Format("{0:f}", dt.Rows[0]["totalgp"]);
                listv.ppm1 = string.Format("{0:f}", dt.Rows[0]["ppm1"]);
                listv.ppm2 = string.Format("{0:f}", dt.Rows[0]["ppm2"]);
                listv.ppm3 = string.Format("{0:f}", dt.Rows[0]["ppm3"]);
                listv.ppm4 = string.Format("{0:f}", dt.Rows[0]["ppm4"]);
                listv.ppm5 = string.Format("{0:f}", dt.Rows[0]["ppm5"]);
                listv.totppms = string.Format("{0:f}", dt.Rows[0]["totalppm"]);




                Requestlist.Add(listv);
            }






        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<dispatchmode> Gettransaction(int did)
    {
        string query = string.Empty;
        List<dispatchmode> dmodeList = new List<dispatchmode>();
        try
        {
            query = "select incomeclub,transtype from IncomeClub where isactive=1 ";

            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                dispatchmode kit = new dispatchmode();
                kit.dActive = sdr["transtype"].ToString();
                kit.dmode = sdr["incomeclub"].ToString();
                dmodeList.Add(kit);
            }
        }
        catch (Exception ex)
        {
        }
        return dmodeList;
    }
    [WebMethod]
    public List<ProductOrderToday> getRpWalletRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 4 isnull( credit ,0.00) as credit,isnull( debit ,0.00) as debit, transDate, substring(remark,1,10) as remark, remark as remarks  from  member_account where  regno=" + loginid + " and trstatus=1 and isnull(wallettype,'RP')='PP'";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["credit"]);
                listv.gp1 = string.Format("{0:f}", sdr["debit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["transDate"]);
                listv.orderdate = sdr["remark"].ToString();
                listv.Username = sdr["remarks"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getpoolunitRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5 mcm.starid,totalstar=0,mcm.regno,mcm.loginid,mcm.entrydate,pprp=(select isnull(sum(credit),0) from member_account where wallettype='RP' and regno=mcm.regno and starid=mcm.starid) from member_cycle_master mcm where mcm.regno=" + loginid + " order by starid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["pprp"]);
                listv.Paydate = sdr["loginid"].ToString();
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["entrydate"]);
                listv.gp1 = sdr["totalstar"].ToString();

                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> GetGiftCoupan(string regno)
    {
        sdr = null;
        string st = null;
        st = "select gcid,couponno,worthvalue,create_date,tt_date,sendto=(select emailid from member_master where regno=gc.transfer_to),redeemby=(select randomid from member_master where regno=gc.redeemBy),redeem_date from gift_Coupon gc where gc.isactive=1 and created_by=" + regno + " order by gcid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt64(sdr["gcid"].ToString());
                listv.ppm2 = sdr["couponno"].ToString();
                listv.TotavWallet = string.Format("{0:f}", sdr["worthvalue"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["create_date"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["tt_date"]);
                listv.Username = sdr["sendto"].ToString();
                listv.ppm4 = sdr["redeemby"].ToString();
                listv.ppm1 = string.Format("{0:dd/MM/yyyy}", sdr["redeem_date"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> GetRPWalletbalance(string regno)
    {
        sdr = null;
        string st = null;

        st = "select balance=(isnull(sum(credit),0)-isnull(sum(debit),0)) from member_account where wallettype='RP' and trstatus=1 and regno=" + regno + " ";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.TotavWallet = string.Format("{0:f}", sdr["balance"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public int createGiftoupen(string regno, string worthvalue)
    {
        int ResultStatus = 0;
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(regno);
            param[1] = new SqlParameter("@worthvalue", SqlDbType.Money);
            param[1].Value = Convert.ToDouble(worthvalue);
            param[2] = new SqlParameter("@QueryType", SqlDbType.VarChar, 500);
            param[2].Value = "Insert";
            param[3] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[3].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_GenerateGiftCoupon");

            if (result > 0)
            {
                ResultStatus = 1;
            }
            else
            {
                ResultStatus = 0;
            }
        }
        catch (Exception excep)
        {
            ResultStatus = 0;
        }

        return ResultStatus;
    }
    [WebMethod]
    public List<Merchant_Details> GetCoupon(string couponno)
    {
        List<Merchant_Details> memList = new List<Merchant_Details>();
        if (couponno != "" || couponno != null)
        {
            string query = string.Empty;
            query = "select *,createdby=(select randomid from member_master where regno=gc.created_by),createdbyname=(select (fname+' '+isnull(lname,'')) as name from member_master where regno=gc.created_by) ,reedemb=(select randomid from member_master where regno=gc.redeemby) from gift_coupon gc where couponno='" + couponno + "'";
            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                Merchant_Details mem = new Merchant_Details();
                mem.mid = Convert.ToInt32(sdr["gcid"]);
                mem.BusinessName = sdr["couponno"].ToString();
                mem.City = sdr["createdbyname"].ToString();
                mem.Comment = sdr["createdby"].ToString();
                mem.name = string.Format("{0:0}", sdr["worthvalue"]);
                mem.mobile = sdr["tt_date"].ToString();
                mem.emailid = sdr["reedemb"].ToString();
                mem.Requested_date = string.Format("{0:dd/MM/yyyy}", sdr["redeem_date"]);

                memList.Add(mem);
            }
            return memList;
        }
        return memList;
    }
    [WebMethod]
    public List<ProductOrderToday> GetRedeemCoupan(string regno)
    {
        sdr = null;
        string st = null;

        st = "select gcid,couponno,worthvalue,create_date,tt_date,sendto=(select emailid from member_master where regno=gc.transfer_to),redeemby=(select randomid from member_master where regno=gc.redeemBy),redeem_date from gift_Coupon gc where gc.isactive=1 and transfer_to=" + regno + " order by gcid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt64(sdr["gcid"].ToString());
                listv.ppm2 = sdr["couponno"].ToString();
                listv.TotavWallet = string.Format("{0:f}", sdr["worthvalue"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["create_date"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["tt_date"]);
                listv.Username = sdr["sendto"].ToString();
                listv.ppm4 = sdr["redeemby"].ToString();
                listv.ppm1 = sdr["redeem_date"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public List<Merchant_Details> GetCouponDetails(string regno, string worth)
    {
        List<Merchant_Details> memList = new List<Merchant_Details>();
        if (regno != "" || regno != null)
        {
            string query = string.Empty;
            query = "select top 1 *,createdby=(select randomid from member_master where regno=gc.created_by),createdbyname=(select (fname+' '+isnull(lname,'')) as name from member_master where regno=gc.created_by) ,reedemby=(select randomid from member_master where regno=gc.redeemby) from gift_coupon gc where created_by='" + regno + "' and worthvalue='" + worth + "'";
            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                Merchant_Details mem = new Merchant_Details();
                mem.mid = Convert.ToInt32(sdr["gcid"]);
                mem.BusinessName = sdr["couponno"].ToString();
                mem.City = sdr["createdbyname"].ToString();
                mem.Comment = sdr["createdby"].ToString();
                mem.name = string.Format("{0:0}", sdr["worthvalue"]);
                mem.mobile = string.Format("{0:dd/MM/yyyy}", sdr["create_date"]);
                mem.emailid = sdr["redeemby"].ToString();
                mem.Requested_date = string.Format("{0:dd/MM/yyyy}", sdr["redeem_date"]);

                memList.Add(mem);
            }
            return memList;
        }
        return memList;
    }
    [WebMethod]
    public int RedeemGiftCoupon(string regno, string couponno)
    {
        int ResultStatus = 0;
        try
        {
            SqlParameter[] param = new SqlParameter[3];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(regno);
            param[1] = new SqlParameter("@Couponno", SqlDbType.VarChar, 50);
            param[1].Value = Convert.ToDouble(couponno);
            param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[2].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_RedeemGiftCoupon");
            if (result > 0)
            {
                ResultStatus = result;

            }
            else
            {
                ResultStatus = 0;
            }
        }
        catch (Exception excep)
        {
            ResultStatus = 0;
        }

        return ResultStatus;
    }
    [WebMethod]
    public string Ewallet_Check(string regno, string netAmt)
    {
        string status = "false";

        SqlParameter[] param = new SqlParameter[3];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt, 4);
        param[0].Value = Convert.ToInt64(regno);
        param[1] = new SqlParameter("@netAmt", SqlDbType.Money);
        param[1].Value = Convert.ToDouble(netAmt);
        param[2] = new SqlParameter("@intresult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        int result = objDUT.ExecuteSqlSP(param, "usp_checkwallet");
        if (result > 0)
        {
            status = "true";
        }
        else
        {
            status = "false";
        }
        return status;
    }
    [WebMethod]
    public int CheckTranPass(string RegNo, string transpassword)
    {
        int b = Convert.ToInt32(objDUT.GetScalar("select Count(*) from member_login where regno='" + RegNo + "' and epassword='" + transpassword + "' "));
        return b;
    }
    [WebMethod]
    public List<string> GetAutoCompleteData(string randomID)
    {
        sdr = null;
        List<string> result = new List<string>();
        sdr = objDUT.GetDataReader("select top 10 randomid from member_login where randomid LIKE '%" + randomID + "%'");
        if (sdr.HasRows)
        {
            while (sdr.Read())
            {
                result.Add(sdr["randomid"].ToString());
            }
        }
        else
        {
            result.Add("Invalid Card No");
        }
        sdr.Close();
        sdr.Dispose();
        return result;
    }

    [WebMethod]
    public int CheckInvertory(string abcda, string RegNo)
    {
        int intStock = Convert.ToInt32(objDUT.GetScalar("select Count(*) from epin_master where sepinid=0 and regno=0 and eactive=1"));
        return intStock;
    }

    [WebMethod]
    public List<string> GetCompanyList(string CompanyName)
    {
        sdr = null;
        List<string> result = new List<string>();
        sdr = objDUT.GetDataReader("select top 10 catalogname from catalog where active=1 and catalogname like LIKE '%" + CompanyName + "%'");
        if (sdr.HasRows)
        {
            while (sdr.Read())
            {
                result.Add(sdr["randomid"].ToString());
            }
        }
        else
        {
            result.Add("Invalid Card No");
        }
        sdr.Close();
        sdr.Dispose();
        return result;
    }
    [WebMethod]
    public List<ReloadableTopupRequset> GetMemberToupDetails(string MaxRegno, string TRID)
    {
        sdr = null;
        string st = null;

        List<ReloadableTopupRequset> Requestlist = new List<ReloadableTopupRequset>();
        try
        {
            st = "select t.TRID,t.ReqID,t.Regno,convert(varchar(30),t.RequestDate,103) as RequestDate,t.catalogid,c.catalogname,t.categoryid,ca.categoryname,isnull(t.CardNo,'N/A') as CardNo,cast(t.TopUpAmount as varchar(20)) as TopUpAmount,case when isnull(convert(varchar(20),t.TopupDate,103),'')='' then 'N/A' else convert(varchar(20),t.TopupDate,103) end as TopupDate,t.Isactive,t.mpoid from TopupRequest t,catalog c,category ca where c.catalogid=t.catalogid and ca.categoryid=t.categoryid";
            if (MaxRegno != "")
            {
                st += "  and t.Regno='" + MaxRegno + "'";
            }
            if (TRID != "")
            {
                st += " and t.TRID='" + TRID + "'";
            }
            st += " order by TRID desc";

            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ReloadableTopupRequset listv = new ReloadableTopupRequset();
                listv.TRID = sdr["TRID"].ToString();
                listv.ReqID = sdr["ReqID"].ToString();
                listv.Regno = sdr["Regno"].ToString();
                listv.RequestDate = sdr["RequestDate"].ToString();
                listv.catalogid = sdr["catalogid"].ToString();
                listv.catalogname = sdr["catalogname"].ToString();
                listv.categoryid = sdr["categoryid"].ToString();
                listv.categoryname = sdr["categoryname"].ToString();
                listv.CardNo = sdr["CardNo"].ToString();
                listv.TopUpAmount = sdr["TopUpAmount"].ToString();
                listv.TopupDate = sdr["TopupDate"].ToString();
                listv.Isactive = sdr["Isactive"].ToString();
                listv.mpoid = sdr["mpoid"].ToString();
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public int ToupReRequest(ReloadableTopupRequset request)
    {
        SqlParameter[] Reqq = new SqlParameter[7];
        Reqq[0] = new SqlParameter("@Regno", SqlDbType.BigInt);
        Reqq[0].Value = Convert.ToInt64(request.Regno);

        Reqq[1] = new SqlParameter("@catalogid", SqlDbType.Int);
        Reqq[1].Value = Convert.ToInt32(request.catalogid);

        Reqq[2] = new SqlParameter("@categoryid", SqlDbType.Int);
        Reqq[2].Value = Convert.ToInt32(request.categoryid);

        Reqq[3] = new SqlParameter("@CardNo", SqlDbType.VarChar, 50);
        Reqq[3].Value = request.CardNo.Trim();

        Reqq[4] = new SqlParameter("@TopUpAmount", SqlDbType.Money);
        Reqq[4].Value = Convert.ToDouble(request.TopUpAmount.Trim());

        Reqq[5] = new SqlParameter("@query", SqlDbType.VarChar, 20);
        Reqq[5].Value = "insert";

        Reqq[6] = new SqlParameter("@intresult", SqlDbType.Int, 4);
        Reqq[6].Direction = ParameterDirection.Output;

        int intresult = objDUT.ExecuteSqlSP(Reqq, "sp_Requesttopupdata");
        return intresult;
    }
    [WebMethod]
    public string UpdatePasswordMerchant(string loginid, string oldpassword, string newpassword)
    {
        string status = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
            param[0].Value = loginid;
            param[1] = new SqlParameter("@Newpassword", SqlDbType.VarChar, 100);
            param[1].Value = newpassword;
            param[2] = new SqlParameter("@oldpassword", SqlDbType.VarChar, 100);
            param[2].Value = oldpassword;
            param[3] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[3].Direction = ParameterDirection.Output;

            int result = objDUT.ExecuteSqlSP(param, "sp_updatepassword_merchant");

            if (result > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }
        return status;
    }
    [WebMethod]
    public int MerchantRequestEvoucher(Request_Param request)
    {
        int res = 0;
        SqlParameter[] arrParam = new SqlParameter[18];
        arrParam[0] = new SqlParameter("@RefRegNo", SqlDbType.BigInt, 8);
        arrParam[0].Value = request.RefRegNo;
        arrParam[1] = new SqlParameter("@kid", SqlDbType.Int, 8);
        arrParam[1].Value = request.kid;
        arrParam[2] = new SqlParameter("@SEQty", SqlDbType.Int, 8);
        arrParam[2].Value = request.SEQty;
        arrParam[3] = new SqlParameter("@amount", SqlDbType.Decimal, 8);
        arrParam[3].Value = request.netAmount;
        arrParam[4] = new SqlParameter("@paymode", SqlDbType.VarChar, 50);
        arrParam[4].Value = request.paymode;
        arrParam[5] = new SqlParameter("@paydate", SqlDbType.DateTime, 8);
        arrParam[5].Value = DateTime.Today.ToString("MM/dd/yyyy");
        arrParam[6] = new SqlParameter("@refNo", SqlDbType.VarChar, 50);
        arrParam[6].Value = request.refNo;
        arrParam[7] = new SqlParameter("@bankName", SqlDbType.VarChar, 50);
        arrParam[7].Value = request.bankName;
        arrParam[8] = new SqlParameter("@bankBranch", SqlDbType.VarChar, 50);
        arrParam[8].Value = "";
        arrParam[9] = new SqlParameter("@Country", SqlDbType.VarChar, 50);
        arrParam[9].Value = "";
        arrParam[10] = new SqlParameter("@comment", SqlDbType.VarChar, 50);
        arrParam[10].Value = request.comment;

        arrParam[11] = new SqlParameter("@vatRate", SqlDbType.Money);
        arrParam[11].Value = Convert.ToDecimal(request.vatRates);
        arrParam[12] = new SqlParameter("@vatAmt", SqlDbType.Money);
        arrParam[12].Value = Convert.ToDecimal(request.vatAmount);
        arrParam[13] = new SqlParameter("@shipRate", SqlDbType.Money);
        arrParam[13].Value = Convert.ToDecimal(request.shipingRate);
        arrParam[14] = new SqlParameter("@shipAmt", SqlDbType.Money);
        arrParam[14].Value = Convert.ToDecimal(request.shipAmount);
        arrParam[15] = new SqlParameter("@linkTo", SqlDbType.VarChar, 50);
        arrParam[15].Value = request.RLinkTo;
        arrParam[16] = new SqlParameter("@ShipRateType", SqlDbType.VarChar, 50);
        arrParam[16].Value = request.shiprateType;

        arrParam[17] = new SqlParameter("@intResult", SqlDbType.Int);
        arrParam[17].Direction = ParameterDirection.Output;
        int result = objDUT.ExecuteSqlSP(arrParam, "SP_RequestCard");
        return result;
    }

    [WebMethod]
    public List<LastPurchasing> GetLastPurchaseing(string MRegNo)
    {
        List<LastPurchasing> PurchaseList = new List<LastPurchasing>();
        try
        {
            sdr = null;
            long Mregno = Convert.ToInt64(objDUT.GetScalar("select regno from merchant_master where mid='" + MRegNo + "'"));
            sdr = objDUT.GetDataReader("select m.randomid,p.gbp,p.totalbv,p.lrp from product_order_today p left outer join member_master m on m.regno=p.regno and p.regno='" + Mregno + "' order by p.invno desc");
            while (sdr.Read())
            {
                LastPurchasing LastPurchase = new LastPurchasing();
                LastPurchase.randomid = sdr["randomid"].ToString();
                LastPurchase.gbp = sdr["gbp"].ToString();
                LastPurchase.totalbv = sdr["totalbv"].ToString();
                LastPurchase.lrp = sdr["lrp"].ToString();
                PurchaseList.Add(LastPurchase);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return PurchaseList;
    }
    [WebMethod]
    public List<string> GetAutoCompleteData1(string cardnumber, string regno)
    {
        sdr = null;
        string st = null;
        List<string> result = new List<string>();
        try
        {
            string sp = "Sp_GetDownlineCard";
            SqlParameter[] Param = new SqlParameter[2];
            Param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            Param[0].Value = regno;
            Param[1] = new SqlParameter("@cardno", SqlDbType.VarChar, 100);
            Param[1].Value = cardnumber;
            sdr = objDUT.GetDataReaderSP(Param, sp);
            if (sdr.HasRows)
            {
                while (sdr.Read())
                {
                    result.Add(sdr["randomid"].ToString());
                }
            }
            else
            {
                result.Add("Invalid Card Number");
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return result;
    }

    [WebMethod]
    public List<SponsorList> GetSponsorList(string loginid)
    {
        long regno = objUT.GetRegistrationNo(loginid);
        List<SponsorList> sponsorlist = new List<SponsorList>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 10);
        param[0].Value = regno;
        sdr = objDUT.GetDataReaderSP(param, "sp_sponsorlist");
        while (sdr.Read())
        {
            SponsorList sponsor = new SponsorList();
            sponsor.regNo = sdr["regno"].ToString();
            sponsor.Loginid = sdr["Username"].ToString();
            sponsor.fullName = sdr["Name"].ToString();
            sponsor.regDate = Convert.ToDateTime(sdr["RegistrationDate"].ToString()).ToString("dd/MM/yyyy");
            sponsor.kitcode = sdr["Kit"].ToString();
            sponsor.kitpv = sdr["kitpv"].ToString();
            sponsor.mobileNo = sdr["Mobile"].ToString();
            sponsor.SponsorCount = sdr["Sponsor"].ToString();
            sponsor.statusconf = sdr["memstatus"].ToString();
            sponsor.colorclass = sdr["class"].ToString();
            sponsorlist.Add(sponsor);
        }
        sdr.Dispose();
        return sponsorlist;
    }


    [WebMethod]
    public List<EpinTransaction_Invoice> EpinTransactionInvoice_kitDetails(Invoice_Param invoice)
    {
        List<EpinTransaction_Invoice> epinInvoicelist = new List<EpinTransaction_Invoice>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@trans", SqlDbType.BigInt);
        param[0].Value = invoice.TransactionNo;
        sdr = objDUT.GetDataReaderSP(param, "Sp_KitDetails_Invoices");
        while (sdr.Read())
        {
            EpinTransaction_Invoice epininvoice = new EpinTransaction_Invoice();

            epininvoice.epinnumber = sdr["epinnumber"].ToString();
            epininvoice.epincode = sdr["epincode"].ToString();
            epininvoice.kitprice = string.Format("{0:f}", Convert.ToDouble(sdr["kitprice"].ToString()));
            epininvoice.kitcode = sdr["kitcode"].ToString().ToString();
            epinInvoicelist.Add(epininvoice);
        }
        sdr.Dispose();
        return epinInvoicelist;


    }
    [WebMethod]
    public List<YearAndMonth> getDirectLine(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select distinct introposm from member_master where introposm>0 order by introposm asc";
            DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= dt.Rows.Count; i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Line-" + i.ToString();
                    listv.MonthID = i.ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<YearAndMonth> getDirectLinememberwise(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select distinct introposm from member_master where introposm>0 and introregno=" + YearString + " order by introposm asc";
            DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= dt.Rows.Count; i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Line-" + i.ToString();
                    listv.MonthID = i.ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<YearAndMonth> getGenerationLine(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select distinct depthsM from member_master  where depthsm>0";
            DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= dt.Rows.Count; i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Level Depth-" + (i).ToString();
                    listv.MonthID = (i).ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<YearAndMonth> getGenerationLinememberwise(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            SqlParameter[] param = new SqlParameter[1];
            param[0] = new SqlParameter("@mRegno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(YearString);
            DataTable dt = objDUT.GetDataTableSP(param, "sp_leveldepth");
            //DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= Convert.ToInt32(dt.Rows[0]["showdepth"].ToString()); i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Level Depth-" + (i).ToString();
                    listv.MonthID = (i).ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<ProductOrderToday> GetteamIncome(string regno, string type, string generation, string month)
    {
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            if (generation == "--Generation--")
            {
                generation = "0";
            }
            if (generation == "-1")
            {
                generation = "0";
            }
            if (month == null)
            {
                month = "0";
            }
            if (Convert.ToInt32(month) <= 0)
            {
                month = "0";
            }

            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@mRegno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(regno);
            param[1] = new SqlParameter("@generation", SqlDbType.Int);
            param[1].Value = Convert.ToInt32(generation);
            param[2] = new SqlParameter("@payid", SqlDbType.Int);
            param[2].Value = Convert.ToInt32(month);
            param[3] = new SqlParameter("@typecondition", SqlDbType.VarChar, 100);
            param[3].Value = type;
            sdr = objDUT.GetDataReaderSP(param, "Sp_getTeamIncomeDetails");
            while (sdr.Read())
            {
                ProductOrderToday mail = new ProductOrderToday();

                mail.Username = sdr["regno"].ToString();
                mail.gp1 = sdr["generation"].ToString();
                mail.Icon = sdr["loginid"].ToString();
                mail.Username = sdr["name"].ToString();
                mail.Invoice = sdr["mobile"].ToString();
                mail.LRP = string.Format("{0:f}", sdr["Income"]);
                Requestlist.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getProductOrderToday(string loginid, string orderno, string status, string datefrom, string DateTo)
    {
        sdr = null;
        string st = null;
        if (datefrom != "")
        {
            string[] a1 = datefrom.Split('/');

            datefrom = a1[1] + "/" + a1[0] + "/" + a1[2];

        }
        if (DateTo != "")
        {

            string[] a2 = DateTo.Split('/');

            DateTo = a2[1] + "/" + a2[0] + "/" + a2[2];
        }

        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            //st = "select productdispatch=isnull(pot.productdispatch,0),deliverypin= case isnull(deliverypin),'',orderstatus=case when pot.status=1 then 'confirmed' when pot.status=2 then 'Rejected' else 'Pending' end,p=pot.status,pot.totalquantity, Mname=M.lName, pot.mpoid,pot.regno,pot.OrderNo,pot.invno,pot.invdate,pot.orderdate,pot.totalamount as GBP,totalbv from Product_order pot,member_master M where pot.regno=M.regno and pot.regno='" + loginid + "' ";

            st = "select   bvtype= case when pot.bvtype = 'A' then 0  when pot.bvtype = 'R' then  1  end, productdispatch=isnull(pot.productdispatch,0),deliverypin2= case when isnull(pot.deliverypin,'N/A')='N/A' then 'N/A' else pot.deliverypin end,orderstatus=case when pot.status=1 then 'confirmed' when pot.status=2 then 'Rejected' else 'Pending' end,p=pot.status,pot.totalquantity, Mname=M.lName, pot.mpoid,pot.regno,pot.OrderNo,pot.invno,pot.invdate,pot.orderdate,pot.totalamount as GBP,totalbv from Product_order pot,member_master M where pot.regno=M.regno and pot.regno='" + loginid + "'";
            if (status != "")
            {
                st = st + " and pot.status='" + status + "' ";
            }

            if (orderno != "")
            {
                st = st + " and pot.orderno='" + orderno + "' ";
            }

            //if (DateTo != "")
            //{
            //    st = st + " and pot.invdate,110='" + DateTo + "' ";
            //}
            if (datefrom != "")
            {
                st = st + " and convert(date,pot.orderdate,103) >='" + datefrom + "'";
            }
            if (DateTo != "")
            {
                st = st + " and convert(date,pot.orderdate,103) <='" + DateTo + "' ";
            }
            st = st + " order by pot.mpoid desc ";

            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt32(sdr["mpoid"].ToString());
                listv.Username = sdr["Mname"].ToString();
                listv.orderno = sdr["orderno"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["GBP"]);
                //listv.CashBack = string.Format("{0:f}", sdr["CashBack"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                listv.LRP = string.Format("{0:f}", sdr["totalbv"]);
                listv.noofitems = Convert.ToInt32(sdr["totalquantity"]);
                listv.states = sdr["deliverypin2"].ToString();
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                // listv.Activeclass = sdr["status"].ToString();
                listv.CashBack = sdr["orderstatus"].ToString();
                listv.Invoice = sdr["invno"].ToString();
                listv.Activeclass = Convert.ToInt32(sdr["p"].ToString()) == 1 ? "success" : "warning";
                listv.Bvtype = Convert.ToInt32(sdr["bvtype"].ToString()) == 1 ? "Repurchase" : "Activation";
                listv.gp1 = sdr["productdispatch"].ToString();


                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public List<ProductOrderToday> getProductOrderTodayDispatch(string loginid, string orderno, string status, string datefrom, string DateTo)
    {
        sdr = null;
        string st = null;
        if (datefrom != "")
        {
            string[] a1 = datefrom.Split('/');

            datefrom = a1[1] + "/" + a1[0] + "/" + a1[2];

        }
        if (DateTo != "")
        {

            string[] a2 = DateTo.Split('/');

            DateTo = a2[1] + "/" + a2[0] + "/" + a2[2];
        }

        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            st = "select pot.totalquantity, Mname=M.lName, pot.mpoid,pot.regno,pot.OrderNo,pot.invno,pot.invdate,pot.orderdate,pot.totalamount as GBP,totalbv from Product_order pot,member_master M where pot.regno=M.regno and pot.status=1 and pot.regno='" + loginid + "' ";

            if (status != "")
            {
                st = st + " and pot.productdispatch='" + status + "' ";
            }

            if (orderno != "")
            {
                st = st + " and pot.orderno='" + orderno + "' ";
            }

            if (datefrom != "")
            {
                st = st + " and convert(date,pot.invdate,103) >='" + datefrom + "'";
            }
            if (DateTo != "")
            {
                st = st + " and convert(date,pot.invdate,103) <='" + DateTo + "' ";
            }
            st = st + " order by pot.mpoid desc ";

            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt32(sdr["mpoid"].ToString());
                listv.Username = sdr["Mname"].ToString();
                listv.orderno = sdr["orderno"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["GBP"]);
                //listv.CashBack = string.Format("{0:f}", sdr["CashBack"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                listv.LRP = string.Format("{0:f}", sdr["totalbv"]);
                listv.noofitems = Convert.ToInt32(sdr["totalquantity"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                // listv.Activeclass = sdr["status"].ToString();
                // listv.oActive = sdr["orderstatus"].ToString();
                listv.Invoice = sdr["invno"].ToString();
                //listv.Activeclass = Convert.ToInt32(sdr["p"].ToString()) == 1 ? "success" : "warning";
                // listv.Packname = Convert.ToInt32(sdr["s"].ToString()) == 1 ? "success" : "warning";


                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public string CheckEpinNumber(string epinnumber)
    {
        string status = "false";
        try
        {
            string query = "Select e.EpinNumber from Epin_master e,Kit_Master k where e.kid=k.kid and e.EpinNumber='" + epinnumber + "' and e.regNo=0 AND e.sepinid<>0  and e.eactive=1 and k.kittype=0";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod]
    public List<LastPurchasing> getrank(string MRegNo)
    {
        List<LastPurchasing> PurchaseList = new List<LastPurchasing>();
        try
        {
            sdr = null;
            sdr = objDUT.GetDataReader("select designame,levels from slabrates order by levels");
            while (sdr.Read())
            {
                LastPurchasing LastPurchase = new LastPurchasing();
                LastPurchase.randomid = sdr["designame"].ToString();
                LastPurchase.gbp = sdr["levels"].ToString();

                PurchaseList.Add(LastPurchase);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return PurchaseList;
    }

    [WebMethod]
    public List<dispatchmode> Gettransactions(int did)
    {
        string query = string.Empty;
        List<dispatchmode> dmodeList = new List<dispatchmode>();
        try
        {
            query = "select incomeclub,transtype from IncomeClub where isactive=1 and transtype<>'RB'";

            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                dispatchmode kit = new dispatchmode();
                kit.dActive = sdr["transtype"].ToString();
                kit.dmode = sdr["incomeclub"].ToString();
                dmodeList.Add(kit);
            }
        }
        catch (Exception ex)
        {
        }
        return dmodeList;
    }

    [WebMethod]
    public List<payoutdetails> getStatements(string regno, string fromdate, string todate, string transtype, string transaction, string wallettype)
    {
        sdr = null;
        string st = null;
        List<payoutdetails> Requestlist = new List<payoutdetails>();
        try
        {
            if (regno != "" && transtype == "undefined")
            {
                st = "select regno,  convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
            }
            else if (regno != "" && transtype != "undefined")
            {
                if (regno != "" && transtype == "CASHBACK" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transtype + "'";

                } if (regno != "" && transtype == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0 ";
                }
                if (regno != "" && transtype == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0 ";
                }

                if (regno != "" && transtype == "" && transaction != "-1" && transaction != "c" && transaction != "d" && transaction != "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transaction + "'";
                }
                if (regno != "" && transtype == "" && transaction == "-1" && wallettype != "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0 ";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0 ";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
                }
                if (regno != "" && transtype == "" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
                }

            }


            //else
            //{
            //    st = "select regno,transdate,remark,debit,credit from member_account";
            //}


            //if (wallettype != "-1")
            //{
            //    st += " and  isnull(wallettype,'RP')='" + wallettype + "' ";
            //}
            if (fromdate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime)>='" + dateformat(fromdate) + "'";
            }
            if (todate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime)<='" + dateformat(todate) + "'";
            }
            st += " and trstatus not in(3,5) order by acid desc";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                payoutdetails listv = new payoutdetails();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.name = sdr["remark"].ToString();
                listv.batchconfdate = sdr["transdate"].ToString();
                listv.netpayable = string.Format("{0:f}", sdr["debit"]);
                listv.totalamont = string.Format("{0:f}", sdr["credit"]);
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {
        }
        return Requestlist;
    }
    [WebMethod]
    public int CheckPancard1(int regno)
    {
        int status = 0;
        try
        {
            if (regno != 0)
            {
                //  int query = "Select  mempan from Member_master where regno='" + regno + "'";
                string loginid = Convert.ToString(objDUT.GetScalar("Select  mempan from Member_master where regno='" + regno + "'"));
                if (loginid != "")
                {
                    status = 1;
                }
                else
                {
                    status = 0;
                }
            }
            else
            {
                status = 0;
            }
        }
        catch (Exception excep)
        {
            status = 0;
        }
        return status;
    }
    // For Index page
    [WebMethod(EnableSession = true)]
    public string CheckLogin(string login)
    {
        string result = " ";

        if (Session["Mloginid"] != null)
        {

            result = objDUT.GetScalar("select isnull(title,'')+' '+fname+' '+isnull(lname,' ') as name from member_master where loginid='" + Session["Mloginid"] + "'").ToString();
        }
        else
        {
            result = "login";
        }


        return result;
    }

    [WebMethod]
    public List<Kit> upgradekitdetail(string regno)
    {
        List<Kit> kitdetails = new List<Kit>();
        string query = string.Empty;
        query = "select  km.kitcode,km.kitprice,km.kittype,rt.rkpv from recharge_transaction  rt left outer join kit_master km on km.kid=rt.rkid where regno='" + regno + "'";
        DataTable tb = objDUT.GetDataTable(query);
        if (tb.Rows.Count > 0)
        {
            for (int i = 0; i < tb.Rows.Count; i++)
            {
                Kit kitdetails1 = new Kit();
                kitdetails1.kitCode = tb.Rows[i]["kitcode"].ToString();
                kitdetails1.kitPrice = Convert.ToDecimal(tb.Rows[i]["kitprice"]);
                kitdetails1.kitPV = Convert.ToInt32(tb.Rows[i]["rkpv"]);
                if (Convert.ToInt32(tb.Rows[i]["kittype"]) == 0)
                {
                    kitdetails1.kitDesc = "Joining Kit";
                }
                else
                {
                    kitdetails1.kitDesc = "Upgraded Kit";
                }
                kitdetails.Add(kitdetails1);
            }
        }
        return kitdetails;
    }
    [WebMethod]
    public List<Kit> GetKitsell(string kid, string kitType, string loginid)
    {
        long regno = Convert.ToInt64(objUT.GetRegistrationNo(loginid));
        string countkit = objDUT.GetScalar("select max (rkid) from  recharge_transaction where regno=" + regno + "").ToString();
        string query1 = string.Empty;
        List<Kit> kitList = new List<Kit>();
        //try
        //{
        //string query = "select kid from member_master where regno=" + Session["kitreg"].ToString();
        query1 = "Select kid, kitCode, KitDesc, KitPrice, kitPV, boardBV, kitType,kitproducts from kit_master where kitActive=1 and kid>" + countkit + " and kid<5";

        if (kid != "0")
        {
            query1 += " and kid='" + kid + "'   ";
        }
        if (kitType != "-1")
        {
            query1 += " and kitType='" + kitType + "' ";
        }
        query1 = query1 + "order by kid ";
        sdr = objDUT.GetDataReader(query1);
        while (sdr.Read())
        {
            Kit kit = new Kit();
            kit.kID = sdr.GetInt32(0);
            kit.kitCode = sdr.GetString(1);
            kit.kitDesc = sdr.GetString(2);
            kit.kitPrice = Convert.ToDecimal(string.Format("{0:f}", sdr.GetDecimal(3)));
            kit.kitPV = Convert.ToDecimal(string.Format("{0:f}", sdr.GetDecimal(4)));
            kit.boardBV = sdr.GetDecimal(5);
            kit.kitType = sdr.GetInt32(6);

            kitList.Add(kit);
        }
        //}
        //catch (Exception ex)
        //{


        //}
        return kitList;
    }

    [WebMethod]
    public List<Kit> GetKitCombo(string kid)
    {
        List<Kit> ComboList = new List<Kit>();
        DataTable dt;
        try
        {
            dt = objDUT.GetDataTable("Select kitCode, KitPrice, kitPV, directIncome from kit_master where kitActive=1 and kid='" + kid + "'");

            if (dt.Rows.Count > 0)
            {
                Kit Combo = new Kit();
                Combo.kitCode = dt.Rows[0]["kitCode"].ToString();
                Combo.kitPV = Convert.ToDecimal(dt.Rows[0]["kitpv"]);
                Combo.kitPrice = Convert.ToDecimal(dt.Rows[0]["KitPrice"]);
                Combo.directIncome = Convert.ToDecimal(dt.Rows[0]["DirectIncome"]);
                ComboList.Add(Combo);

            }
        }
        catch (Exception ex)
        {

        }
        return ComboList;

    }

    [WebMethod]
    public string CheckEpinNumber1(string epinnumber, string kitcode)
    {
        string status = "false";
        string query = "";
        try
        {
            query = "Select k.kitcode,e.EpinNumber from kit_master k,Epin_master e  where k.kid=e.kid and k.kid='" + kitcode + "' and  e.Epinnumber='" + epinnumber + "' and e.RegNo=0 and SEPinID<>0 and e.eActive=1 and k.kittype=0";
            ;
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";

            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod]
    public string validateEpin(string epinnumber, string kid)
    {
        string status = "false";
        string query = "";
        try
        {
            query = "Select count(*) from kit_master k,Epin_master e  where k.kid=e.kid and k.kid='" + kid + "' and  e.Epinnumber='" + epinnumber + "' and e.RegNo=0 and e.eActive=1 and sepinid>0 ";
            int loginid = Convert.ToInt32(objDUT.GetScalar(query));
            if (loginid > 0)
            {
                status = "true";

            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod(EnableSession = true)]
    public string SendKYCPINMail(string EmailID, string KYCPIN)
    {
        string result = " ";
        try
        {
            CompanySettings comSettings;
            SendMail objSent = new SendMail();
            string CompanyName, ComNoreply, ComEpass, ComLogo, ComSenderPort;
            comSettings = Session["CompanySettings"] as CompanySettings;
            CompanyName = comSettings.CompanyName;
            ComNoreply = comSettings.Sender_Email;
            ComEpass = comSettings.Sender_Email_Password;
            ComLogo = comSettings.Company_Logo;
            ComSenderPort = comSettings.Sender_Email_SMTP;
           

            if (Session["Mloginid"] != null)
            {

                result = objDUT.GetScalar("select isnull(title,'')+' '+fname+' '+isnull(lname,' ') as name from member_master where loginid='" + Session["Mloginid"] + "'").ToString();
                objSent.SendKYCPINMail(result, EmailID, KYCPIN, ComLogo, CompanyName, ComNoreply, ComEpass, ComSenderPort);
                result = "true";
                return result;
            }
            else
            {
                result = "false";
                return result;
            }
        }
        catch
        {
            result = "false";
            return result;
        }
        
    }

    [WebMethod]
    public List<Reward> MemberReward(string loginid)
    {
        List<Reward> MRewardReport = new List<Reward>();
        long regno = objUT.GetRegistrationNo(loginid);
        if (regno == 0)
        {
            Reward Rwrd = new Reward();
            Rwrd.error = "Wrong";
            MRewardReport.Add(Rwrd);
            return MRewardReport;
        }

        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 10);
        param[0].Value = regno;
        sdr = objDUT.GetDataReader("select mr.reqpv,mr.lpv,mr.rpv,startdate=isnull(Convert(varchar,mr.startdate,103),'N/A'),paid=case when mr.paid=0 then 'Unpaid' when mr.paid=1 then 'paid' else 'N/A' end, rm.rlevel,rm.rewardpoint,rewardgroup=case when mm.rewardgroup='A' then ' A' else ' B' end ,qualify=case when mr.Qualify=0 then 'Not Qualified' when mr.Qualify=1 then 'Qualified' else 'N/A' end from member_reward mr,reward_master rm,member_master mm where mr.regno=mm.regno and mm.kid>=3 and mr.rlevel=rm.rlevel and mm.regno='" + @regno + "'");
        try
        {
            while (sdr.Read())
            {
                Reward Rwrd = new Reward();
                Rwrd.rlevel = string.Format("{0:f}", Convert.ToDouble(sdr["reqpv"].ToString()));
                Rwrd.targetpoint = string.Format("{0:f}", Convert.ToDouble(sdr["reqpv"].ToString()));
                Rwrd.RPleftO = string.Format("{0:f}", Convert.ToDouble(sdr["lpv"].ToString()));
                Rwrd.RPrightO = string.Format("{0:f}", Convert.ToDouble(sdr["rpv"].ToString()));
                Rwrd.startDate = sdr["startdate"].ToString();
                Rwrd.rewardgroup = sdr["rewardgroup"].ToString();
                Rwrd.RpachivedO = string.Format("{0:f}", Convert.ToDouble(sdr["rlevel"].ToString()));
                Rwrd.paid = sdr["paid"].ToString();
                Rwrd.RPstatusO = sdr["qualify"].ToString();
                MRewardReport.Add(Rwrd);
            }
        }
        catch (Exception ex)
        {

        }
        sdr.Dispose();
        return MRewardReport;
    }
    [WebMethod]
    public List<EpinTransaction_Invoice> EpinTransactionInvoice_VOUCHERList(string loginid, string SEVID)
    {
        List<EpinTransaction_Invoice> epinInvoicelist = new List<EpinTransaction_Invoice>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[2];
        param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
        param[0].Value = loginid;
        param[1] = new SqlParameter("@SEVID", SqlDbType.BigInt);
        param[1].Value = Convert.ToInt64(SEVID);
        sdr = objDUT.GetDataReaderSP(param, "Sp_Voucher_List");
        while (sdr.Read())
        {
            EpinTransaction_Invoice epininvoice = new EpinTransaction_Invoice();

            epininvoice.epinnumber = sdr["VoucherNumber"].ToString();
            epininvoice.epincode = sdr["VoucherCode"].ToString();
            epininvoice.kitprice = string.Format("{0:f}", Convert.ToDouble(sdr["VoucherValue"].ToString()));
            epininvoice.S_Name = sdr["UsedBy"].ToString().ToString();
            epininvoice.P_Name = sdr["BelogTo"].ToString().ToString();
            epininvoice.regdate = sdr["regdate"].ToString().ToString();
            epininvoice.Mobileno = sdr["Mobileno"].ToString().ToString();
            epininvoice.P_City = string.Format("{0:dd/MM/yyyy}", sdr["BelongToDate"]);
            epininvoice.DuaDate = string.Format("{0:dd/MM/yyyy}", sdr["ValidTo"]); //sdr["ValidTo"].ToString().ToString();
            epininvoice.Date = string.Format("{0:dd/MM/yyyy}", sdr["ValidFrom"]);// sdr["ValidFrom"].ToString().ToString();
            epinInvoicelist.Add(epininvoice);
        }
        sdr.Dispose();
        return epinInvoicelist;


    }

    [WebMethod]
    public string SendvoucherPINMobile(string MobileNo, string KYCPIN)
    {
        string result = "";
        if (MobileNo != "")
        {
            try
            {

                string msg = " Your Activation Pin No. is : " + KYCPIN + "  Thanks and regards Sonsy Team. ";
                SMS sms = new SMS();
                sms.SendSMS(MobileNo, msg);
                objDUT.ExecuteSql("update voucher_master set mobileno=" + MobileNo + " where vouchernumber='" + KYCPIN + "' ");
                result = "true";
            }
            catch
            {
                result = "false";
            }

        }


        return result;
    }
}










**********************************************************************************
------------------------------------Other GetData-------------------------------------------
using System;
using System.Collections.Generic;
using System.Web;
using System.Web.Services;
using System.Web.Script.Serialization;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Web.Script;
using System.Runtime.Serialization.Json;
using System.Collections;
using AjaxControlToolkit;
using System.Collections;
using System.Collections.Specialized;
using System.Configuration;
using Currency;
using System.Globalization;


/// <summary>
/// Summary description for Getdata_member
/// </summary>
[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
// [System.Web.Script.Services.ScriptService]

[System.Web.Script.Services.ScriptService]
public class Getdata_member : System.Web.Services.WebService
{

    DataUtility objDUT = new DataUtility();
    Utility objUT = new Utility();
    SqlDataReader sdr;
    DateTime Test;
    public Getdata_member()
    {

        //Uncomment the following line if using designed components 
        //InitializeComponent(); 
    }

    protected DateTime dateformat(string str)
    {
        string[] str1;
        str1 = str.Split('/');
        return Convert.ToDateTime(str1[1] + "/" + str1[0] + "/" + str1[2].ToString());
    }

    /// <summary>
    /// Calender Picker Values Seprate into From and To in Number Format 
    /// Ex:- July 8, 2014 - August 6, 2014 
    /// From => 07/08/2014
    /// To => 08/08/2014
    /// </summary>
    /// <param name="date">string</param>
    /// <returns>Array</returns>
    /// <example>[0]= From </example>
    ///  <example>[1]= To </example>
    public string[] DateFormat(string date)
    {
        string[] From_To_Date = new string[2];
        try
        {
            int Month = 0; string Day = null; string year = null;
            string completedate = date.Trim();
            string[] FromandTo = completedate.Split('-');
            for (int i = 0; i < FromandTo.Length; i++)
            {
                string[] ss = FromandTo[i].Split(' ');
                for (int j = 0; j < ss.Length; j++)
                {
                    if (i == 0)
                    {
                        Month = DateTime.ParseExact(ss[0], "MMMM", System.Globalization.CultureInfo.InvariantCulture).Month;
                        Day = ss[1].ToString();
                        int index1 = ss[1].IndexOf(',');
                        if (index1 != -1)
                        {
                            Day = ss[1].Remove(index1, 1);
                        }
                        year = ss[2].ToString();
                        From_To_Date[i] = Convert.ToString(Month) + "/" + Day + "/" + year;
                    }

                    if (i == 1)
                    {
                        Month = DateTime.ParseExact(ss[1], "MMMM", System.Globalization.CultureInfo.InvariantCulture).Month;
                        Day = ss[2].ToString();
                        int index1 = ss[2].IndexOf(',');
                        if (index1 != -1)
                        {
                            Day = ss[2].Remove(index1, 1);
                        }
                        year = ss[3].ToString();
                        From_To_Date[i] = Convert.ToString(Month) + "/" + Day + "/" + year;
                    }
                }
            }
        }
        catch (Exception excep)
        {
            From_To_Date[0] = "";
            From_To_Date[1] = "";
        }

        return From_To_Date;
    }

    protected DateTime DateFormat1(string str)
    {
        string[] str1;
        str1 = str.Split('/', '-');
        return Convert.ToDateTime(str1[1] + "/" + str1[0] + "/" + str1[2]);
    }



    [WebMethod]
    public Hello GetCity(Hello city2)
    {
        SqlConnection CON = new SqlConnection();
        SqlCommand CMD = new SqlCommand("insert into abc  values ('" + city2.Name + "','" + city2.Population + "' , 0)", CON);
        CON.Open();
        int res = CMD.ExecuteNonQuery();
        CON.Close();
        return city2;
    }

    /// <summary>
    /// Purpose :  Change Password of Member
    /// page : DynamicMember.master
    /// </summary>
    /// 

    [WebMethod]
    public List<payoutStatement> SCGetPayid(string Loginid, string payid)
    {
        Utility objUT = new Utility();
        NumberToEnglish ntoe = new NumberToEnglish();
        sdr = null;
        int pFrom = Convert.ToInt32(objDUT.GetScalar("select sPayFromPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        int pTo = Convert.ToInt32(objDUT.GetScalar("select sPayToPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        long regNo = Convert.ToInt64(Loginid);

        string st = null;
        List<payoutStatement> PayoutList = new List<payoutStatement>();
        try
        {
            st = "select  count(totalIncome)  from member_payout where  totalIncome>0 and payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + regNo + "  group by regno";


            DataTable dt = objDUT.GetDataTable(st);

            payoutStatement Payout = new payoutStatement();
            if (dt.Rows.Count > 0)
            {
                Payout.pvIncome = "1";
            }
            else
            {
                Payout.pvIncome = "0";
            }




            PayoutList.Add(Payout);

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return PayoutList;
    }
    [WebMethod]
    public List<Payout> SGetPayid()
    {
        sdr = null;
        string st = null;
        List<Payout> PayoutList = new List<Payout>();
        try
        {
            st = "select spayid,pay=(cast(spayid as varchar)+'->'+convert(varchar(10),spayfromdate,103)+'-'+convert(varchar(10),SpayToDate,103)) from payout_settlement order by spayid desc";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Payout Payout = new Payout();
                Payout.pay = sdr["pay"].ToString();
                Payout.payid = Convert.ToInt32(sdr["spayid"].ToString());

                PayoutList.Add(Payout);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return PayoutList;
    }

    [WebMethod]
    public List<payoutStatement> getPayoutStatement(string Loginid, string payid)
    {
        Utility objUT = new Utility();
        NumberToEnglish ntoe = new NumberToEnglish();
        sdr = null;
        int pFrom = Convert.ToInt32(objDUT.GetScalar("select sPayFromPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        int pTo = Convert.ToInt32(objDUT.GetScalar("select sPayToPayid  from payout_settlement where sPayID=" + payid + "").ToString());
        long regNo = Convert.ToInt64(Loginid);

        string st = null;
        List<payoutStatement> PayoutList = new List<payoutStatement>();
        try
        {
            st = "select regNo, sum(paidPV) as 'paidPV',sum(flushPV) as 'flushPV',sum(pvIncome) as 'bIncome', sum(singleLegIncome) as 'sIncome',sum(levelIncome) as 'levelIncome', sum(singleLegDeduction) as 'slD', sum(tdsAmount) as 'TDS', sum(hAmount) as 'HC'  from member_payout where  totalIncome>0 and payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + regNo + "  group by regno";


            DataTable dt = objDUT.GetDataTable(st);

            payoutStatement Payout = new payoutStatement();
            Payout.regNo = dt.Rows[0]["regno"].ToString();
            Payout.pvIncome = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["bIncome"].ToString()));
            Payout.singleIncome = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["sIncome"].ToString()));
            Payout.levelIncome = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["levelIncome"].ToString()));
            Payout.singleDeduction = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["slD"].ToString()));
            Payout.TDSAmount = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["TDS"].ToString()));
            Payout.HCAmount = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["HC"].ToString()));
            Payout.paidPV = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["paidPV"].ToString()));
            Payout.flushPV = string.Format("{0:f}", Convert.ToDouble(dt.Rows[0]["flushPV"].ToString()));
            double totincome = Convert.ToDouble(Payout.pvIncome) + Convert.ToDouble(Payout.singleIncome) + Convert.ToDouble(Payout.levelIncome);
            double totded = Convert.ToDouble(Payout.TDSAmount) + Convert.ToDouble(Payout.HCAmount) + Convert.ToDouble(Payout.singleDeduction);
            double netincome = totincome - totded;
            string inword = ntoe.changeNumericToWords(netincome);
            Payout.TotIncome = string.Format("{0:f}", totincome);
            Payout.TotDeduction = string.Format("{0:f}", totded);
            Payout.NetIncome = string.Format("{0:f}", netincome);
            Payout.ValueInWord = inword.ToString();
            DataTable dtDetails = objDUT.GetDataTable("Select regno, (fname+' '+lname) as 'Name', Loginid, Emailid, Mobile, Address,oState, oCity, landMark, distName, memPan, pinCode from member_master where regno=" + regNo + " ");

            Payout.Name = dtDetails.Rows[0]["Name"].ToString();
            Payout.Loginid = dtDetails.Rows[0]["Loginid"].ToString();
            Payout.emailID = dtDetails.Rows[0]["emailid"].ToString();
            Payout.mobile = dtDetails.Rows[0]["Mobile"].ToString();
            Payout.LandMark = dtDetails.Rows[0]["landMark"].ToString();
            Payout.Address = dtDetails.Rows[0]["Address"].ToString();
            Payout.ostate = dtDetails.Rows[0]["oState"].ToString();
            Payout.ocity = dtDetails.Rows[0]["oCity"].ToString();
            Payout.district = dtDetails.Rows[0]["distName"].ToString();
            Payout.pinCode = dtDetails.Rows[0]["pinCode"].ToString();

            //________________ B/F
            double bflpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            double bfrpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.bfLeft = string.Format("{0:f}", bflpv);
            Payout.bfRight = string.Format("{0:f}", bfrpv);
            //__________________ Current
            double lpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)) from member_payout where payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            double rpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)) from member_payout where payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.currentLeft = string.Format("{0:f}", lpv);
            Payout.currentRight = string.Format("{0:f}", rpv);

            //________________ C/F
            double cflpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            double cfrpv = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.cfLeft = string.Format("{0:f}", cflpv);
            Payout.cfRight = string.Format("{0:f}", cfrpv);

            //------------------ Total
            double totalLeft = 0, totalRight = 0;
            totalLeft = (bflpv + lpv);
            totalRight = (bfrpv + rpv);
            Payout.totalLeft = string.Format("{0:f}", totalLeft);
            Payout.totalRight = string.Format("{0:f}", totalRight);

            //___________________ Paid
            double matched = Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)) from member_payout where payid>=" + pFrom + " and payid<=" + pTo + " and regno=" + dt.Rows[0]["regno"].ToString()).ToString());
            Payout.matched = string.Format("{0:f}", matched);

            //_____________ payid

            Payout.payid = payid;
            Payout.payFrom = string.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(objDUT.GetScalar("select sPayFromDate  from payout_settlement where sPayID=" + payid + "").ToString()));
            Payout.payTo = string.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(objDUT.GetScalar("select sPayToDate  from payout_settlement where sPayID=" + payid + "").ToString()));


            PayoutList.Add(Payout);

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return PayoutList;
    }
    [WebMethod]
    public string UpdatePasswordMember(string loginid, string oldpassword, string newpassword)
    {
        string status = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
            param[0].Value = loginid;
            param[1] = new SqlParameter("@Newpassword", SqlDbType.VarChar, 100);
            param[1].Value = newpassword;
            param[2] = new SqlParameter("@oldpassword", SqlDbType.VarChar, 100);
            param[2].Value = oldpassword;
            param[3] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[3].Direction = ParameterDirection.Output;

            int result = objDUT.ExecuteSqlSP(param, "sp_updatepassword_member");

            if (result > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }
        return status;
    }

    /// <summary>
    /// Purpose : Check Old Password Valid or Not
    /// page : DynamicMaster.master.aspx.aspx
    /// </summary>
    [WebMethod]
    public string CheckOldPassword(string loginid, string oldpassword)
    {
        string status = "false";
        try
        {
            string query = "Select Password from Member_login  where loginid='" + loginid + "' and  Password='" + oldpassword + "'";
            string oldpass = Convert.ToString(objDUT.GetScalar(query));
            if (oldpass.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }

    [WebMethod]
    public List<transEvoucher> TransactionEvoucherList(string kid, string solddate_from, string solddate_to, string loginid, string TRANSID)
    {
        string[] str1;
        if (solddate_from == "")
        {
            solddate_from = "";
            solddate_to = "";
        }
        else
        {
            str1 = solddate_from.Split('/', '-');

            solddate_from = Convert.ToString(str1[1] + "/" + str1[0] + "/" + str1[2]);
            str1 = solddate_to.Split('/', '-');
            solddate_to = Convert.ToString(str1[1] + "/" + str1[0] + "/" + str1[2]);
        }

        List<transEvoucher> TransEvoucherList = new List<transEvoucher>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
            param[0].Value = kid;
            param[1] = new SqlParameter("@sold_date_from", SqlDbType.VarChar, 50);
            param[1].Value = solddate_from;
            param[2] = new SqlParameter("@sold_date_to", SqlDbType.VarChar, 50);
            param[2].Value = solddate_to;
            param[3] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[3].Value = loginid;

            sdr = objDUT.GetDataReaderSP(param, "sp_transevoucher");
            while (sdr.Read())
            {
                transEvoucher translistv = new transEvoucher();
                translistv.Id = sdr["sepinid"].ToString();
                translistv.Date = Convert.ToDateTime(sdr["SEDate"]).ToString("dd/MM/yyyy");
                translistv.Quantity = sdr["seqty"].ToString();
                translistv.kittype = sdr["kittype"].ToString();
                translistv.kitprice = string.Format("{0:f}", Convert.ToDouble(sdr["kitprice"].ToString()));
                translistv.Amount = string.Format("{0:f}", Convert.ToDouble(sdr["Amount"].ToString()));
                translistv.loginid = sdr["loginid"].ToString();
                translistv.Name = sdr["Name"].ToString();
                translistv.Address = sdr["address"].ToString();
                translistv.Paymentmode = sdr["sepaymode"].ToString();
                TransEvoucherList.Add(translistv);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return TransEvoucherList;

    }



    [WebMethod]
    public List<ListVoucher> ListEVouchers(string sepinid, string kid, string solddate_from, string solddate_to, string loginid, string type)
    {
        if (solddate_from == "" && solddate_to == "")
        {
            solddate_from = "";
            solddate_to = "";
        }
        else
        {
            solddate_from = Convert.ToString(DateFormat1(solddate_from));
            solddate_to = Convert.ToString(DateFormat1(solddate_to));
        }


        List<ListVoucher> EvoucherList = new List<ListVoucher>();
        //try
        //{
        sdr = null;
        SqlParameter[] param = new SqlParameter[8];
        param[0] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
        param[0].Value = kid;
        param[1] = new SqlParameter("@sold_date_from", SqlDbType.VarChar, 50);
        param[1].Value = solddate_from;
        param[2] = new SqlParameter("@sold_date_to", SqlDbType.VarChar, 50);
        param[2].Value = solddate_to;
        param[3] = new SqlParameter("@join_date", SqlDbType.VarChar, 50);
        param[3].Value = "";
        param[4] = new SqlParameter("@generated_date", SqlDbType.VarChar, 50);
        param[4].Value = "";
        param[5] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
        param[5].Value = loginid;
        param[6] = new SqlParameter("@filtertype", SqlDbType.VarChar, 500);
        param[6].Value = type;
        param[7] = new SqlParameter("@sepinid", SqlDbType.VarChar, 500);
        param[7].Value = sepinid;

        sdr = objDUT.GetDataReaderSP(param, "sp_evoucherlist_test");
        while (sdr.Read())
        {
            ListVoucher listv = new ListVoucher();
            listv.epinNumber = sdr["EpinNumber"].ToString();
            listv.epincode = sdr["Epincode"].ToString();
            listv.kitType = sdr["kitType"].ToString();
            listv.SoldTo = sdr["SoldTo"].ToString();
            listv.LinkTo= sdr["usedby"].ToString();
            listv.gDate = Convert.ToDateTime(sdr["GDate"]).ToString("dd/MM/yyyy");
            listv.SName = sdr["soldby"].ToString();
            listv.kitCode = sdr["kitCode"].ToString();
            if (sdr["sedate"].ToString() == "1/1/1900 12:00:00 AM")
            {
                listv.SDate = "";
            }
            else
            {
                listv.SDate = Convert.ToDateTime(sdr["sedate"]).ToString("dd/MM/yyyy");
            }

            EvoucherList.Add(listv);
        }
        sdr.Dispose();

        //}
        //catch (Exception exce)
        //{
        //}
        return EvoucherList;
    }


    [WebMethod]
    public List<ListVoucher> ListMemberVouchers(string kid, string solddate_from, string solddate_to, string loginid, string type, string Mtype)
    {
        if (solddate_from != "")
        {
            string[] a1 = solddate_from.Split('/');

            solddate_from = a1[1] + "/" + a1[0] + "/" + a1[2];

        }
        if (solddate_to != "")
        {

            string[] a2 = solddate_to.Split('/');

            solddate_to = a2[1] + "/" + a2[0] + "/" + a2[2];
        }

        List<ListVoucher> EvoucherList = new List<ListVoucher>();
        //try
        //{
        sdr = null;
        SqlParameter[] param = new SqlParameter[9];
        param[0] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
        param[0].Value = kid;
        param[1] = new SqlParameter("@sold_date_from", SqlDbType.VarChar, 50);
        param[1].Value = solddate_from;
        param[2] = new SqlParameter("@sold_date_to", SqlDbType.VarChar, 50);
        param[2].Value = solddate_to;
        param[3] = new SqlParameter("@join_date", SqlDbType.VarChar, 50);
        param[3].Value = "";
        param[4] = new SqlParameter("@generated_date", SqlDbType.VarChar, 50);
        param[4].Value = "";
        param[5] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
        param[5].Value = loginid;
        param[6] = new SqlParameter("@filtertype", SqlDbType.VarChar, 500);
        param[6].Value = type;
        param[7] = new SqlParameter("@Mtype", SqlDbType.VarChar, 500);
        param[7].Value = "";
        param[8] = new SqlParameter("@linkto", SqlDbType.VarChar, 50);
        param[8].Value = "";
        sdr = objDUT.GetDataReaderSP(param, "sp_evoucherMemberlist1_test");
        while (sdr.Read())
        {
            ListVoucher listv = new ListVoucher();
            listv.epinNumber = sdr["EpinNumber"].ToString();
            listv.kitCode = sdr["linkedto"].ToString();
            listv.gDate = string.Format("{0:dd/MM/yyyy}", sdr["GDate"]);
            listv.SoldTo = sdr["activateby"].ToString();
            listv.SName = sdr["SeName"].ToString();

            listv.activationdate = sdr["ActivatedOn"].ToString();
            if (sdr["ActivatedOn"].ToString() == "1/1/1900 12:00:00 AM")
            {
                listv.activationdate = "";
            }
            else
            {
                listv.activationdate = string.Format("{0:dd/MM/yyyy}", sdr["ActivatedOn"]);
            }
            if (sdr["sedate"].ToString() == "1/1/1900 12:00:00 AM")
            {
                listv.SDate = "";
            }
            else
            {
                listv.SDate = string.Format("{0:dd/MM/yyyy}", sdr["sedate"]);
            }

            EvoucherList.Add(listv);
        }
        sdr.Dispose();

        //}
        //catch (Exception exce)
        //{
        //}
        return EvoucherList;
    }

    [WebMethod]
    public CountEpin CountKYCEvoucherDetails(string regno)
    {
        CountEpin coutepin = new CountEpin();
        coutepin.Free = Convert.ToString(objDUT.GetScalar("select count(em.epinid) from epin_master em ,kit_master KM  where em.kid=km.kid  and em.eactive=1 and em.sepinid=0 and  km.kittype=0 "));
        coutepin.Sold = Convert.ToString(objDUT.GetScalar("select count(em.epinid) from epin_master em ,kit_master KM , soldepin sp where em.kid=km.kid and em.sepinid=sp.sepinid and em.eactive=1 and em.sepinid>0 and km.kittype=0  and sp.refregno='" + regno + "'"));
        coutepin.TotalGenerated = Convert.ToString(objDUT.GetScalar("select count(em.epinid) from epin_master em ,kit_master KM  where em.kid=km.kid  and em.eactive=1 and   km.kittype=0"));
        return coutepin;
    }

    /// <summary>
    /// Purpose : View All Announcment
    /// page : Default.aspx
    /// </summary>
    [WebMethod]
    public List<Mail> GetAnnouncement(string annID)
    {

        List<Mail> mailList = new List<Mail>();
        try
        {
            if (annID == "")
            {
                sdr = objDUT.GetDataReader(@"Select NewsID, News, cast(newsDate as varchar) as newDate, activeFlag, display  from [eventNews] where activeFlag=1");
            }
            else
            {
                sdr = objDUT.GetDataReader(@"Select NewsID, News, cast(newsDate as varchar) as newDate, activeFlag, display  from [eventNews] where NewsID='" + annID + "'");
            }

            while (sdr.Read())
            {
                Mail mail = new Mail();
                mail.msgID = sdr.GetInt32(0);
                mail.Message = sdr.GetString(1);
                mail.msgDate = sdr.GetString(2);
                mail.activeFlag = sdr.GetBoolean(3);
                mail.display = sdr.GetInt32(4);
                mailList.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return mailList;
    }
    /// <summary>
    /// Purpose : View All Kit Details
    /// page : RequestedEvoucher.aspx
    /// </summary>
    [WebMethod]
    public List<Kit> GetKit(string kid, string kitType)
    {
        string query = string.Empty;
        List<Kit> kitList = new List<Kit>();
        try
        {
            query = "Select kid, kitCode, KitDesc, KitPrice, kitPV, kitbv, kitType,kitproducts from kit_master where kitActive=1  ";
            if (kid != "0")
            {
                query += " and kid='" + kid + "' ";
            }
            if (kitType != "-1")
            {
                query += " and kitType='" + kitType + "' ";
            }
            query += " order by kittype asc";

            sdr = objDUT.GetDataReader(query);

            while (sdr.Read())
            {
                Kit kit = new Kit();
                kit.kID = sdr.GetInt32(0);
                kit.kitCode = sdr.GetString(1);
                kit.kitDesc = sdr.GetString(2);
                kit.kitPrice = sdr.GetDecimal(3);
                kit.kitPV = sdr.GetDecimal(4);
                kit.boardBV = sdr.GetDecimal(5);
                kit.kitType = sdr.GetInt32(6);
                kit.kitproduct = sdr.GetString(7);
                kitList.Add(kit);
            }
        }
        catch (Exception ex)
        {


        }
        return kitList;
    }
    [WebMethod]
    public List<Kit> GetKit1(string kid, string kitType)
    {
        string query = string.Empty;
        List<Kit> kitList = new List<Kit>();
        try
        {

            query = "Select kid, kitCode, KitDesc, KitPrice, kitPV, kitbv, kitType from kit_master where kitActive=1 ";

            if (kid != "0")
            {
                query += " and kid='" + kid + "'  order by kittype asc ";
            }
            if (kitType != "-1")
            {
                query += " and kitType='" + kitType + "'  order by kittype asc ";
            }

            sdr = objDUT.GetDataReader(query);

            while (sdr.Read())
            {
                Kit kit = new Kit();
                kit.kID = sdr.GetInt32(0);
                kit.kitCode = sdr.GetString(1);
                kit.kitDesc = sdr.GetString(2);
                kit.kitPrice = sdr.GetDecimal(3);
                kit.kitPV = sdr.GetDecimal(4);
                kit.boardBV = sdr.GetDecimal(5);
                kit.kitType = sdr.GetInt32(6);
                kitList.Add(kit);
            }
        }
        catch (Exception ex)
        {


        }
        return kitList;
    }
    /// <summary>
    /// Purpose : Get Evoucher Details
    /// page : RequestedEvoucher.aspx
    /// </summary>
    [WebMethod]
    public List<ListEpin> GetVouchers(string kid, string dDate, string regNo)
    {

        string query = string.Empty;
        List<ListEpin> voucherList = new List<ListEpin>();
        DataTable dt;
        //try
        //{
        query = "Select top 100  E.EpinNumber, E.EpinCode, Cast(E.GDate as varchar) as GDate, K.KitCode, K.KitPrice, S.SeName, cast(S.SeDate as varchar) as SeDate, S.RefRegNo, isnull(M.LoginID,''), isnull(Cast(M.regDate as varchar),'') as regDate from epin_master E Left outer join Kit_Master K on E.Kid=K.kid left outer join SoldEpin S on S.sepinid=E.SepinID Left Outer Join Member_master M on M.regno=E.Regno where E.eActive=1 and E.sepinid>0 ";
        if (kid != "0")
        {
            query = query + " and E.Kid='" + kid + "' ";
        }
        if (regNo != "0")
        {
            query = query + " and S.refRegNo='" + regNo + "' ";
        }
        if (dDate != "0")
        {
            query = query + " and S.seDate>='" + dDate + "' ";
        }
        query = query + " Order by E.EpinID desc ";
        sdr = objDUT.GetDataReader(query);
        while (sdr.Read())
        {
            ListEpin LE = new ListEpin();

            LE.epinNumber = sdr.GetString(0);
            LE.epinCode = sdr.GetString(1);
            LE.gDate = sdr.GetString(2);
            LE.kitCode = sdr.GetString(3);
            //LE.kitPrefix = sdr.GetString(4);
            LE.kitPrice = sdr.GetDecimal(4).ToString();
            LE.SName = sdr.GetString(5);
            LE.SDate = sdr.GetString(6);
            //LE.SUserName = sdr.GetString(7);
            LE.JName = sdr.GetString(8);
            LE.JDate = sdr.GetString(9);
            voucherList.Add(LE);
        }

        //}
        //catch { }
        return voucherList;
    }

    /// <summary>
    /// Purpose : Get Evoucher Details
    /// page : RequestedEvoucher.aspx
    /// </summary>

    [WebMethod]
    public string Epinvalidornot(string epinnumber, string kid)
    {
        string status = "false";
        try
        {
            string query = "Select e.EpinNumber from Epin_master e,Kit_Master k where e.kid=k.kid  and e.regNo=0 AND e.sepinid<>0  and e.eactive=1 and k.kittype=1 and e.kid>1 and e.EpinNumber='" + epinnumber + "' and e.kid='" + kid + "'  ";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }




    [WebMethod]
    public string RequestActivation(string sellBy, string reqID, string LoginID, string Name, string Location, string State, string Address, string KCode, string Quantity, string payMode, string payDate, string payNo, string payBank, string pin)
    {
        int reqid = 0;
        try
        {
            if (reqID == "" || reqID == null)
            {
                reqid = 0;
            }
            else
            {
                reqid = Convert.ToInt32(reqID);
            }
        }
        catch (Exception excep)
        {
            reqid = 0;
        }
        string returnValue = string.Empty;
        long regNo = objUT.GetRegistrationNo(LoginID);

        //**************** get kit & Price details ******   
        Decimal Amount = 0, kitPrice = 0;
        int kid = 0;
        DataTable dt = objDUT.GetDataTable("Select kid, KitPrice from kit_master where kitCode='" + KCode + "'");
        kitPrice = Convert.ToDecimal(dt.Rows[0]["KitPrice"].ToString());
        kid = Convert.ToInt32(dt.Rows[0]["kid"].ToString());
        Amount = (kitPrice * Convert.ToDecimal(Quantity));
        dt.Dispose();
        //***********************************************
        try
        {
            if (payMode != "E-Pin")
            {
                SqlParameter[] p = new SqlParameter[11];
                p[0] = new SqlParameter("@RefRegNo", DbType.Int64);
                p[0].Value = regNo;
                p[1] = new SqlParameter("@SEQty", DbType.Int32);
                p[1].Value = Convert.ToInt32(Quantity);
                p[2] = new SqlParameter("@paymode", DbType.String);
                p[2].Value = payMode;
                p[3] = new SqlParameter("@paydate", DbType.DateTime);
                p[3].Value = Convert.ToDateTime(payDate);
                p[4] = new SqlParameter("@refNo", DbType.String);
                p[4].Value = payNo;
                p[5] = new SqlParameter("@bankName", DbType.String);
                p[5].Value = payBank;
                p[6] = new SqlParameter("@amount", DbType.Decimal);
                p[6].Value = Amount;
                p[7] = new SqlParameter("@kid", DbType.Int32);
                p[7].Value = kid;
                p[8] = new SqlParameter("@Country", DbType.Int32);
                p[8].Value = "";
                p[9] = new SqlParameter("@comment", DbType.String);
                p[9].Value = "";
                p[10] = new SqlParameter("@intResult", DbType.Int32);
                p[10].Direction = ParameterDirection.Output;
                returnValue = objDUT.ExecuteSqlSP(p, "SP_RequestEpin_Activation").ToString();
            }
            else
            {
                SqlParameter[] p = new SqlParameter[19];
                p[0] = new SqlParameter("@RefRegNo", DbType.Int64);
                p[0].Value = regNo;
                p[1] = new SqlParameter("@SEName", DbType.String);
                p[1].Value = Name;
                p[2] = new SqlParameter("@SEAddress", DbType.String);
                p[2].Value = Address;
                p[3] = new SqlParameter("@SEMobile", DbType.String);
                p[3].Value = "";
                p[4] = new SqlParameter("@SECity", DbType.String);
                p[4].Value = Location;
                p[5] = new SqlParameter("@SEState", DbType.String);
                p[5].Value = State;
                p[6] = new SqlParameter("@SEQty", DbType.Int32);
                p[6].Value = Convert.ToInt32(Quantity);
                p[7] = new SqlParameter("@SEPaymode", DbType.String);
                p[7].Value = payMode;
                p[8] = new SqlParameter("@SEPayDate", DbType.DateTime);
                p[8].Value = Convert.ToDateTime(payDate);
                p[9] = new SqlParameter("@SERefNo", DbType.String);
                p[9].Value = payNo;
                p[10] = new SqlParameter("@SEBankName", DbType.String);
                p[10].Value = payBank;
                p[11] = new SqlParameter("@SEAmount", DbType.Decimal);
                p[11].Value = Amount;
                p[12] = new SqlParameter("@kid", DbType.Int32);
                p[12].Value = kid;
                p[13] = new SqlParameter("@kprice", DbType.Decimal);
                p[13].Value = kitPrice;
                p[14] = new SqlParameter("@reqid", DbType.Int32);
                p[14].Value = reqid;
                p[15] = new SqlParameter("@sellby", DbType.Int64);
                p[15].Value = Convert.ToInt64(sellBy);
                p[16] = new SqlParameter("@intResult", DbType.Int32);
                p[16].Direction = ParameterDirection.Output;
                p[17] = new SqlParameter("@ACTIVATEBY", DbType.String);
                p[17].Value = "EPIN";
                p[18] = new SqlParameter("@EpinNumber", DbType.String);
                p[18].Value = pin;
                returnValue = objDUT.ExecuteSqlSP(p, "sp_RequestActivation").ToString();
            }

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return returnValue;
    }


    /// <summary>
    /// Purpose : this funcation use for view all Requested E-Voucher of Single Member
    /// Pages : requested_voucher.aspx
    /// </summary>
    /// <param name="Datefrom">satring</param>
    /// <param name="Dateto">string</param>
    /// <returns>List Type [Class]</returns>
    [WebMethod]
    public List<RequestedVoucher> RequestedEvoucher(string Datefrom, string Dateto, string regno, string mtype)
    {
        if (Datefrom == "")
        {
            Datefrom = "";
            Dateto = "";
        }
        else
        {
            string[] date = DateFormat(Datefrom);
            Datefrom = date[0];
            Dateto = date[1];
        }

        List<RequestedVoucher> reqevoucherlist = new List<RequestedVoucher>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[5];
            param[0] = new SqlParameter("@Req_date_from", SqlDbType.VarChar, 50);
            param[0].Value = Datefrom;
            param[1] = new SqlParameter("@Req_date_to", SqlDbType.VarChar, 50);
            param[1].Value = Dateto;
            param[2] = new SqlParameter("@Regno", SqlDbType.BigInt);
            param[2].Value = regno;
            param[3] = new SqlParameter("@ReqKitType", SqlDbType.VarChar, 50);
            param[3].Value = "Package";
            param[4] = new SqlParameter("@mtype", SqlDbType.VarChar, 50);
            param[4].Value = mtype;
            sdr = objDUT.GetDataReaderSP(param, "sp_reqCard_mem");
            while (sdr.Read())
            {
                RequestedVoucher RequestedEvoucher = new RequestedVoucher();
                RequestedEvoucher.RequestedCode = sdr["ReqCode"].ToString();
                RequestedEvoucher.Username = sdr["LoginID"].ToString();
                RequestedEvoucher.Noofevoucher = sdr["NoOfepin"].ToString();
                RequestedEvoucher.Kittype = sdr["kittype"].ToString();
                RequestedEvoucher.Date = Convert.ToDateTime(sdr["refDate"]).ToString("dd/MM/yyyy");
                RequestedEvoucher.Paymode = sdr["Paymode"].ToString();
                RequestedEvoucher.RequestedID = sdr["ReqID"].ToString();
                RequestedEvoucher.status = sdr["reqStatus"].ToString();
                RequestedEvoucher.class_sp = sdr["class"].ToString();


                reqevoucherlist.Add(RequestedEvoucher);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return reqevoucherlist;
    }

    /// <summary>
    /// Purpose : this function use for view Profile i or Edit
    /// Pages : ProfileEdit.aspx
    /// </summary>
    /// <param name="Username">String</param>
    /// <returns>List Type [View_MemberProfile]</returns>


     [WebMethod]
    public List<View_MemberProfile> ViewProfile_Member(string username)
    {
        List<View_MemberProfile> viewprofile = new List<View_MemberProfile>();
        View_MemberProfile memberpro = new View_MemberProfile();
        sdr = null;
        if (username.Length <= 0)
        {
            memberpro.ResultStatus = "2"; // Null Username
        }
        else
        {
            try
            {
                long ctr = Convert.ToInt64(objDUT.GetScalar("Select Count(loginid) from Member_master where loginid='" + username + "'"));
                if (ctr > 0)
                {
                    long active = Convert.ToInt64(objDUT.GetScalar("Select  active from Member_master where loginid='" + username + "'"));
                    if (active > 0)
                    {
                        try
                        {
                            SqlParameter[] param = new SqlParameter[1];
                            param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
                            param[0].Value = username;
                            sdr = objDUT.GetDataReaderSP(param, "sp_getMemberDetails");
                            if (sdr.HasRows)
                            {
                                while (sdr.Read())
                                {
                                    memberpro.nomneename = sdr["nomname"].ToString();
                                    memberpro.nomneerelation = sdr["relation"].ToString();
                                    memberpro.confpayno = sdr["confPayNo"].ToString();
                                    memberpro.loginid = sdr["loginid"].ToString();
                                    memberpro.title = sdr["title"].ToString();
                                    memberpro.fname = sdr["fname"].ToString();
                                    memberpro.lname = sdr["lname"].ToString();
                                    memberpro.dob = sdr["dob"].ToString();
                                    memberpro.Gender = Convert.ToInt32(sdr["Gender"]).ToString();
                                    memberpro.mobile = sdr["mobile"].ToString();
                                    memberpro.emailID = sdr["emailID"].ToString();
                                    memberpro.sid = sdr["sid"].ToString();
                                    memberpro.oState = sdr["oState"].ToString();
                                    memberpro.Ctid = sdr["Ctid"].ToString();
                                    memberpro.cid = sdr["cid"].ToString();
                                    memberpro.oCity = sdr["oCity"].ToString();
                                    memberpro.pincode = sdr["pincode"].ToString();
                                    memberpro.address = sdr["address"].ToString();
                                    memberpro.LandMark = sdr["LandMark"].ToString();
                                    memberpro.firstS_Qid = sdr["Secret_Qid"].ToString();
                                    memberpro.firstS_ANS = sdr["Secret_ANS"].ToString();
                                    memberpro.coreBank = sdr["coreBank"].ToString();
                                    memberpro.branchCode = sdr["branch"].ToString();
                                    memberpro.IFSCCode = sdr["IFSCCode"].ToString();
                                    memberpro.accountNo = sdr["accountNo"].ToString();
                                    memberpro.fat_husName = sdr["fat_husName"].ToString();
                                    memberpro.pancard = sdr["mempan"].ToString();
                                    memberpro.ResultStatus = "1";
                                    memberpro.phone = sdr["phone"].ToString();
                                    memberpro.profession = sdr["profession"].ToString();
                                    //memberpro.pancheck = sdr["pancheck"].ToString();
                                    //memberpro.bankcheck = sdr["bankcheck"].ToString();
                                    //memberpro.paymentrelease = sdr["paymentrelease"].ToString();
                                    viewprofile.Add(memberpro);
                                }
                            }
                            else
                            {
                                memberpro.title = "";
                                memberpro.fname = "";
                                memberpro.lname = "";
                                memberpro.dob = "";
                                memberpro.Gender = "";
                                memberpro.mobile = "";
                                memberpro.phone = "";
                                memberpro.profession = "";
                                memberpro.emailID = "";
                                memberpro.sid = "";
                                memberpro.oState = "";
                                memberpro.Ctid = "";
                                memberpro.oCity = "";
                                memberpro.pincode = "";
                                memberpro.address = "";
                                memberpro.LandMark = "";
                                memberpro.firstS_Qid = "";
                                memberpro.firstS_ANS = "";
                                memberpro.coreBank = "";
                                memberpro.branchCode = "";
                                memberpro.IFSCCode = "";
                                memberpro.accountNo = "";
                                memberpro.ResultStatus = "0";
                                memberpro.pancheck = "0";
                                memberpro.bankcheck = "0";
                                memberpro.paymentrelease = "0";
                            }

                        }
                        catch (Exception excep)
                        {
                        }
                    }
                    else
                    {
                        memberpro.ResultStatus = "5";  // Member Deactive
                    }
                }
                else
                {
                    memberpro.ResultStatus = "4";  // Invalid Username
                }
            }
            catch (Exception Excep)
            {
                memberpro.ResultStatus = "3";  // Invalid Username
            }
        }
        return viewprofile;
    }


    [WebMethod]
    public string Checkusername(string username)
    {
        string status = "false";
        try
        {
            int sponsor_limits = 0;
            sponsor_limits = Convert.ToInt32(objDUT.GetScalar("select limits from settings where caption='Companyid'"));
            string query = "Select  loginid from Member_master where (loginid='" + username + "' or randomid='" + username + "' )  and regno>=" + sponsor_limits + "";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    /// <summary>
    /// Purpose: Edit Profile
    /// Pages : profileEdit.aspx
    /// </summary>
    /// <param name="regno"></param>
    /// <param name="QueryType"></param>
    /// <param name="intResult"></param>
    /// <param name="title"></param>
    /// <param name="fname"></param>
    /// <param name="lname"></param>
    /// <param name="dob"></param>
    /// <param name="Gender"></param>
    /// <param name="mobile"></param>
    /// <param name="emailID"></param>
    /// <param name="sid"></param>
    /// <param name="oState"></param>
    /// <param name="Ctid"></param>
    /// <param name="oCity"></param>
    /// <param name="pincode"></param>
    /// <param name="address"></param>
    /// <param name="LandMark"></param>
    /// <param name="LoginID"></param>
    /// <param name="firstS_Qid"></param>
    /// <param name="firstS_ANS"></param>
    /// <param name="coreBank"></param>
    /// <param name="branchCode"></param>
    /// <param name="IFSCCode"></param>
    /// <param name="accountNo"></param>
    /// <returns></returns>

    [WebMethod]
    public string UpdateMemberProfile(string regno, string QueryType, string intResult, string title, string fname, string lname, string fatherName, string dob, string Gender, string mobile, string emailID, string sid, string oState, string Ctid, string oCity, string pincode, string address, string LandMark, string LoginID, string firstS_Qid, string firstS_ANS, string coreBank, string bankaddress, string IFSCCode, string accountNo, string CountryID, string distid, string distName, string pancard, string nomname, string relation, string pancheck, string bankchcek, string paymentcheck,string phone,string profession)
    {
        string ResultStatus = "0";


        //try
        //{
        regno = Convert.ToString(objDUT.GetScalar("Select regno from Member_master where loginid='" + LoginID + "'"));
        SqlParameter[] param = new SqlParameter[36];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
        param[1].Value = "update";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        param[3] = new SqlParameter("@title", SqlDbType.VarChar, 50);
        param[3].Value = title;
        param[4] = new SqlParameter("@fname", SqlDbType.VarChar, 50);
        param[4].Value = fname;
        param[5] = new SqlParameter("@lname", SqlDbType.VarChar, 100);
        param[5].Value = lname;
        param[6] = new SqlParameter("@dob", SqlDbType.VarChar, 50);
        param[6].Value = dateformat(dob);
        param[7] = new SqlParameter("@Gender", SqlDbType.Int);
        param[7].Value = Gender;
        param[8] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
        param[8].Value = mobile;
        param[9] = new SqlParameter("@emailID", SqlDbType.VarChar, 100);
        param[9].Value = emailID;
        param[10] = new SqlParameter("@sid", SqlDbType.Int);
        param[10].Value = sid;
        param[11] = new SqlParameter("@oState", SqlDbType.VarChar, 100);
        param[11].Value = oState;
        param[12] = new SqlParameter("@Ctid", SqlDbType.Int);
        param[12].Value = Ctid;
        param[13] = new SqlParameter("@oCity", SqlDbType.VarChar, 100);
        param[13].Value = oCity;
        param[14] = new SqlParameter("@pincode", SqlDbType.Int);
        param[14].Value = pincode;
        param[15] = new SqlParameter("@address", SqlDbType.VarChar, 100);
        param[15].Value = address;
        param[16] = new SqlParameter("@LandMark", SqlDbType.VarChar, 100);
        param[16].Value = LandMark;
        param[17] = new SqlParameter("@LoginID", SqlDbType.VarChar, 100);
        param[17].Value = LoginID;
        param[18] = new SqlParameter("@firstS_Qid", SqlDbType.VarChar, 100);
        param[18].Value = firstS_Qid;
        param[19] = new SqlParameter("@firstS_ANS", SqlDbType.VarChar, 100);
        param[19].Value = firstS_ANS;
        param[20] = new SqlParameter("@coreBank", SqlDbType.VarChar, 100);
        param[20].Value = coreBank;
        param[21] = new SqlParameter("@branchCode", SqlDbType.VarChar, 100);
        param[21].Value = bankaddress;
        param[22] = new SqlParameter("@IFSCCode", SqlDbType.VarChar, 100);
        param[22].Value = IFSCCode;
        param[23] = new SqlParameter("@accountNo", SqlDbType.VarChar, 100);
        param[23].Value = accountNo;
        param[24] = new SqlParameter("@countryid", SqlDbType.Int, 4);
        param[24].Value = CountryID;
        param[25] = new SqlParameter("@fatherName", SqlDbType.VarChar, 100);
        param[25].Value = fatherName;
        param[26] = new SqlParameter("@distid", SqlDbType.Int, 4);
        param[26].Value = distid;
        param[27] = new SqlParameter("@odistrict", SqlDbType.VarChar, 100);
        param[27].Value = distName;
        param[28] = new SqlParameter("@pancard", SqlDbType.VarChar, 100);
        param[28].Value = pancard;
        param[29] = new SqlParameter("@nomname", SqlDbType.VarChar, 200);
        param[29].Value = nomname;
        param[30] = new SqlParameter("@relation", SqlDbType.VarChar, 200);
        param[30].Value = relation;
        param[31] = new SqlParameter("@pancheck", SqlDbType.Int, 4);
        param[31].Value = Convert.ToInt32(pancheck);
        param[32] = new SqlParameter("@bankcheck", SqlDbType.Int, 4);
        param[32].Value = Convert.ToInt32(bankchcek);
        param[33] = new SqlParameter("@paymentrelease", SqlDbType.Int, 4);
        param[33].Value = Convert.ToInt32(paymentcheck);
        param[34].Value = new SqlParameter("@phone", SqlDbType.VarChar, 20);
        param[34].Value = phone;
        param[35].Value = new SqlParameter("@profession", SqlDbType.VarChar, 100);
        param[35].Value = profession;
        int result = objDUT.ExecuteSqlSP(param, "sp_manageMemberProfile");
        if (result > 0)
        {
            ResultStatus = "1";
        }
        else
        {
            ResultStatus = "0";
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }

    [WebMethod]
    public string UpdateMemberProfile1(string regno, string QueryType, string intResult, string title, string fname, string lname, string fatherName, string dob, string Gender, string mobile, string emailID, string sid, string oState, string Ctid, string oCity, string pincode, string address, string LandMark, string LoginID, string firstS_Qid, string firstS_ANS, string coreBank, string bankaddress, string IFSCCode, string accountNo, string CountryID, string distid, string distName, string pancard, string nomname, string relation,string phone,string profession)
    {
        string ResultStatus = "0";


        //try
        //{
        regno = Convert.ToString(objDUT.GetScalar("Select regno from Member_master where loginid='" + LoginID + "'"));

        SqlParameter[] param = new SqlParameter[33];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
        param[1].Value = "update";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        param[3] = new SqlParameter("@title", SqlDbType.VarChar, 50);
        param[3].Value = title;
        param[4] = new SqlParameter("@fname", SqlDbType.VarChar, 50);
        param[4].Value = fname;
        param[5] = new SqlParameter("@lname", SqlDbType.VarChar, 100);
        param[5].Value = lname;
        param[6] = new SqlParameter("@dob", SqlDbType.VarChar, 50);
        param[6].Value = dateformat(dob);
        param[7] = new SqlParameter("@Gender", SqlDbType.Int);
        param[7].Value = Gender;
        param[8] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
        param[8].Value = mobile;
        param[9] = new SqlParameter("@emailID", SqlDbType.VarChar, 100);
        param[9].Value = emailID;
        param[10] = new SqlParameter("@sid", SqlDbType.Int);
        param[10].Value = sid;
        param[11] = new SqlParameter("@oState", SqlDbType.VarChar, 100);
        param[11].Value = oState;
        param[12] = new SqlParameter("@Ctid", SqlDbType.Int);
        param[12].Value = Ctid;
        param[13] = new SqlParameter("@oCity", SqlDbType.VarChar, 100);
        param[13].Value = oCity;
        param[14] = new SqlParameter("@pincode", SqlDbType.VarChar, 50);
        param[14].Value = pincode;
        param[15] = new SqlParameter("@address", SqlDbType.VarChar, 100);
        param[15].Value = address;
        param[16] = new SqlParameter("@LandMark", SqlDbType.VarChar, 100);
        param[16].Value = LandMark;
        param[17] = new SqlParameter("@LoginID", SqlDbType.VarChar, 100);
        param[17].Value = LoginID;
        param[18] = new SqlParameter("@firstS_Qid", SqlDbType.VarChar, 100);
        param[18].Value = firstS_Qid;
        param[19] = new SqlParameter("@firstS_ANS", SqlDbType.VarChar, 100);
        param[19].Value = firstS_ANS;
        param[20] = new SqlParameter("@coreBank", SqlDbType.VarChar, 100);
        param[20].Value = coreBank;
        param[21] = new SqlParameter("@branchCode", SqlDbType.VarChar, 100);
        param[21].Value = bankaddress;
        param[22] = new SqlParameter("@IFSCCode", SqlDbType.VarChar, 100);
        param[22].Value = IFSCCode;
        param[23] = new SqlParameter("@accountNo", SqlDbType.VarChar, 100);
        param[23].Value = accountNo;
        param[24] = new SqlParameter("@countryid", SqlDbType.Int, 4);
        param[24].Value = CountryID;
        param[25] = new SqlParameter("@fatherName", SqlDbType.VarChar, 100);
        param[25].Value = fatherName;
        param[26] = new SqlParameter("@distid", SqlDbType.Int, 4);
        param[26].Value = distid;
        param[27] = new SqlParameter("@odistrict", SqlDbType.VarChar, 100);
        param[27].Value = distName;
        param[28] = new SqlParameter("@pancard", SqlDbType.VarChar, 100);
        param[28].Value = pancard;
        param[29] = new SqlParameter("@nomname", SqlDbType.VarChar, 200);
        param[29].Value = nomname;
        param[30] = new SqlParameter("@relation", SqlDbType.VarChar, 200);
        param[30].Value = relation;
        param[31] = new SqlParameter("@phone", SqlDbType.VarChar, 30);
        param[31].Value = phone;
        param[32] = new SqlParameter("@profession", SqlDbType.VarChar, 100);
        param[32].Value = profession;

        int result = objDUT.ExecuteSqlSP(param, "sp_manageMemberProfile1");
        if (result == 1)
        {
            ResultStatus = "1";
        }
        else if (result == 2)
        {
            ResultStatus = "2";
        }
        else
        {
            ResultStatus = "0";
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }
   [WebMethod]
    public string UpdateMemberProfile12(string regno, string QueryType, string intResult, string title, string fname, string lname, string fatherName, string dob, string Gender, string mobile, string emailID, string sid, string oState, string Ctid, string oCity, string pincode, string address, string LandMark, string LoginID, string firstS_Qid, string firstS_ANS, string coreBank, string bankaddress, string IFSCCode, string accountNo, string CountryID, string distid, string distName, string pancard, string nomname, string relation, string loginidusername)
    {
        string ResultStatus = "0";


        //try
        //{
        regno = Convert.ToString(objDUT.GetScalar("Select regno from Member_master where loginid='" + LoginID + "'"));
        int countryid1 = Convert.ToInt32(objDUT.GetScalar("Select cid from country where countryname='" + CountryID + "'"));
        SqlParameter[] param = new SqlParameter[31];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
        param[1].Value = "update";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        param[3] = new SqlParameter("@title", SqlDbType.VarChar, 50);
        param[3].Value = title;
        param[4] = new SqlParameter("@fname", SqlDbType.VarChar, 50);
        param[4].Value = fname;
        param[5] = new SqlParameter("@lname", SqlDbType.VarChar, 100);
        param[5].Value = lname;
        param[6] = new SqlParameter("@dob", SqlDbType.VarChar, 50);
        param[6].Value = dateformat(dob);
        param[7] = new SqlParameter("@Gender", SqlDbType.Int);
        param[7].Value = Gender;
        param[8] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
        param[8].Value = mobile;
        param[9] = new SqlParameter("@emailID", SqlDbType.VarChar, 100);
        param[9].Value = emailID;
        param[10] = new SqlParameter("@sid", SqlDbType.Int);
        param[10].Value = sid;
        param[11] = new SqlParameter("@oState", SqlDbType.VarChar, 100);
        param[11].Value = oState;
        param[12] = new SqlParameter("@Ctid", SqlDbType.Int);
        param[12].Value = Ctid;
        param[13] = new SqlParameter("@oCity", SqlDbType.VarChar, 100);
        param[13].Value = oCity;
        param[14] = new SqlParameter("@pincode", SqlDbType.VarChar, 50);
        param[14].Value = pincode;
        param[15] = new SqlParameter("@address", SqlDbType.VarChar, 100);
        param[15].Value = address;
        param[16] = new SqlParameter("@LandMark", SqlDbType.VarChar, 100);
        param[16].Value = LandMark;
        param[17] = new SqlParameter("@LoginID", SqlDbType.VarChar, 100);
        param[17].Value = LoginID;
        param[18] = new SqlParameter("@firstS_Qid", SqlDbType.VarChar, 100);
        param[18].Value = "0";
        param[19] = new SqlParameter("@firstS_ANS", SqlDbType.VarChar, 100);
        param[19].Value = firstS_ANS;
        param[20] = new SqlParameter("@coreBank", SqlDbType.VarChar, 100);
        param[20].Value = coreBank;
        param[21] = new SqlParameter("@branchCode", SqlDbType.VarChar, 100);
        param[21].Value = bankaddress;
        param[22] = new SqlParameter("@IFSCCode", SqlDbType.VarChar, 100);
        param[22].Value = IFSCCode;
        param[23] = new SqlParameter("@accountNo", SqlDbType.VarChar, 100);
        param[23].Value = accountNo;
        param[24] = new SqlParameter("@countryid", SqlDbType.Int, 4);
        param[24].Value = countryid1;
        param[25] = new SqlParameter("@fatherName", SqlDbType.VarChar, 100);
        param[25].Value = fatherName;
        param[26] = new SqlParameter("@distid", SqlDbType.Int, 4);
        param[26].Value = distid;
        param[27] = new SqlParameter("@odistrict", SqlDbType.VarChar, 100);
        param[27].Value = distName;
        param[28] = new SqlParameter("@pancard", SqlDbType.VarChar, 100);
        param[28].Value = pancard;
        param[29] = new SqlParameter("@nomname", SqlDbType.VarChar, 200);
        param[29].Value = nomname;
        param[30] = new SqlParameter("@relation", SqlDbType.VarChar, 200);
        param[30].Value = loginidusername;

        int result = objDUT.ExecuteSqlSP(param, "sp_manageMemberProfile1");
        if (result == 1)
        {
            ResultStatus = "1";
        }
        else if (result == 2)
        {
            ResultStatus = "2";
        }
        else
        {
            ResultStatus = "0";
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }

    [WebMethod]
    public List<Member> GetMem(string LoginID)
    {
        string query = string.Empty;
        List<Member> memList = new List<Member>();
        // try
        // {

        query = @"Select M.RegNo, Cast(M.memCode as varchar), M.randomID, L.Loginid,
                            (M.fName+' '+M.lname) as fullName,cast(M.regDate as varchar) as regDate,
                            isnull(M.address,'') as 'Address' ,c.countryname,M.ostate,
                               m.oCity,  isnull(M.pinCode,'') as 'Pincode',isnull(M.mobile,'') as 'Mobile',
                              isnull(M.emailID,'')as 'EmailID', L.password from Member_master M,country c,
                               Member_login L where M.regno=L.regNo and m.cid=c.cid and  (M.Loginid='" + LoginID + "' or M.Randomid='" + LoginID + "') ";

        sdr = objDUT.GetDataReader(query);

        while (sdr.Read())
        {
            Member mem = new Member();
            mem.regNo = sdr.GetInt64(0);
            mem.memCode = sdr.GetString(1);
            mem.randomID = sdr.GetString(2);
            mem.Loginid = sdr.GetString(3);
            mem.fullName = sdr.GetString(4);
            mem.regDate = sdr.GetString(5);
            mem.address = sdr.GetString(6);
            mem.oCountry = sdr.GetString(7);
            mem.oState = sdr.GetString(8);
            mem.oCity = sdr.GetString(9);
            mem.pinCode = sdr.GetString(10);
            mem.emailID = sdr.GetString(12);
            mem.password = sdr.GetString(12);
            mem.transPass = sdr.GetString(13);
            //mem.active = sdr.GetBoolean(14);
            memList.Add(mem);

        }
        //}
        //catch (Exception ex)
        //{


        //}
        return memList;
    }

    [WebMethod]
    public string genkycepin(string sellBy, string reqID, string LoginID, string Name, string Location, string State, string Country, string Address, string KCode, string Quantity)
    {
        string returnValue = string.Empty;
        long regNo = objUT.GetRegistrationNo(LoginID);
        //int t = Convert.ToInt32(objDUT.GetScalar("select confpayno from member_master where regno=" + regNo));
        //if (t == 0)
        //{
        //    returnValue = "2";// "You have not authority to generate Evoucher. Please activate yourself.";
        //    return returnValue;
        //}
        int sid = Convert.ToInt32(objDUT.GetScalar("select sid from STATE WHERE statename='" + State + "'"));
        int ctid = Convert.ToInt32(objDUT.GetScalar("select ctid from CITY where cityname='" + Location + "'"));
        int reqid = 0;
        try
        {
            if (reqID == "" || reqID == null)
            {
                reqid = 0;
            }
            else
            {
                reqid = Convert.ToInt32(reqID);
            }
        }
        catch (Exception excep)
        {
            reqid = 0;
        }



        //**************** get kit & Price details ******   
        Decimal Amount = 0, kitPrice = 0;
        int kid = 0;
        DataTable dt = objDUT.GetDataTable("Select kid, KitPrice from kit_master where kitCode='" + KCode + "'");
        kitPrice = Convert.ToDecimal(dt.Rows[0]["KitPrice"].ToString());
        kid = Convert.ToInt32(dt.Rows[0]["kid"].ToString());
        Amount = (kitPrice * Convert.ToDecimal(Quantity));
        dt.Dispose();
        //***********************************************

        try
        {
            SqlParameter[] p = new SqlParameter[17];
            p[0] = new SqlParameter("@RefRegNo", DbType.Int64);
            p[0].Value = regNo;
            p[1] = new SqlParameter("@SEName", DbType.String);
            p[1].Value = Name;
            p[2] = new SqlParameter("@SEAddress", DbType.String);
            p[2].Value = Address;
            p[3] = new SqlParameter("@SEMobile", DbType.String);
            p[3].Value = "";
            p[4] = new SqlParameter("@SECity", DbType.Int32);
            p[4].Value = ctid;
            p[5] = new SqlParameter("@SEState", DbType.Int32);
            p[5].Value = sid;
            p[6] = new SqlParameter("@SEQty", DbType.Int32);
            p[6].Value = Convert.ToInt32(Quantity);
            p[7] = new SqlParameter("@SEPaymode", DbType.String);
            p[7].Value = "";
            p[8] = new SqlParameter("@SEPayDate", DbType.DateTime);
            p[8].Value = "";
            p[9] = new SqlParameter("@SERefNo", DbType.Int64);
            p[9].Value = 0;
            p[10] = new SqlParameter("@SEBankName", DbType.String);
            p[10].Value = "";
            p[11] = new SqlParameter("@SEAmount", DbType.Decimal);
            p[11].Value = Amount;
            p[12] = new SqlParameter("@kid", DbType.Int32);
            p[12].Value = kid;
            p[13] = new SqlParameter("@kprice", DbType.Decimal);
            p[13].Value = kitPrice;
            p[14] = new SqlParameter("@reqid", DbType.Int32);
            p[14].Value = reqid;
            p[15] = new SqlParameter("@sellby", DbType.Int64);
            p[15].Value = 0;
            p[16] = new SqlParameter("@intResult", DbType.Int32);
            p[16].Direction = ParameterDirection.Output;

            returnValue = objDUT.ExecuteSqlSP(p, "SP_SaleNewEpinkycMember").ToString();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return returnValue;
    }






    /// <summary>
    /// 
    /// </summary>
    /// <param name="regno">String</param>
    /// <param name="Querytype">String</param>
    /// <returns></returns>
    [WebMethod]
    public List<BankDetails> ViewBankDetails(string regno, string Querytype)
    {
        List<BankDetails> BankDetailslist = new List<BankDetails>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[2];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = regno;
            param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
            param[1].Value = "View";

            sdr = objDUT.GetDataReaderSP(param, "Sp_BankDetails");
            while (sdr.Read())
            {
                BankDetails bankdetails = new BankDetails();
                bankdetails.Bankname = sdr["Bankname"].ToString();
                bankdetails.Branchcode = sdr["Branchcode"].ToString();
                bankdetails.Branchname = sdr["Branchname"].ToString();
                bankdetails.ifsccode = sdr["ifsccode"].ToString();
                bankdetails.accountno = sdr["accountno"].ToString();
                bankdetails.accountholdername = sdr["accountholdername"].ToString();
                bankdetails.accountType = sdr["accountType"].ToString();
                bankdetails.BankAddress = sdr["BankAddress"].ToString();
                BankDetailslist.Add(bankdetails);
            }
            sdr.Dispose();
        }
        catch (Exception exce)
        {
        }
        return BankDetailslist;
    }




    /// <summary>
    /// Purpose : Update Bankdetails 
    /// page : RequestedPayout.aspx
    /// </summary>
    [WebMethod]
    public int UpdateBankDetails(Bank_Param bank)
    {
        int res = 0;
        try
        {
            SqlParameter[] arrParam = new SqlParameter[10];
            arrParam[0] = new SqlParameter("@Bankname", SqlDbType.VarChar, 500);
            arrParam[0].Value = bank.Bankname;
            arrParam[1] = new SqlParameter("@Branchcode", SqlDbType.VarChar, 50);
            arrParam[1].Value = bank.Branchcode;
            arrParam[2] = new SqlParameter("@ifsccode", SqlDbType.VarChar, 50);
            arrParam[2].Value = bank.ifsccode;
            arrParam[3] = new SqlParameter("@Branchname", SqlDbType.VarChar, 100);
            arrParam[3].Value = bank.Branchname;
            arrParam[4] = new SqlParameter("@accountno", SqlDbType.VarChar, 50);
            arrParam[4].Value = bank.accountno;
            arrParam[5] = new SqlParameter("@accountholdername", SqlDbType.VarChar, 100);
            arrParam[5].Value = bank.accountholdername;
            arrParam[6] = new SqlParameter("@accountType", SqlDbType.VarChar, 100);
            arrParam[6].Value = bank.accountType;
            arrParam[7] = new SqlParameter("@BankAddress", SqlDbType.VarChar, 500);
            arrParam[7].Value = bank.BankAddress;
            arrParam[8] = new SqlParameter("@regno", SqlDbType.BigInt);
            arrParam[8].Value = bank.regno;
            arrParam[9] = new SqlParameter("@intResult", SqlDbType.Int);
            arrParam[9].Direction = ParameterDirection.Output;
            res = objDUT.ExecuteSqlSP(arrParam, "Sp_updateBankDetails");
        }
        catch (Exception excep)
        {
            res = 0;
        }
        return res;
    }



    /// <summary>
    /// 
    /// </summary>
    /// <param name="regno"></param>
    /// <param name="Querytype"></param>
    /// <returns></returns>
    [WebMethod]
    public bool CheckBankDetails(string regno, string Querytype)
    {

        bool result = false;
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[2];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = regno;
            param[1] = new SqlParameter("@QueryType", SqlDbType.VarChar, 50);
            param[1].Value = "View";

            sdr = objDUT.GetDataReaderSP(param, "Sp_BankDetails");
            while (sdr.Read())
            {
                if (String.IsNullOrEmpty(sdr["Bankname"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["Branchcode"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["Branchname"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["ifsccode"].ToString()))
                    result = false;
                if (String.IsNullOrEmpty(sdr["accountno"].ToString()))
                    result = false;
                //if (String.IsNullOrEmpty(sdr["accountholdername"].ToString()))
                //    result = false;
                //if (String.IsNullOrEmpty(sdr["accountType"].ToString()))
                //    result = false;
                //if (String.IsNullOrEmpty(sdr["BankAddress"].ToString()))
                //    result = false;
                else
                    result = true;
            }

            sdr.Dispose();
        }
        catch (Exception exce)
        {
            sdr.Close();
            sdr.Dispose();
            result = false;
        }
        return result;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="payoutparam"></param>
    /// <returns></returns>
    [WebMethod(EnableSession = true)]
    public int SaveRequestPayout(PayoutReq_parma payoutparam)
    {
        int result = 0;
        /* 
        0 :  there are some technical error
        1 : Record save succeessfully;
        2 : Member Not active or Invalid Member
        3 : your account balance is 0;
        4 : Your Amount is Invalid
        5 : your Request balance is more than available balance.
        6 : Incomplete your bank details. Please fill the  properly bank details.
         */
        string hostName = System.Net.Dns.GetHostName();
        string myIP = System.Net.Dns.GetHostByName(hostName).AddressList[0].ToString();
        long ctr = Convert.ToInt64(objDUT.GetScalar("Select Count(regno) from Member_master where active=1 and  regno='" + payoutparam.mRegNo + "'"));
        if (ctr <= 0)
        {
            result = 2;
            return result;
        }
        double CurrentBalance_beforePay = Convert.ToDouble(CurrentBalance.getBalance(Convert.ToInt64(payoutparam.mRegNo))) * Convert.ToDouble(HttpContext.Current.Session["CurrencyRate"]);
        double Request_Amount = Convert.ToDouble(payoutparam.Amount);
        if (Request_Amount > 99999999)
        {
            result = 4;
            return result;
        }
        if (CurrentBalance_beforePay <= 0)
        {
            result = 3;
            return result;
        }
        if (Request_Amount > CurrentBalance_beforePay)
        {
            result = 5;
            return result;
        }
        if (false == CheckBankDetails(payoutparam.mRegNo, "View"))
        {
            result = 6;
            return result;
        }
        SqlParameter[] arrParam = new SqlParameter[12];
        arrParam[0] = new SqlParameter("@mRegNo", SqlDbType.BigInt);
        arrParam[0].Value = payoutparam.mRegNo;
        arrParam[1] = new SqlParameter("@Amount", SqlDbType.Money);
        arrParam[1].Value = Convert.ToDouble(payoutparam.Amount) / Convert.ToDouble(HttpContext.Current.Session["CurrencyRate"]);
        arrParam[2] = new SqlParameter("@BankName", SqlDbType.VarChar, 100);
        arrParam[2].Value = payoutparam.BankName;
        arrParam[3] = new SqlParameter("@swiftCode", SqlDbType.VarChar, 100);
        arrParam[3].Value = "0000";
        arrParam[4] = new SqlParameter("@accountName", SqlDbType.VarChar, 100);
        arrParam[4].Value = payoutparam.accountName;
        arrParam[5] = new SqlParameter("@accountNumber", SqlDbType.VarChar, 100);
        arrParam[5].Value = payoutparam.accountNumber;
        arrParam[6] = new SqlParameter("@accountType", SqlDbType.VarChar, 100);
        arrParam[6].Value = payoutparam.accountType;
        arrParam[7] = new SqlParameter("@branch", SqlDbType.VarChar, 100);
        arrParam[7].Value = payoutparam.branch;
        arrParam[8] = new SqlParameter("@ip", SqlDbType.VarChar, 500);
        arrParam[8].Value = myIP;
        arrParam[9] = new SqlParameter("@branchcode", SqlDbType.VarChar, 50);
        arrParam[9].Value = payoutparam.branchcode; ;
        arrParam[10] = new SqlParameter("@ifsccode", SqlDbType.VarChar, 50);
        arrParam[10].Value = payoutparam.ifsccode;
        arrParam[11] = new SqlParameter("@intResult", SqlDbType.Int);
        arrParam[11].Direction = ParameterDirection.Output;
        int res = objDUT.ExecuteSqlSP(arrParam, "SP_RequestWithDrwa");
        if (res == 1)
        {
            result = 1;
        }
        if (res == 2)
        {
            result = 5;
        }
        result = res;
        return result;
    }

    public string SaveRequestPayout2(string reg)
    {

        string result = "s";
        return result;
    }

    [WebMethod]
    public List<Message> All_Message(string msgid, string caption)
    {

        List<Message> messagelist = new List<Message>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[2];
            param[0] = new SqlParameter("@msgid", SqlDbType.Int);
            param[0].Value = msgid;
            param[1] = new SqlParameter("@caption", SqlDbType.VarChar, 500);
            param[1].Value = caption;
            sdr = objDUT.GetDataReaderSP(param, "Sp_message");
            while (sdr.Read())
            {
                Message _message = new Message();
                _message.msgid = sdr["Msgid"].ToString();
                _message.caption = sdr["Caption"].ToString();
                _message.message = sdr["Message"].ToString();
                _message.status = sdr["Active"].ToString();
                messagelist.Add(_message);
            }
            sdr.Dispose();
        }
        catch (Exception exce)
        {
        }
        return messagelist;
    }

    [WebMethod]
    public string CheckCaption(string caption)
    {
        string status = "false";
        try
        {
            //string query = "Select ePassword from Member_login  where loginid='" + loginid + "' and  ePassword='" + oldpassword + "'";
            string query = "Select count(caption) from System_Message where  Caption='" + caption + "' and Active=1";
            string oldpass = Convert.ToString(objDUT.GetScalar(query));
            if (Convert.ToInt32(oldpass) > 0)
            {
                status = "false";
            }
            else
            {
                status = "true";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }



    [WebMethod]
    public List<string> GetMSg(string msgid)
    {
        sdr = null;
        List<string> msglist = new List<string>();
        try
        {
            string query = "Select Caption,Message from System_Message where  msgid ='" + msgid + "'  ";
            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                msglist.Add(sdr["Message"].ToString());
                msglist.Add(sdr["Caption"].ToString());
            }
            sdr.Close();
            sdr.Dispose();
        }
        catch (Exception excep)
        {
            sdr.Close();
            sdr.Dispose();
        }
        return msglist;
    }

    [WebMethod]
    public void UpdateMessage(string msgid, string key, string value)
    {
        Configuration myConfiguration = System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration("~/Message/");
        myConfiguration.AppSettings.Settings[key].Value = value;
        myConfiguration.Save();
        SqlParameter[] param = new SqlParameter[2];
        param[0] = new SqlParameter("@caption", SqlDbType.VarChar, 500);
        param[0].Value = key;
        param[1] = new SqlParameter("@message", SqlDbType.NVarChar, 4000);
        param[1].Value = value;
        int res = objDUT.ExecuteSqlSP(param, "sp_insertMSG");
    }
    [WebMethod]
    public List<EvoucherBank> EvoucherBank(string regno, string kid, string Reg_date_from, string Reg_date_to, string loginid, string type)
    {
        if (Reg_date_from == "")
        {
            Reg_date_from = "";
            Reg_date_to = "";
        }
        else
        {
            string[] date = DateFormat(Reg_date_from);
            Reg_date_from = date[0];
            Reg_date_to = date[1];
        }

        List<EvoucherBank> evoucherbanklist = new List<EvoucherBank>();
        try
        {
            sdr = null;
            SqlParameter[] param = new SqlParameter[8];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = regno;
            param[1] = new SqlParameter("@kid", SqlDbType.VarChar, 10);
            param[1].Value = kid;
            param[2] = new SqlParameter("@Reg_date_from", SqlDbType.VarChar, 50);
            param[2].Value = Reg_date_from;
            param[3] = new SqlParameter("@Reg_date_to", SqlDbType.VarChar, 50);
            param[3].Value = Reg_date_to;
            param[4] = new SqlParameter("@invoice_date_from", SqlDbType.VarChar, 50);
            param[4].Value = "";
            param[5] = new SqlParameter("@invoice_date_to", SqlDbType.VarChar, 50);
            param[5].Value = "";
            param[6] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[6].Value = loginid;
            param[7] = new SqlParameter("@filtertype", SqlDbType.VarChar, 500);
            param[7].Value = type;

            sdr = objDUT.GetDataReaderSP(param, "Sp_epinbank");
            while (sdr.Read())
            {
                EvoucherBank evoucherbank = new EvoucherBank();
                evoucherbank.RequestNo = sdr["RequestNo"].ToString();
                evoucherbank.KitCode = sdr["KitCode"].ToString();
                evoucherbank.KitType = sdr["KitType"].ToString();
                evoucherbank.EpinNumber = sdr["EpinNumber"].ToString();
                evoucherbank.EpinCode = sdr["EpinCode"].ToString();
                evoucherbank.Registredby = sdr["Registredby"].ToString();
                evoucherbank.RegistredDate = sdr["RegistredDate"].ToString();
                evoucherbank.InvoiceNo = sdr["InvoiceNo"].ToString();
                if (sdr["InvoiceDate"].ToString() == "" || sdr["InvoiceDate"].ToString() == null)
                {
                    evoucherbank.InvoiceDate = "";
                }
                else
                {
                    evoucherbank.InvoiceDate = Convert.ToDateTime(sdr["InvoiceDate"]).ToString("dd/MM/yyyy");
                }
                if (sdr["RegistredDate"].ToString() == "1/1/1900 12:00:00 AM" || evoucherbank.RegistredDate == "")
                {
                    evoucherbank.RegistredDate = "";
                }
                else
                {
                    evoucherbank.RegistredDate = Convert.ToDateTime(sdr["RegistredDate"]).ToString("dd/MM/yyyy");
                }

                evoucherbanklist.Add(evoucherbank);
            }
            sdr.Close();
            sdr.Dispose();

        }
        catch (Exception exce)
        {
            sdr.Close();
            sdr.Dispose();
        }
        return evoucherbanklist;
    }

    [WebMethod]
    public List<string> CountEvoucherBank(string regno)
    {
        List<string> evoucherCtr = new List<string>();

        evoucherCtr.Insert(0, Convert.ToString(objDUT.GetScalar("Select  Count(Epin_master.epinnumber)  from  SoldEpin INNER JOIN  Epin_Master ON SoldEpin.SEPinId = Epin_Master.SEPinID Inner Join  Epin_Request ON SoldEpin.Reqid = Epin_Request.reqid where   Epin_request.reqstatus=1 and Epin_request.regno='" + regno + "'")));
        evoucherCtr.Insert(1, Convert.ToString(objDUT.GetScalar("Select  Count(Epin_master.epinnumber)  from  SoldEpin INNER JOIN  Epin_Master ON SoldEpin.SEPinId = Epin_Master.SEPinID Inner Join  Epin_Request ON SoldEpin.Reqid = Epin_Request.reqid where   Epin_request.reqstatus=1 and Epin_request.regno='" + regno + "' and Epin_Master.regno = 0")));
        evoucherCtr.Insert(2, Convert.ToString(objDUT.GetScalar("Select  Count(Epin_master.epinnumber)  from  SoldEpin INNER JOIN  Epin_Master ON SoldEpin.SEPinId = Epin_Master.SEPinID Inner Join  Epin_Request ON SoldEpin.Reqid = Epin_Request.reqid where   Epin_request.reqstatus=1 and Epin_request.regno='" + regno + "' and Epin_Master.regno > 0")));
        return evoucherCtr;
    }

    [WebMethod]
    public string SendMessage(message_parma msgparam)
    {
        SqlParameter[] param = new SqlParameter[7];
        param[0] = new SqlParameter("@FromRegno", SqlDbType.BigInt, 500);
        param[0].Value = msgparam.fromRegno;
        param[1] = new SqlParameter("@loginid", SqlDbType.NVarChar, 4000);
        param[1].Value = msgparam.to;
        param[2] = new SqlParameter("@Message_type", SqlDbType.NVarChar, 4000);
        param[2].Value = msgparam.messagetype;
        param[3] = new SqlParameter("@Message_subject", SqlDbType.NVarChar, 4000);
        param[3].Value = msgparam.subject;
        param[4] = new SqlParameter("@message", SqlDbType.NVarChar, 4000);
        param[4].Value = msgparam.message;
        param[5] = new SqlParameter("@type", SqlDbType.VarChar, 100);
        param[5].Value = msgparam.QuertType;
        param[6] = new SqlParameter("@intResult", SqlDbType.Int);
        param[6].Direction = ParameterDirection.Output;

        int res = objDUT.ExecuteSqlSP(param, "sp_messageSend_Member");
        return "true";
    }


    /// <summary>
    /// Pupose : Get all Member_Message
    /// pages : mailbox.aspx
    /// </summary>
    /// <param name="PageIndex">int</param>
    /// <param name="PageSize">int</param>
    /// <returns></returns>
    [WebMethod]
    public List<MemberMail> GetMails(Message_Param message)
    {
        List<MemberMail> mailList = new List<MemberMail>();
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@PageIndex", SqlDbType.Int);
            param[0].Value = message.PageIndex;
            param[1] = new SqlParameter("@PageSize", SqlDbType.Int);
            param[1].Value = message.PageSize;
            param[2] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[2].Value = message.Loginid;
            param[3] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[3].Value = message.Regno;
            sdr = objDUT.GetDataReaderSP(param, "SP_MemberMailbox");
            while (sdr.Read())
            {
                MemberMail mail = new MemberMail();
                mail.msgID = Convert.ToInt64(sdr["MsgID"].ToString());
                mail.msgType = sdr["MsgType"].ToString();
                mail.msgSubject = sdr["MsgSubject"].ToString();
                mail.fromRegNo = sdr["LoginID"].ToString();
                mail.toRegNo = sdr["LoginID"].ToString();
                mail.msgDate = sdr["Date"].ToString();
                mail.Message = sdr["Message"].ToString();
                mail.smalltext = sdr["Smalltext"].ToString();
                mail.seen = sdr["msgseen"].ToString();
                mail.Regno = sdr["FromRegNo"].ToString();
                mail.Attachments = sdr["MsgAttachments"].ToString();
                mailList.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return mailList;
    }

    /// <summary>
    /// Pupose : Get all Member_Message
    /// pages : mailbox.aspx
    /// </summary>
    /// <param name="PageIndex">int</param>
    /// <param name="PageSize">int</param>
    /// <returns></returns>
    [WebMethod]
    public List<MemberMail> GetSentMails_Member(Message_Param message)
    {
        List<MemberMail> mailList = new List<MemberMail>();
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@PageIndex", SqlDbType.Int);
            param[0].Value = message.PageIndex;
            param[1] = new SqlParameter("@PageSize", SqlDbType.Int);
            param[1].Value = message.PageSize;
            param[2] = new SqlParameter("@loginid", SqlDbType.VarChar, 500);
            param[2].Value = message.Loginid;
            param[3] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[3].Value = message.Regno;
            sdr = objDUT.GetDataReaderSP(param, "SP_SentMemberMailbox");
            while (sdr.Read())
            {
                MemberMail mail = new MemberMail();
                mail.msgID = Convert.ToInt64(sdr["MsgID"].ToString());
                mail.msgType = sdr["MsgType"].ToString();
                mail.msgSubject = sdr["MsgSubject"].ToString();
                mail.fromRegNo = sdr["LoginID"].ToString();
                mail.toRegNo = sdr["LoginID"].ToString();
                mail.msgDate = sdr["Date"].ToString();
                mail.Message = sdr["Message"].ToString();
                mail.smalltext = sdr["Smalltext"].ToString();
                mail.seen = sdr["msgseen"].ToString();
                mail.Regno = sdr["FromRegNo"].ToString();
                mail.Attachments = sdr["MsgAttachments"].ToString();
                mailList.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return mailList;
    }


    [WebMethod]
    public string RemoveMessage(string regnostr, string type)
    {
        string res = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[3];
            param[0] = new SqlParameter("@Regno", SqlDbType.VarChar, 500);
            param[0].Value = regnostr;
            param[1] = new SqlParameter("@type", SqlDbType.VarChar, 100);
            param[1].Value = type;
            param[2] = new SqlParameter("@intresult", SqlDbType.Int);
            param[2].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_MemberMessageRemove");

            if (result > 0)
            {
                res = "true";
            }
            else
            {
                res = "false";
            }
        }
        catch (Exception exce)
        {
            res = "false";
        }
        return res;
    }



    /// <summary>
    ///  Delete sent message from member_mailbox
    /// </summary>
    /// <param name="regnostr"></param>
    /// <param name="type"></param>
    /// <returns></returns>
    [WebMethod]
    public string RemoveSentMessage(string regnostr, string type)
    {
        string res = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[3];
            param[0] = new SqlParameter("@Regno", SqlDbType.VarChar, 500);
            param[0].Value = regnostr;
            param[1] = new SqlParameter("@type", SqlDbType.VarChar, 100);
            param[1].Value = type;
            param[2] = new SqlParameter("@intresult", SqlDbType.Int);
            param[2].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_MemberSentMessageRemove");

            if (result > 0)
            {
                res = "true";
            }
            else
            {
                res = "false";
            }
        }
        catch (Exception exce)
        {
            res = "false";
        }
        return res;
    }

    [WebMethod]
    public List<AchieverList> GetAchieverList(string loginid)
    {
        long regno = objUT.GetRegistrationNo(loginid);
        List<AchieverList> achieverlist = new List<AchieverList>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 10);
        param[0].Value = regno;
        // param[0].Value = 0;
        sdr = objDUT.GetDataReaderSP(param, "sp_Achiverlist");
        while (sdr.Read())
        {
            AchieverList achiever = new AchieverList();
            achiever.regNo = sdr["regno"].ToString();
            achiever.Loginid = sdr["Username"].ToString();
            achiever.fullName = sdr["Name"].ToString();
            achiever.BoardName = sdr["boardName"].ToString();
            achiever.MatureDate = string.Format("{0:dd/MM/yyyy}", sdr["matureDate"]);
            achiever.BoardIncome = sdr["boardIncome"].ToString();
            achieverlist.Add(achiever);
        }
        sdr.Dispose();
        return achieverlist;
    }

    [WebMethod]
    public List<Board> BoardHistory(string regno)
    {

        List<Board> Boardlist = new List<Board>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
        param[0].Value = regno;
        sdr = objDUT.GetDataReaderSP(param, "Sp_boardhgistory");
        while (sdr.Read())
        {
            Board board = new Board();
            board.username = sdr["loginid"].ToString();
            board.BoardNo = sdr["boardno"].ToString();
            board.Boardtype = sdr["boardname"].ToString();
            board.PostionInBoard = sdr["bpos"].ToString();
            board.firstPoint = sdr["reflection1"].ToString();
            board.Secpoint = sdr["reflection2"].ToString();
            Boardlist.Add(board);
        }
        sdr.Dispose();
        return Boardlist;
    }

    //*********************  uploaded Date 5th Nov 14 ****************

    [WebMethod(EnableSession = true)]
    public List<AutoShip_Message> AutoSAhipPopup(string regno)
    {

        List<AutoShip_Message> AutoshipMsgList = new List<AutoShip_Message>();
        string Discriptionstatus = Utility.GetAutoshipStatus(Convert.ToInt64(regno), "Balance");

        AutoShip_Message autoshipItem = new AutoShip_Message();
        if (Discriptionstatus == "0")
        {
            autoshipItem.viewstatus = "0";
        }
        else
        {
            autoshipItem.viewstatus = "1";
        }
        double Total_amount = Convert.ToDouble(objDUT.GetScalar("Select isnull(Limits,0) from Settings where sid=31 and Caption='AutoShip'"));
        double Purchase_amount = 0.0;
        try
        {
            Purchase_amount = Convert.ToDouble(objDUT.GetScalar("Select    isnull(Sum(TotalAmount),0) as 'PurchaseAmount'   from product_Order   where Status=1 and PaymentStatus=1 and regno='" + regno + "'    group by regno ,   datepart(mm,orderdate), datepart(yy,orderdate)     having datepart(mm,orderdate) = datepart(mm,getdate()) and datepart(yy,orderdate) =  datepart(yy,getdate())"));
        }
        catch (Exception excep)
        {
            Purchase_amount = 0.0;
        }
        string img = Convert.ToString(objDUT.GetScalar("sELECT ProfileImage   FROM Member_master where regno='" + regno + "'"));
        autoshipItem.MemPic = img;
        autoshipItem.Discription = @"" + Discriptionstatus + "<br/><strong><u>Purchase Amount</u> : " + CurrencySettings._CurrencySymbol() + "&nbsp;" + string.Format("{0:f}", CurrencySettings._ConvertCurrency(Purchase_amount)) + "</strong> <br/><strong><u>Remaining  Amount</u> : " + CurrencySettings._CurrencySymbol() + " &nbsp;" + string.Format("{0:f}", CurrencySettings._ConvertCurrency(Total_amount - Purchase_amount)) + "</strong>  <br/><a href='AutoShipProductList.aspx' style='color:#ccc'>Purchase Product</a>";
        AutoshipMsgList.Add(autoshipItem);
        return AutoshipMsgList;
    }


    [WebMethod]
    public List<Product_Order> ProductOrder(ProductOrder_param orderparam)
    {
        string query = string.Empty;
        string Order_DateFrom = string.Empty;
        string Order_DateTo = string.Empty;
        if (orderparam.orderdate_F == "")
        {
            Order_DateTo = "";
            Order_DateTo = "";
        }
        else
        {
            string[] date = DateFormat(orderparam.orderdate_F);
            Order_DateFrom = date[0];
            Order_DateTo = date[1];
        }
        List<Product_Order> productorderlist = new List<Product_Order>();
        try
        {


            SqlParameter[] param = new SqlParameter[14];
            param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 100);
            param[0].Value = orderparam.regno;
            param[1] = new SqlParameter("@username", SqlDbType.VarChar, 100);
            param[1].Value = orderparam.username;
            param[2] = new SqlParameter("@name", SqlDbType.VarChar, 100);
            param[2].Value = orderparam.name;
            param[3] = new SqlParameter("@orderdate_F", SqlDbType.VarChar, 100);
            param[3].Value = Order_DateFrom;
            param[4] = new SqlParameter("@orderdate_T", SqlDbType.VarChar, 100);
            param[4].Value = Order_DateTo;
            param[5] = new SqlParameter("@orderno", SqlDbType.VarChar, 100);
            param[5].Value = orderparam.orderno;
            param[6] = new SqlParameter("@paymentdate_F", SqlDbType.VarChar, 100);
            param[6].Value = Order_DateFrom;
            param[7] = new SqlParameter("@paymentdate_T", SqlDbType.VarChar, 100);
            param[7].Value = orderparam.paymentdate_T;
            param[8] = new SqlParameter("@paymode", SqlDbType.VarChar, 100);
            param[8].Value = orderparam.paymode;
            param[9] = new SqlParameter("@totalamount_S", SqlDbType.VarChar, 100);
            param[9].Value = orderparam.totalamount_S;
            param[10] = new SqlParameter("@totalamount_E", SqlDbType.VarChar, 100);
            param[10].Value = orderparam.totalamount_E;
            param[11] = new SqlParameter("@paymentstatus", SqlDbType.VarChar, 100);
            param[11].Value = orderparam.paymentstatus;
            param[12] = new SqlParameter("@ordertype", SqlDbType.VarChar, 100);
            param[12].Value = orderparam.ordertype;
            param[13] = new SqlParameter("@orderstatus", SqlDbType.VarChar, 100);
            param[13].Value = orderparam.orderstatus;

            sdr = objDUT.GetDataReaderSP(param, "Sp_MemOrderList");
            while (sdr.Read())
            {
                Product_Order productor = new Product_Order();
                // productor.UserName = sdr["UserName"].ToString();
                //  productor.Name = sdr["Name"].ToString();
                productor.OrderNo = sdr["orderno"].ToString();
                productor.OrderDate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"].ToString());
                productor.paymentdate = string.Format("{0:dd/MM/yyyy}", sdr["paymentDate"].ToString());
                productor.paymentmode = sdr["paymentMode"].ToString();
                productor.totamt = string.Format("{0:f}", Convert.ToDouble(sdr["TotalAmount"].ToString()));
                productor.paymentStatus = sdr["PaymentStatus"].ToString();
                productor.activeclass = sdr["ActiveClass"].ToString();
                productor.productType = sdr["ProductType"].ToString();
                productor.orderstatus = sdr["OrderStatus"].ToString();
                productor.orderactiveclass = sdr["OrdreActiveClass"].ToString();
                productorderlist.Add(productor);
            }


        }
        catch (Exception excep)
        {

        }

        return productorderlist;

    }

    [WebMethod(EnableSession = true)]
    public List<AccountDetails> transferEwallet(tranewallet_param tranparam)
    {
        string msg = string.Empty;
        double amount = 0;
        decimal after_payAmt = 0;
        List<AccountDetails> listAccdt = new List<AccountDetails>();
        AccountDetails accdetails = new AccountDetails();
        int ctr = 0;
        ctr = Convert.ToInt32(objDUT.GetScalar("Select Count(regno) from Member_master where regno='" + tranparam.fromregno + "'"));

        if (Convert.ToInt32(tranparam.fromregno) == Convert.ToInt32(objDUT.GetScalar("Select regno from member_master where loginid='" + tranparam.toregno + "'")))
        {
            accdetails.status = "0";
            listAccdt.Add(accdetails);
            return listAccdt;
        }
        if (ctr == 1)
        {
            try
            {
                amount = Convert.ToDouble(tranparam.amt);
                if (amount <= 0)
                {
                    msg = "Sorry, Enter  Amount Greater than 0. !!";
                    accdetails.status = msg;
                }
                else
                {
                    SqlParameter[] arrParam = new SqlParameter[6];
                    arrParam[0] = new SqlParameter("@from_Regno", SqlDbType.BigInt);
                    arrParam[0].Value = tranparam.fromregno;
                    arrParam[1] = new SqlParameter("@to_Regno", SqlDbType.BigInt);
                    arrParam[1].Value = Convert.ToInt32(objDUT.GetScalar("Select regno from member_master where loginid='" + tranparam.toregno + "'"));
                    arrParam[2] = new SqlParameter("@amount", SqlDbType.Money);
                    arrParam[2].Value = Convert.ToDouble(tranparam.amt) / Convert.ToDouble(HttpContext.Current.Session["CurrencyRate"].ToString());
                    arrParam[3] = new SqlParameter("@ewalletType", SqlDbType.VarChar, 100);
                    arrParam[3].Value = "";
                    arrParam[4] = new SqlParameter("@remark", SqlDbType.VarChar, 1000);
                    arrParam[4].Value = "";

                    arrParam[5] = new SqlParameter("@intResult", SqlDbType.Int);
                    arrParam[5].Direction = ParameterDirection.Output;

                    //************ Save Details in Database
                    int intResult = objDUT.ExecuteSqlSP(arrParam, "[sp_transferewallet]");
                    if (intResult == 1)
                    {
                        //after_payAmt = CurrentBalance.getBalance(Convert.ToInt64(tranparam.fromregno));
                        //accdetails.after_payamt = string.Format("{0:f}", after_payAmt);
                        //accdetails.CurrentBalance = string.Format("{0:f}", after_payAmt);
                        //accdetails.transfer_amt = string.Format("{0:f}", amount / Convert.ToDouble(HttpContext.Current.Session["A_CurrencyRate"].ToString()));
                        //accdetails.Regno = tranparam.fromregno;
                        accdetails.status = "1";
                    }
                    else
                    {
                        msg = "Sorry, Your amount is grater  than current balance. !!";
                        accdetails.status = msg;
                    }
                }
            }
            catch (Exception exce)
            {
                msg = "Sorry, Invalid Amount. !!";
                accdetails.status = msg;
            }

        }
        else
        {
            msg = "Sorry, Wrong Distributor ID. OR User Name !!";
            accdetails.status = msg;
        }
        listAccdt.Add(accdetails);
        return listAccdt;
    }

    [WebMethod]
    public List<Activatondetails> getActivationDetils(string Loginid)
    {
        sdr = null;
        string st = null;
        List<Activatondetails> Requestlist = new List<Activatondetails>();
        try
        {
            st = "select mp.order_no,sponsorname=mms.loginid,m.loginid,memstatus=case when m.confpayno=1 then  'Active' else 'Inactive' end,  doc=convert(NVARCHAR, m.doc, 103),epin.bankname,epin.refno,epin.paymode,Rdate=convert(NVARCHAR, rt.Rdate, 103),k.kitcode,kitprice =cast(k.kitprice as decimal(10,2)),k.kitPv,k.kitbv,k.kitdesc,k.kitproducts,rt.paymentmode,rt.* from member_master m,member_master mms, kit_master k, recharge_transaction rt, epin_request epin,member_product mp where k.kid=rt.Rkid and m.regno=rt.regno and rt.regno=epin.regno and isnull(epin.requesttype,0)=1 and rt.Rkid>1 and m.introregno=mms.regno and mp.regno=m.regno and m.loginid='" + Loginid + "'";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Activatondetails listv = new Activatondetails();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.Loginid = sdr["loginid"].ToString();
                listv.sponsername = sdr["sponsorname"].ToString();
                listv.Active = sdr["memstatus"].ToString();
                listv.invoiceno = Convert.ToInt32(sdr["order_no"].ToString());
                listv.kitcode = sdr["kitcode"].ToString();
                listv.kitPrice = sdr["kitprice"].ToString();
                listv.kitproduct = sdr["kitproducts"].ToString();
                listv.kitPV = sdr["kitpv"].ToString();
                listv.DOA = sdr["doc"].ToString();
                listv.kitDesc = sdr["kitdesc"].ToString();
                listv.MOP = sdr["paymode"].ToString();
                listv.Reqdate = sdr["Rdate"].ToString();
                listv.RefNo = sdr["refno"].ToString();
                listv.BankName = sdr["bankname"].ToString();
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    /// Purpose : this funcation use for show Activation Details1
    /// Pages : ActivationRequest.aspx,
    /// </summary>
    [WebMethod]
    public List<Activatondetails1> getActivationDetils1(string Loginid)
    {
        sdr = null;
        string st = null;
        List<Activatondetails1> Requestlist = new List<Activatondetails1>();
        try
        {
            //  st = "select mp.*,mm.loginid,mm.doc,memstatus=case when mm.confpayno=1 then 'Active' else 'Deactive' end ,rt.paymentmode,rt.rdate,sponsorname=(select loginid from member_master where regno=mm.introregno),km.kitcode,km.kitprice,km.kitpv,km.kitbv from member_product mp,member_master mm,kit_master km,recharge_transaction rt where mp.regno=mm.regno and mp.kid=km.kid and mp.rid=rt.rid and mm.loginid='" + Loginid + "'";
            // st = "select mm.*,memstatus=case when ep.requesttype=0 and ep.reqstatus=0 then 'Inactive' else 'Active' end ,sponsorname=(select loginid from member_master where regno=mm.introregno),km.kitcode,ep.kid from member_master mm,epin_request ep,kit_master km where mm.regno=ep.regno and km.kid=ep.kid and km.kid=1 and km.kittype=0  and ep.reqstatus=0 and ep.requesttype=0 and mm.loginid='"+Loginid+"'";
            st = "select mm.regno,mm.loginid,sponsorname=(select loginid from member_master where regno=mm.introregno),mm.chk_dft_ref_no,memstatus=case when mm.confpayno=1 then 'Confirm' else 'Pending' end,pakagename='KYC',km.kitcode,mm.regdate,km.kitdesc from member_master mm,kit_master km where mm.kid=km.kid and mm.loginid='" + Loginid + "' ";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Activatondetails1 listv = new Activatondetails1();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.Loginid = sdr["loginid"].ToString();
                // listv.fullName = sdr["name"].ToString();
                listv.sponsername = sdr["sponsorname"].ToString();
                listv.kitcode = sdr["kitcode"].ToString();
                listv.Active = sdr["memstatus"].ToString();

                listv.pin = sdr["chk_dft_ref_no"].ToString();
                listv.DOR = string.Format("{0:dd/MM/yyyy}", sdr["regdate"]);
                listv.description = sdr["kitdesc"].ToString();

                // listv.Reqdate = Convert.ToDateTime(sdr["rdate"]).ToString("dd/MM/yyyy");


                Requestlist.Add(listv);
            }
            sdr.Dispose();

        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    /// <summary>
    /// Purpose : this funcation use for show Activation Details1
    /// Pages : ActivationRequest.aspx,
    /// </summary>
    [WebMethod]
    public List<Activatondetails2> getActivationDetils2(string Loginid)
    {
        sdr = null;
        string st = null;
        List<Activatondetails2> Requestlist2 = new List<Activatondetails2>();
        try
        {

            //  st = "select mm.regno,mm.loginid,sponsorname=(select loginid from member_master where regno=mm.introregno),mm.chk_dft_ref_no,memstatus=case when mm.confpayno=1 then 'Confirm' else 'Pending' end,pakagename='KYC',km.kitcode,mm.regdate,km.kitdesc from member_master mm,kit_master km where mm.kid=km.kid and mm.loginid='" + Loginid + "' ";
            st = "select m.regno, m.loginid,k.kitcode,k.kitproducts,k.kitdesc,k.kitprice,k.kitpv,er.reqdate,memstatus=case when er.reqstatus=1 then 'Confirm' else 'Pending' end  from epin_request er,kit_master k,member_master m where k.kid=er.kid and m.regno=er.regno and er.reqstatus=0 and er.requesttype=1 and m.loginid='" + Loginid + "' ";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                Activatondetails2 listv = new Activatondetails2();
                listv.regno1 = Convert.ToInt32(sdr["regno"].ToString());
                listv.Loginid1 = sdr["loginid"].ToString();
                listv.kitcode1 = sdr["kitcode"].ToString();
                listv.Active1 = sdr["memstatus"].ToString();
                listv.Reqdate1 = string.Format("{0:dd/MM/yyyy}", sdr["reqdate"]);
                listv.kitprice1 = sdr["kitprice"].ToString();
                listv.kitpv1 = sdr["kitpv"].ToString();
                listv.kitproducts1 = sdr["kitproducts"].ToString();
                listv.description1 = sdr["kitdesc"].ToString();
                Requestlist2.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist2;
    }

    [WebMethod]
    public string Ecodevalidornot(string epinnumber, string epincode)
    {
        string status = "false";
        try
        {
            string query = "Select Epincode from Epin_master where Epincode = '" + epincode + "' and epinnumber ='" + epinnumber + "' and  eactive=1 ";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod]
    public string CheckPancard(string username)
    {
        string status = "false";
        try
        {
            if (username != "")
            {
                string query = "Select  count(mempan) from Member_master where mempan='" + username + "'";
                int loginid = Convert.ToInt32(objDUT.GetScalar(query).ToString());
                if (loginid> 3)
                {
                    status = "false";
                }
                else
                {
                    status = "true";
                }
            }
            else
            {
                status = "true";
            }
        }
        catch (Exception excep)
        {
            status = "true";
        }

        return status;
    }

    [WebMethod]
    public List<Questions> GetQuestionList(int QID)
    {
        sdr = null;
        string Query = null;
        List<Questions> questionlist = new List<Questions>();
        if (QID <= 0)
        {
            Query = "Select * from Security_Question Where Qactive=1";
        }
        else
        {
            Query = "select qid,question from Security_Question Where qid='" + QID + "' Qactive=1";
        }

        sdr = objDUT.GetDataReader(Query);
        while (sdr.Read())
        {
            Questions QItem = new Questions();
            QItem.qid = Convert.ToInt32(sdr["qid"].ToString());
            QItem.question = sdr["question"].ToString();

            questionlist.Add(QItem);
        }
        return questionlist;
    }
    [WebMethod]
    public List<PayoutDeatils> getPayoutIncomeMWise_weekly(string payid)
    {
        sdr = null;
        int p = Convert.ToInt32(objDUT.GetScalar("select isnull(max(sPayID),0)  from payout_settlement").ToString());
        List<PayoutDeatils> PayoutList = new List<PayoutDeatils>();

        DataTable dsde = new DataTable();
        DataTable dtC = new DataTable();
        dtC.Columns.Add(new DataColumn("regno", typeof(string)));
        dtC.Columns.Add(new DataColumn("payid", typeof(string)));
        dtC.Columns.Add(new DataColumn("fullName", typeof(string)));
        dtC.Columns.Add(new DataColumn("Loginid", typeof(string)));
        dtC.Columns.Add(new DataColumn("llpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("rpv", typeof(string)));

        dtC.Columns.Add(new DataColumn("CFlpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("CFRpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("paidpv", typeof(string)));
        dtC.Columns.Add(new DataColumn("PVIncome", typeof(string)));
        dtC.Columns.Add(new DataColumn("singleLegIncome", typeof(string)));
        dtC.Columns.Add(new DataColumn("singlelegDed", typeof(string)));
        dtC.Columns.Add(new DataColumn("totalincome", typeof(string)));

        for (int i = p; i >= 1; i--)
        {
            sdr = null;
            int pFrom = Convert.ToInt32(objDUT.GetScalar("select sPayFromPayid  from payout_settlement where sPayID=" + i + "").ToString());
            int pTo = Convert.ToInt32(objDUT.GetScalar("select sPayToPayid  from payout_settlement where sPayID=" + i + "").ToString());
            string st = null;



            if (payid != "")
            {
                st = "select mp.regno, llpv=isnull(sum(mp.lpv),0), rpv=isnull(sum(mp.rpv),0), paidpv=isnull(sum(mp.paidpv),0), pvincome=isnull(sum(mp.PVIncome),0), singleLegIncome=isnull(sum(mp.singleLegIncome),0), singleLegdeduction=isnull(sum(mp.singleLegdeduction),0),LevelIncome=isnull(sum(mp.levelIncome),0), totalincome=(isnull(sum(mp.totalincome),0)-isnull(sum(mp.singleLegdeduction),0)) from MEMBER_PAYOUT mp, member_master mm where mp.regno=mm.regno and mm.loginid='" + payid + "' and mp.payid>='" + pFrom + "' and mp.payid<='" + pTo + "' group by mp.regno having sum(mp.totalIncome)>0 order by mp.regno";

            }
            DataTable dt = objDUT.GetDataTable(st);


            DataRow drC = dtC.NewRow();
            foreach (DataRow row in dt.Rows)
            {


                drC[0] = Convert.ToInt32(row["regno"].ToString());
                //   Payout.payid 
                drC[1] = objDUT.GetScalar("select (cast(spayid as varchar)+'->'+cast(convert(date,spaydate,103) as varchar))  from payout_settlement where spayid=" + i + "").ToString(); //row["payid"].ToString();

                DataTable dtDetails = objDUT.GetDataTable("select (title+' '+fname+' '+isnull(lname,'')) as 'fullName', loginid from member_master where regno=" + row["regNo"] + "");

                // 
                drC[2] = dtDetails.Rows[0]["fullname"].ToString();
                // 
                drC[3] = dtDetails.Rows[0]["loginid"].ToString();

                // 
                drC[4] = string.Format("{0:f}", row["llpv"]);
                // 
                drC[5] = string.Format("{0:f}", string.Format("{0:f}", row["rpv"]));

                // double cflpv =
                drC[6] = string.Format("{0:f}", Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(lpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + row["regno"])));
                //  double cfrpv = 
                drC[7] = string.Format("{0:f}", Convert.ToDouble(objDUT.GetScalar("select (isnull(sum(rpv),0)-((isnull(sum(paidpv),0)+ isnull(sum(flushpv),0)))) from member_payout where payid<" + pFrom + " and regno=" + row["regno"])));
                //  = string.Format("{0:f}", cflpv);
                //Payout.CFRpv = string.Format("{0:f}", cfrpv);

                //   
                drC[8] = string.Format("{0:f}", row["paidpv"]);
                //   
                drC[9] = string.Format("{0:f}", row["PVIncome"]);

                //  
                drC[10] = string.Format("{0:f}", row["singleLegIncome"]);
                //  = 
                drC[11] = string.Format("{0:f}", row["singleLegdeduction"]);
                //  = 
                drC[12] = string.Format("{0:f}", row["totalincome"]);


                dtDetails.Dispose();
            }
            if (dt.Rows.Count > 0)
            {
                dtC.Rows.Add(drC);
            }



        }

        foreach (DataRow rows in dtC.Rows)
        {
            PayoutDeatils Payout = new PayoutDeatils();
            Payout.regno = Convert.ToInt32(rows["regno"].ToString());
            Payout.payid = rows["payid"].ToString();
            Payout.fullName = rows["fullName"].ToString();
            Payout.Loginid = rows["Loginid"].ToString();
            Payout.llpv = rows["llpv"].ToString();
            Payout.rpv = rows["rpv"].ToString();
            Payout.CFlpv = rows["CFlpv"].ToString();
            Payout.CFRpv = rows["CFRpv"].ToString();
            Payout.paidpv = rows["paidpv"].ToString();
            Payout.PVIncome = rows["PVIncome"].ToString();
            Payout.singleLegIncome = rows["singleLegIncome"].ToString();
            Payout.singlelegDed = rows["singlelegDed"].ToString();
            Payout.totalincome = rows["totalincome"].ToString();
            PayoutList.Add(Payout);
        }
        return PayoutList;
    }


   
    [WebMethod(EnableSession = true)]
    public string GetPassword(string loginid, string Mtype)
    {
        string CompanyName = "", u = "", p = "", host = "", comlogo = "", BodyMessage = "", Subject = "", Headermessage = "";
        string result = "";
        CompanySettings comSettings;
        SendMail objSent = new SendMail();       
        comSettings = Session["CompanySettings"] as CompanySettings;
        DataTable dtComailsetting = new DataTable();
        dtComailsetting = objDUT.GetDataTable("select * from company_mail_settings where caption='Forget Password' and active=1");
        if (dtComailsetting.Rows.Count > 0)
        {
            CompanyName = comSettings.CompanyName;
            u = dtComailsetting.Rows[0]["SenderEmailID"].ToString();
            p = dtComailsetting.Rows[0]["SenderPassword"].ToString();
            comlogo = comSettings.Company_Logo;
            host = dtComailsetting.Rows[0]["Sender_SMTP"].ToString();
            BodyMessage = dtComailsetting.Rows[0]["Body_Message"].ToString();
            Subject = dtComailsetting.Rows[0]["Subject"].ToString();
            Headermessage = dtComailsetting.Rows[0]["Header_message"].ToString();
        }
        else
        {
            u = comSettings.Sender_Email;
            p = comSettings.Sender_Email_Password;
            host = comSettings.Sender_Email_SMTP;
            comlogo = comSettings.Company_Logo;
            CompanyName = comSettings.CompanyName;
        }
        SqlParameter[] param = new SqlParameter[3];
        param[0] = new SqlParameter("@username", SqlDbType.VarChar, 200);
        param[0].Value = loginid.Trim();

        //param[1] = new SqlParameter("@Mtype", SqlDbType.VarChar, 100);
        //param[1].Value = Mtype;
        param[1] = new SqlParameter("@type", SqlDbType.VarChar, 100);
        param[1].Value = "RequestforPassword";
        param[2] = new SqlParameter("@intResult", SqlDbType.Int);
        param[2].Direction = ParameterDirection.Output;
        int res = objDUT.ExecuteSqlSP(param, "SP_forget_mail");
        if (res == 0)
        {
            result = "0";
        }
        if (res == 1)
        {
            if (Mtype != "Merchant")
            {

                string name, password, emailid;
                DataTable dt = objDUT.GetDataTable("select isnull(mm.title,'')+' '+fname+' '+ isnull(mm.lname,'') as name,mm.emailid,ml.password from member_master mm inner join member_login ml on ml.regno=mm.regno where (mm.loginid='" + loginid + "' OR mm.emailid='" + loginid + "')");
                if (dt.Rows.Count > 0)
                {
                    name = dt.Rows[0]["name"].ToString();
                    password = dt.Rows[0]["Password"].ToString();
                    emailid = dt.Rows[0]["emailid"].ToString();
                    result = "1";
                    SendMail.EmailForget(emailid, "", name, loginid, password, "", u, p, host, comlogo, CompanyName, BodyMessage, Subject, Headermessage);
                }
            }
            else
            {
                string name, password, emailid;
                DataTable dt = objDUT.GetDataTable("select mm.name as name,mm.loginid,mm.pass from merchant_master mm where mm.loginid='" + loginid + "'");
                if (dt.Rows.Count > 0)
                {
                    name = dt.Rows[0]["name"].ToString();
                    password = dt.Rows[0]["pass"].ToString();
                    emailid = dt.Rows[0]["loginid"].ToString();
                    result = "1";
                    //SendMail.Email(emailid, "", name, loginid, password, "");
                }
            }


        }
        if (res == 3)
        {
            result = "3";
        }
        return result;
    }
    //[WebMethod]
    //public string GetPassword(string loginid, string Mtype)
    //{
    //    string result = "";
    //    SqlParameter[] param = new SqlParameter[4];
    //    param[0] = new SqlParameter("@username", SqlDbType.VarChar, 200);
    //    param[0].Value = loginid.Trim();

    //    param[1] = new SqlParameter("@Mtype", SqlDbType.VarChar, 100);
    //    param[1].Value = Mtype;
    //    param[2] = new SqlParameter("@type", SqlDbType.VarChar, 100);
    //    param[2].Value = "RequestforPassword";
    //    param[3] = new SqlParameter("@intResult", SqlDbType.Int);
    //    param[3].Direction = ParameterDirection.Output;
    //    int res = objDUT.ExecuteSqlSP(param, "SP_forget_mail");
    //    if (res == 0)
    //    {
    //        result = "0";
    //    }
    //    if (res == 1)
    //    {
    //        if (Mtype != "Merchant")
    //        {

    //            string name, password, emailid;
    //            DataTable dt = objDUT.GetDataTable("select isnull(mm.title,'')+' '+fname+' '+ isnull(mm.lname,'') as name,mm.emailid,ml.password from member_master mm inner join member_login ml on ml.regno=mm.regno where (mm.loginid='" + loginid + "' OR mm.emailid='" + loginid + "')");
    //            if (dt.Rows.Count > 0)
    //            {
    //                name = dt.Rows[0]["name"].ToString();
    //                password = dt.Rows[0]["Password"].ToString();
    //                emailid = dt.Rows[0]["emailid"].ToString();
    //                result = "1";
    //                SendMail.Email(emailid, "", name, loginid, password, "");
    //            }
    //        }
    //        else
    //        {
    //            string name, password, emailid;
    //            DataTable dt = objDUT.GetDataTable("select mm.name as name,mm.loginid,mm.pass from merchant_master mm where mm.loginid='" + loginid + "'");
    //            if (dt.Rows.Count > 0)
    //            {
    //                name = dt.Rows[0]["name"].ToString();
    //                password = dt.Rows[0]["pass"].ToString();
    //                emailid = dt.Rows[0]["loginid"].ToString();
    //                result = "1";
    //                SendMail.Email(emailid, "", name, loginid, password, "");
    //            }
    //        }


    //    }
    //    if (res == 3)
    //    {
    //        result = "3";
    //    }
    //    return result;
    //}

    /// <summary>
    /// Purpose : this function use for view merchant Profile  or Edit
    /// Pages : ProfileEdit.aspx
    /// </summary>
    /// <param name="Username">String</param>
    /// <returns>List Type Merchant_Details </returns>
    [WebMethod]
    public List<Merchant_Details> ViewProfile_Merchant(string MerchantId)
    {
        List<Merchant_Details> viewprofile = new List<Merchant_Details>();
        Merchant_Details memberpro = new Merchant_Details();
        sdr = null;
        if (Convert.ToInt32(MerchantId) <= 0)
        {
            memberpro.ResultStatus = 2; // Null Username
        }
        else
        {
            try
            {
                long ctr = Convert.ToInt64(objDUT.GetScalar("Select Count(mid) from Merchant_master where mid='" + MerchantId + "'"));
                if (ctr > 0)
                {
                    long active = Convert.ToInt64(objDUT.GetScalar("Select  isnull(active,0) from Merchant_master where mid='" + MerchantId + "'"));
                    if (active > 0)
                    {
                        try
                        {
                            SqlParameter[] param = new SqlParameter[1];
                            param[0] = new SqlParameter("@mid", SqlDbType.Int);
                            param[0].Value = Convert.ToInt32(MerchantId);
                            DataTable tb = objDUT.GetDataTableSP(param, "sp_GetMerchantDetails");
                            if (tb.Rows.Count > 0)
                            {
                                memberpro.mid = Convert.ToInt32(tb.Rows[0]["mid"].ToString());
                                memberpro.name = tb.Rows[0]["name"].ToString();
                                memberpro.emailid = tb.Rows[0]["emailid"].ToString();
                                memberpro.BusinessName = tb.Rows[0]["business"].ToString();
                                memberpro.active = Convert.ToInt32(tb.Rows[0]["active"].ToString());
                                memberpro.City = tb.Rows[0]["City"].ToString();
                                memberpro.Country = tb.Rows[0]["Country"].ToString();
                                memberpro.Comment = tb.Rows[0]["Comment"].ToString();
                                memberpro.Activation_date = tb.Rows[0]["keywords"].ToString();
                                memberpro.companyname = tb.Rows[0]["company_name"].ToString();
                                memberpro.State = tb.Rows[0]["State"].ToString();
                                memberpro.Address = tb.Rows[0]["Address"].ToString();
                                memberpro.Loginid = tb.Rows[0]["loginid"].ToString();
                                memberpro.Pincode = tb.Rows[0]["pincode"].ToString();
                                memberpro.status = tb.Rows[0]["Blockstatus"].ToString();
                                memberpro.mobile = tb.Rows[0]["mobile"].ToString();
                                memberpro.CashBackdiscount = Convert.ToDecimal(tb.Rows[0]["cashback_discount"].ToString());
                                memberpro.Rewardpoints = Convert.ToDecimal(tb.Rows[0]["rewrd_points"].ToString());
                                memberpro.ResultStatus = 6;
                                viewprofile.Add(memberpro);
                            }
                            else
                            {
                                memberpro.mid = 0;
                                memberpro.name = "";
                                memberpro.emailid = "";
                                memberpro.BusinessName = "";
                                memberpro.active = 0;
                                memberpro.City = "";
                                memberpro.Country = "";
                                memberpro.State = "";
                                memberpro.status = "";
                                memberpro.mobile = "";
                                memberpro.CashBackdiscount = 0;
                                memberpro.Rewardpoints = 0;
                                memberpro.ResultStatus = 1;
                            }

                        }
                        catch (Exception excep)
                        {
                        }
                    }
                    else
                    {
                        memberpro.ResultStatus = 5;  // Member Deactive
                    }
                }
                else
                {
                    memberpro.ResultStatus = 4;  // Invalid Username
                }
            }
            catch (Exception Excep)
            {
                memberpro.ResultStatus = 3;  // Invalid Username
            }
        }
        return viewprofile;
    }
    /// <summary>
    /// this method is created for updateing merchant profile
    /// date:27 july 2015
    /// </summary>
    /// <param name="mid"></param>
    /// <param name="Merchant_Id"></param>
    /// <param name="Merchant_Name"></param>
    /// <param name="Mobile"></param>
    /// <param name="Comment"></param>
    /// <param name="Email"></param>
    /// <param name="Address"></param>
    /// <param name="Country"></param>
    /// <param name="City"></param>
    /// <param name="State"></param>
    /// <param name="Businessname"></param>
    /// <param name="Pincode"></param>
    /// <param name="Cashback"></param>
    /// <param name="Loginid"></param>
    /// <param name="Reward_points"></param>
    /// <returns> int </returns>
    [WebMethod]
    public int UpdateMerchantProfile(string mid, string Merchant_Id, string Merchant_Name, string Mobile, string Comment, string keywords, string Email, string Address, string Country, string City, string State, string Businessname, string Pincode, string Cashback, string Loginid, string Reward_points)
    {
        int ResultStatus = 0;
        //try
        //{
        int merchantid = Convert.ToInt32(objDUT.GetScalar("Select mid from Merchant_master where mid='" + Convert.ToInt32(mid) + "'"));
        if (merchantid != 0)
        {
            SqlParameter[] param = new SqlParameter[19];
            param[0] = new SqlParameter("@mid", SqlDbType.BigInt);
            param[0].Value = mid;
            param[1] = new SqlParameter("@merchantid", SqlDbType.VarChar, 100);
            param[1].Value = Merchant_Id;
            param[2] = new SqlParameter("@businessname", SqlDbType.VarChar, 100);
            param[2].Value = Businessname;
            param[3] = new SqlParameter("@cashbackdiscount", SqlDbType.Money);
            param[3].Value = Convert.ToDouble(Cashback);
            param[4] = new SqlParameter("@rewardpoints", SqlDbType.Money);
            param[4].Value = Convert.ToDouble(Reward_points);
            param[5] = new SqlParameter("@name", SqlDbType.VarChar, 100);
            param[5].Value = Merchant_Name;
            param[6] = new SqlParameter("@address", SqlDbType.VarChar, 100);
            param[6].Value = Address;
            param[7] = new SqlParameter("@country", SqlDbType.VarChar, 100);
            param[7].Value = Country;
            param[8] = new SqlParameter("@state1", SqlDbType.VarChar, 100);
            param[8].Value = State;
            param[9] = new SqlParameter("@city", SqlDbType.VarChar, 100);
            param[9].Value = City;
            param[10] = new SqlParameter("@pincode", SqlDbType.VarChar, 100);
            param[10].Value = Pincode;
            param[11] = new SqlParameter("@emailid", SqlDbType.VarChar, 100);
            param[11].Value = Email;
            param[12] = new SqlParameter("@mobile", SqlDbType.VarChar, 100);
            param[12].Value = Mobile;
            param[13] = new SqlParameter("@coment", SqlDbType.VarChar, 100);
            param[13].Value = Comment;
            param[14] = new SqlParameter("@keywords", SqlDbType.VarChar, 1000);
            param[14].Value = keywords;
            param[15] = new SqlParameter("@pass", SqlDbType.VarChar, 50);
            param[15].Value = "";
            param[16] = new SqlParameter("@active", SqlDbType.Int);
            param[16].Value = 1;
            param[17] = new SqlParameter("@querytype", SqlDbType.VarChar, 100);
            param[17].Value = "Update";
            param[18] = new SqlParameter("@intResult", SqlDbType.Int);
            param[18].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_InsertUpdate_Merchant");
            if (result > 0)
            {
                ResultStatus = 1;
            }
            else
            {
                ResultStatus = 0;
            }
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }
    [WebMethod]
    public int UpdateCustomerOrder(string MID, string ideacardno, string purchaseamt, string msp, string redeem, string payment, string balance, string invoice)
    {
        int ResultStatus = 0;
        //try
        //{
        int merchantid = Convert.ToInt32(objDUT.GetScalar("Select Count(mid) from Merchant_master where mid='" + Convert.ToInt32(MID) + "'"));
        if (merchantid != 0)
        {
            SqlParameter[] param = new SqlParameter[9];
            param[0] = new SqlParameter("@merchantID", SqlDbType.BigInt);
            param[0].Value = MID;
            param[1] = new SqlParameter("@ideacardNo", SqlDbType.VarChar, 100);
            param[1].Value = ideacardno;
            param[2] = new SqlParameter("@totalamount", SqlDbType.VarChar, 100);
            param[2].Value = purchaseamt;
            param[3] = new SqlParameter("@MSP", SqlDbType.Money);
            param[3].Value = Convert.ToDouble(msp);
            param[4] = new SqlParameter("@redeem", SqlDbType.Money);
            param[4].Value = Convert.ToDouble(redeem);
            param[5] = new SqlParameter("@paymnetmode", SqlDbType.VarChar, 100);
            param[5].Value = payment;
            param[6] = new SqlParameter("@balance", SqlDbType.VarChar, 100);
            param[6].Value = balance;
            param[7] = new SqlParameter("@invoiceno", SqlDbType.VarChar, 100);
            param[7].Value = invoice;
            param[8] = new SqlParameter("@intResult", SqlDbType.Int);
            param[8].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_UpdateCustomerOrder");
            if (result > 0)
            {
                ResultStatus = 1;
            }
            else
            {
                ResultStatus = 0;
            }
        }
        //}
        //catch (Exception excep)
        //{
        //    ResultStatus = "0";
        //}
        return ResultStatus;
    }



    [WebMethod]
    public int checkLoginid(string loginid)
    {
        sdr = null;
        string Query = null;
        int avaliable = 0;
        if (loginid != "")
        {
            Query = "Select 1 from  merchant_master where loginid='" + loginid + "'";
            avaliable = Convert.ToInt32(objDUT.GetScalar(Query));
            if (avaliable == 1)
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        else
        {
            return 2;
        }
    }



    [WebMethod]
    public List<YearAndMonth> getCutoffMonth(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select payid,FORMAT(dateadd(m,-1,payto), 'dd-MMMM') as date from Payout where payid >=1";
            if (YearString != "0")
            {
                StrQuery = StrQuery + " and DATEPART(YYYY,payto)='" + YearString + "' ";
            }
            StrQuery = StrQuery + "Order by payid";
            sdr = objDUT.GetDataReader(StrQuery);
            while (sdr.Read())
            {
                YearAndMonth listv = new YearAndMonth();
                listv.Year = sdr["payid"].ToString();
                listv.MonthID = sdr["payid"].ToString();
                YearMonthlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getMywalletRewardSummary(string loginid)
    {
        sdr = null;
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            ProductOrderToday listv = new ProductOrderToday();
            listv.Icon = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(worthvalue),0) from  gift_coupon where isactive=1 and redeemBy='" + loginid + "'"));
            listv.LRP = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as W5GP  from  member_account where transtype='MBP' and regno=" + loginid + " and trstatus=1 and isnull(wallettype,'RP')='RP'"));
            listv.GBP = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as W5GP  from  member_account where transtype='5GPINCOME' and regno= " + loginid + " and trstatus=1 and isnull(wallettype,'RP')='RP'"));
            listv.CashBack = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as cashback  from  member_account where transtype='CASHBACK' and regno= " + loginid + " and trstatus=1  and isnull(wallettype,'RP')='RP'"));
            listv.TotavWallet = string.Format("{0:f}", objDUT.GetScalar("select  (isnull(sum(credit),0.00)-isnull(sum(debit),0.00)) as Totalwallet  from  member_account where regno=  " + loginid + " and trstatus=1  and isnull(wallettype,'RP')='RP'"));
            listv.orderno = string.Format("{0:f}", objDUT.GetScalar("select  isnull(sum(credit),0.00) as W5GP  from  member_account where transtype='levelIncomeStar' and regno=" + loginid + " and trstatus=1  and isnull(wallettype,'RP')='RP'"));
            listv.gp1 = string.Format("{0:f}", objDUT.GetScalar("select isnull(limits,0) from master_settings where caption='PromoterFee'  and active=1"));
            listv.gp2 = string.Format("{0:f}", objDUT.GetScalar("select isnull(paidpromoterfee,'0.00') from  member_master where regno='" + loginid + "'"));

            listv.gp3 = objDUT.GetScalar("select  max(loginid) as starid  from member_cycle_master where regno='" + loginid + "'").ToString();
            listv.gp4 = objDUT.GetScalar("select  isnull(paidpromoterfee,0.00) as paidpromoterfee  from member_master where regno='" + loginid + "'").ToString();
            listv.gp5 = objDUT.GetScalar("select  isnull(targetpromoterfee,0.00) as targetpromoterfee  from member_master where regno='" + loginid + "'").ToString();

            Requestlist.Add(listv);
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public List<ProductOrderToday> getGreditRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 4 isnull( credit ,0.00) as credit, transDate, substring(remark,1,10) as remark, remark as remarks  from  member_account where   regno=" + loginid + " and trstatus=1 and credit>0 and isnull(wallettype,'RP')='RP' order by acid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["credit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["transDate"]);
                listv.orderdate = sdr["remark"].ToString();
                listv.Username = sdr["remarks"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getDebitRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5  isnull(debit ,0.00) as debit, transDate,substring(remark,1,10) as remark, remark as remarks   from  member_account where   regno=" + loginid + " and trstatus=1 and debit>0 and isnull(wallettype,'RP')='RP' order by acid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["debit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["transDate"]);
                listv.orderdate = sdr["remark"].ToString();
                listv.Username = sdr["remarks"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }




    [WebMethod]
    public List<ProductOrderToday> getCAHSBACKRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5 mpoid,  isnull( CASHBACK ,0.00) as credit, invno,cast(isnull( invdate,'1990-01-01') as date) invdate from Product_order where regno=" + loginid + " and  status=1 and  invno is not null order by mpoid desc ";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["credit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["invdate"]);
                listv.Invoice = sdr["invno"].ToString();
                listv.mpoid = Convert.ToInt32(sdr["mpoid"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod(EnableSession=true)]
    public List<payoutdetails> getStatement(string regno, string fromdate, string todate, string transtype, string transaction, string wallettype)
    {
        if( regno == "")
        {
             regno = Session["MaxReg"].ToString();
        }
       
        sdr = null;
        string st = null;
        List<payoutdetails> Requestlist  = new List<payoutdetails>();
        try
        {
            if (regno != "" && transtype == "undefined")
            {
                st = "select regno,  convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5) ";
            }
            else if (regno != "" && transtype != "undefined")
            {
                if (regno != "" && transtype == "CASHBACK" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transtype + "'  and trstatus not in(3,5)";

                } if (regno != "" && transtype == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0   and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0  and trstatus not in(3,5)";
                }

                if (regno != "" && transtype == "" && transaction != "-1" && transaction != "c" && transaction != "d" && transaction != "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transaction + "' and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction == "-1" && wallettype != "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5)";
                }
                if (regno != "" && transtype == "" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + "  and trstatus not in(3,5)";
                }

            }


            //else
            //{
            //    st = "select regno,transdate,remark,debit,credit from member_account";
            //}


            //if (wallettype != "-1")
            //{
            //    st += " and  isnull(wallettype,'RP')='" + wallettype + "' ";
            //}
            st += " and  wallettype =1  ";
            //}
            if (transaction != "-1")
            {
                st += " and  transType ='" + transaction + "' ";
            }
            if (fromdate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime) >='" + dateformat(fromdate) + "'";
            }
            if (todate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime) <='" + dateformat(todate) + "'";
            }
            st += " order by acid desc";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                payoutdetails listv = new payoutdetails();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.name = sdr["remark"].ToString();
                listv.batchconfdate = sdr["transdate"].ToString();
                listv.netpayable = string.Format("{0:f}", sdr["debit"]);
                listv.totalamont = string.Format("{0:f}", sdr["credit"]);
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {
        }
        return Requestlist;
    }

    [WebMethod]
    public int MemberRequestEvoucher(Request_Param request)
    {
        int res = 0;
        SqlParameter[] arrParam = new SqlParameter[18];
        arrParam[0] = new SqlParameter("@RefRegNo", SqlDbType.BigInt, 8);
        arrParam[0].Value = request.RefRegNo;
        arrParam[1] = new SqlParameter("@kid", SqlDbType.Int, 8);
        arrParam[1].Value = request.kid;
        arrParam[2] = new SqlParameter("@SEQty", SqlDbType.Int, 8);
        arrParam[2].Value = request.SEQty;
        arrParam[3] = new SqlParameter("@amount", SqlDbType.Decimal, 8);
        arrParam[3].Value = Convert.ToDecimal(request.netAmount);
        arrParam[4] = new SqlParameter("@paymode", SqlDbType.VarChar, 50);
        arrParam[4].Value = request.paymode;
        arrParam[5] = new SqlParameter("@paydate", SqlDbType.DateTime, 8);
        arrParam[5].Value = DateTime.Today.ToString("MM/dd/yyyy");
        arrParam[6] = new SqlParameter("@refNo", SqlDbType.VarChar, 50);
        arrParam[6].Value = request.refNo;
        arrParam[7] = new SqlParameter("@bankName", SqlDbType.VarChar, 50);
        arrParam[7].Value = request.bankName;
        arrParam[8] = new SqlParameter("@bankBranch", SqlDbType.VarChar, 50);
        arrParam[8].Value = "";
        arrParam[9] = new SqlParameter("@Country", SqlDbType.VarChar, 50);
        arrParam[9].Value = "";
        arrParam[10] = new SqlParameter("@comment", SqlDbType.VarChar, 50);
        arrParam[10].Value = request.comment;

        arrParam[11] = new SqlParameter("@vatRate", SqlDbType.Money);
        arrParam[11].Value = Convert.ToDecimal(request.vatRates);
        arrParam[12] = new SqlParameter("@vatAmt", SqlDbType.Money);
        arrParam[12].Value = Convert.ToDecimal(request.vatAmount);
        arrParam[13] = new SqlParameter("@shipRate", SqlDbType.Money);
        arrParam[13].Value = Convert.ToDecimal(request.shipingRate);
        arrParam[14] = new SqlParameter("@shipAmt", SqlDbType.Money);
        arrParam[14].Value = Convert.ToDecimal(request.shipAmount);
        arrParam[15] = new SqlParameter("@linkTo", SqlDbType.VarChar, 50);
        arrParam[15].Value = Convert.ToInt64(request.RLinkTo);
        arrParam[16] = new SqlParameter("@ShipRateType", SqlDbType.VarChar, 50);
        arrParam[16].Value = request.shiprateType;
        arrParam[17] = new SqlParameter("@intResult", SqlDbType.Int);
        arrParam[17].Direction = ParameterDirection.Output;
        int result = objDUT.ExecuteSqlSP(arrParam, "SP_MemberRequestCard");

        return result;
    }


    [WebMethod]
    public List<ProductOrderToday> geLoyileltySoping(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 4 po.OrderNo,po.TotalAmount,po.totalbv,states=case po.Status when '1' then 'Active' else 'Pending' end from   product_order_details pod   join product_order po on po.MPOID=pod.MPOID where po.regNo='" + loginid + "' order by po.MPOID desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.POrder = sdr["OrderNo"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["TotalAmount"]);
                //listv.LRP = string.Format("{0:f}", sdr["states"]);
                listv.CashBack = string.Format("{0:f}", sdr["totalbv"]);
                listv.states = sdr["states"].ToString();
                Requestlist.Add(listv);

            }






        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> geVoucherSoping(string loginid)
    {
        sdr = null;
        string st = null;
        //st = "select top 4 pimage=(select top 1 pm.imgurl from productimage_master pm where pm.pid=p.Pid),p.mrp,p.dp,p.bv from product_master p join product_order_details pod on pod.ProductID=p.pid join product_order po on po.MPOID=pod.MPOID where po.regNo='" + loginid + "' and po.Status=1 order by po.MPOID desc";
        st = "select top 4 pimage=(select top 1 pm.imgurl from productimage_master pm where pm.pid=p.Pid),p.mrp,p.dp,p.bv from product_master p where p.pactive=1 and pid<4 order by p.pid";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.Icon = sdr["pimage"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["mrp"]);
                listv.LRP = string.Format("{0:f}", sdr["bv"]);

                listv.CashBack = string.Format("{0:f}", sdr["dp"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public List<ProductOrderToday> getPromterPool(string loginid)
    {
        sdr = null;
        string st = null;
        string sp = "sp_getpromotorpool";

        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {

            SqlParameter[] Param = new SqlParameter[1];
            Param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            Param[0].Value = loginid;
            DataTable dt = objDUT.GetDataTableSP(Param, sp);
            if (dt.Rows.Count > 0)
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.Invoice = dt.Rows[0]["livecount"].ToString();
                listv.GBP = string.Format("{0:f}", dt.Rows[0]["livepprp"]);
                listv.CashBack = string.Format("{0:f}", dt.Rows[0]["metredpprp"]);
                listv.orderno = dt.Rows[0]["meturedcount"].ToString();

                Requestlist.Add(listv);
            }


        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public List<ProductOrderToday> getmerchanlastpurchase(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5 orderno,totalamount,totalbv,lrp,cashback from product_order_today where status=1 and brid=" + loginid + " order by mpoid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["totalamount"]);
                listv.LRP = string.Format("{0:f}", sdr["lrp"]);
                listv.orderno = sdr["orderno"].ToString();
                listv.Icon = string.Format("{0:f}", sdr["totalbv"]).ToString();
                listv.CashBack = string.Format("{0:f}", sdr["cashback"]);
                Requestlist.Add(listv);

            }






        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public List<ProductOrderToday> get5generation(string loginid)
    {
        sdr = null;
        string st = null;


        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {




            string sp = "Sp_5generationincome";
            SqlParameter[] Param = new SqlParameter[1];
            Param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            Param[0].Value = loginid;
            DataTable dt = objDUT.GetDataTableSP(Param, sp);
            if (dt.Rows.Count > 0)
            {
                ProductOrderToday listv = new ProductOrderToday();

                listv.gp1 = string.Format("{0:f}", dt.Rows[0]["gp1"]);
                listv.gp2 = string.Format("{0:f}", dt.Rows[0]["gp2"]);
                listv.gp3 = string.Format("{0:f}", dt.Rows[0]["gp3"]);
                listv.gp4 = string.Format("{0:f}", dt.Rows[0]["gp4"]);
                listv.gp5 = string.Format("{0:f}", dt.Rows[0]["gp5"]);
                listv.Totavgp5 = string.Format("{0:f}", dt.Rows[0]["totalgp"]);
                listv.ppm1 = string.Format("{0:f}", dt.Rows[0]["ppm1"]);
                listv.ppm2 = string.Format("{0:f}", dt.Rows[0]["ppm2"]);
                listv.ppm3 = string.Format("{0:f}", dt.Rows[0]["ppm3"]);
                listv.ppm4 = string.Format("{0:f}", dt.Rows[0]["ppm4"]);
                listv.ppm5 = string.Format("{0:f}", dt.Rows[0]["ppm5"]);
                listv.totppms = string.Format("{0:f}", dt.Rows[0]["totalppm"]);




                Requestlist.Add(listv);
            }






        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<dispatchmode> Gettransaction(int did)
    {
        string query = string.Empty;
        List<dispatchmode> dmodeList = new List<dispatchmode>();
        try
        {
            query = "select incomeclub,transtype from IncomeClub where isactive=1 ";

            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                dispatchmode kit = new dispatchmode();
                kit.dActive = sdr["transtype"].ToString();
                kit.dmode = sdr["incomeclub"].ToString();
                dmodeList.Add(kit);
            }
        }
        catch (Exception ex)
        {
        }
        return dmodeList;
    }
    [WebMethod]
    public List<ProductOrderToday> getRpWalletRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 4 isnull( credit ,0.00) as credit,isnull( debit ,0.00) as debit, transDate, substring(remark,1,10) as remark, remark as remarks  from  member_account where  regno=" + loginid + " and trstatus=1 and isnull(wallettype,'RP')='PP'";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["credit"]);
                listv.gp1 = string.Format("{0:f}", sdr["debit"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["transDate"]);
                listv.orderdate = sdr["remark"].ToString();
                listv.Username = sdr["remarks"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getpoolunitRewardSummary(string loginid)
    {
        sdr = null;
        string st = null;

        st = "select top 5 mcm.starid,totalstar=0,mcm.regno,mcm.loginid,mcm.entrydate,pprp=(select isnull(sum(credit),0) from member_account where wallettype='RP' and regno=mcm.regno and starid=mcm.starid) from member_cycle_master mcm where mcm.regno=" + loginid + " order by starid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.GBP = string.Format("{0:f}", sdr["pprp"]);
                listv.Paydate = sdr["loginid"].ToString();
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["entrydate"]);
                listv.gp1 = sdr["totalstar"].ToString();

                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> GetGiftCoupan(string regno)
    {
        sdr = null;
        string st = null;
        st = "select gcid,couponno,worthvalue,create_date,tt_date,sendto=(select emailid from member_master where regno=gc.transfer_to),redeemby=(select randomid from member_master where regno=gc.redeemBy),redeem_date from gift_Coupon gc where gc.isactive=1 and created_by=" + regno + " order by gcid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt64(sdr["gcid"].ToString());
                listv.ppm2 = sdr["couponno"].ToString();
                listv.TotavWallet = string.Format("{0:f}", sdr["worthvalue"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["create_date"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["tt_date"]);
                listv.Username = sdr["sendto"].ToString();
                listv.ppm4 = sdr["redeemby"].ToString();
                listv.ppm1 = string.Format("{0:dd/MM/yyyy}", sdr["redeem_date"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> GetRPWalletbalance(string regno)
    {
        sdr = null;
        string st = null;

        st = "select balance=(isnull(sum(credit),0)-isnull(sum(debit),0)) from member_account where wallettype='RP' and trstatus=1 and regno=" + regno + " ";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.TotavWallet = string.Format("{0:f}", sdr["balance"]);
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public int createGiftoupen(string regno, string worthvalue)
    {
        int ResultStatus = 0;
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(regno);
            param[1] = new SqlParameter("@worthvalue", SqlDbType.Money);
            param[1].Value = Convert.ToDouble(worthvalue);
            param[2] = new SqlParameter("@QueryType", SqlDbType.VarChar, 500);
            param[2].Value = "Insert";
            param[3] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[3].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_GenerateGiftCoupon");

            if (result > 0)
            {
                ResultStatus = 1;
            }
            else
            {
                ResultStatus = 0;
            }
        }
        catch (Exception excep)
        {
            ResultStatus = 0;
        }

        return ResultStatus;
    }
    [WebMethod]
    public List<Merchant_Details> GetCoupon(string couponno)
    {
        List<Merchant_Details> memList = new List<Merchant_Details>();
        if (couponno != "" || couponno != null)
        {
            string query = string.Empty;
            query = "select *,createdby=(select randomid from member_master where regno=gc.created_by),createdbyname=(select (fname+' '+isnull(lname,'')) as name from member_master where regno=gc.created_by) ,reedemb=(select randomid from member_master where regno=gc.redeemby) from gift_coupon gc where couponno='" + couponno + "'";
            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                Merchant_Details mem = new Merchant_Details();
                mem.mid = Convert.ToInt32(sdr["gcid"]);
                mem.BusinessName = sdr["couponno"].ToString();
                mem.City = sdr["createdbyname"].ToString();
                mem.Comment = sdr["createdby"].ToString();
                mem.name = string.Format("{0:0}", sdr["worthvalue"]);
                mem.mobile = sdr["tt_date"].ToString();
                mem.emailid = sdr["reedemb"].ToString();
                mem.Requested_date = string.Format("{0:dd/MM/yyyy}", sdr["redeem_date"]);

                memList.Add(mem);
            }
            return memList;
        }
        return memList;
    }
    [WebMethod]
    public List<ProductOrderToday> GetRedeemCoupan(string regno)
    {
        sdr = null;
        string st = null;

        st = "select gcid,couponno,worthvalue,create_date,tt_date,sendto=(select emailid from member_master where regno=gc.transfer_to),redeemby=(select randomid from member_master where regno=gc.redeemBy),redeem_date from gift_Coupon gc where gc.isactive=1 and transfer_to=" + regno + " order by gcid desc";
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt64(sdr["gcid"].ToString());
                listv.ppm2 = sdr["couponno"].ToString();
                listv.TotavWallet = string.Format("{0:f}", sdr["worthvalue"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["create_date"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["tt_date"]);
                listv.Username = sdr["sendto"].ToString();
                listv.ppm4 = sdr["redeemby"].ToString();
                listv.ppm1 = sdr["redeem_date"].ToString();
                Requestlist.Add(listv);
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }
    [WebMethod]
    public List<Merchant_Details> GetCouponDetails(string regno, string worth)
    {
        List<Merchant_Details> memList = new List<Merchant_Details>();
        if (regno != "" || regno != null)
        {
            string query = string.Empty;
            query = "select top 1 *,createdby=(select randomid from member_master where regno=gc.created_by),createdbyname=(select (fname+' '+isnull(lname,'')) as name from member_master where regno=gc.created_by) ,reedemby=(select randomid from member_master where regno=gc.redeemby) from gift_coupon gc where created_by='" + regno + "' and worthvalue='" + worth + "'";
            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                Merchant_Details mem = new Merchant_Details();
                mem.mid = Convert.ToInt32(sdr["gcid"]);
                mem.BusinessName = sdr["couponno"].ToString();
                mem.City = sdr["createdbyname"].ToString();
                mem.Comment = sdr["createdby"].ToString();
                mem.name = string.Format("{0:0}", sdr["worthvalue"]);
                mem.mobile = string.Format("{0:dd/MM/yyyy}", sdr["create_date"]);
                mem.emailid = sdr["redeemby"].ToString();
                mem.Requested_date = string.Format("{0:dd/MM/yyyy}", sdr["redeem_date"]);

                memList.Add(mem);
            }
            return memList;
        }
        return memList;
    }
    [WebMethod]
    public int RedeemGiftCoupon(string regno, string couponno)
    {
        int ResultStatus = 0;
        try
        {
            SqlParameter[] param = new SqlParameter[3];
            param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(regno);
            param[1] = new SqlParameter("@Couponno", SqlDbType.VarChar, 50);
            param[1].Value = Convert.ToDouble(couponno);
            param[2] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[2].Direction = ParameterDirection.Output;
            int result = objDUT.ExecuteSqlSP(param, "sp_RedeemGiftCoupon");
            if (result > 0)
            {
                ResultStatus = result;

            }
            else
            {
                ResultStatus = 0;
            }
        }
        catch (Exception excep)
        {
            ResultStatus = 0;
        }

        return ResultStatus;
    }
    [WebMethod]
    public string Ewallet_Check(string regno, string netAmt)
    {
        string status = "false";

        SqlParameter[] param = new SqlParameter[3];
        param[0] = new SqlParameter("@regno", SqlDbType.BigInt, 4);
        param[0].Value = Convert.ToInt64(regno);
        param[1] = new SqlParameter("@netAmt", SqlDbType.Money);
        param[1].Value = Convert.ToDouble(netAmt);
        param[2] = new SqlParameter("@intresult", SqlDbType.Int, 4);
        param[2].Direction = ParameterDirection.Output;
        int result = objDUT.ExecuteSqlSP(param, "usp_checkwallet");
        if (result > 0)
        {
            status = "true";
        }
        else
        {
            status = "false";
        }
        return status;
    }
    [WebMethod]
    public int CheckTranPass(string RegNo, string transpassword)
    {
        int b = Convert.ToInt32(objDUT.GetScalar("select Count(*) from member_login where regno='" + RegNo + "' and epassword='" + transpassword + "' "));
        return b;
    }
    [WebMethod]
    public List<string> GetAutoCompleteData(string randomID)
    {
        sdr = null;
        List<string> result = new List<string>();
        sdr = objDUT.GetDataReader("select top 10 randomid from member_login where randomid LIKE '%" + randomID + "%'");
        if (sdr.HasRows)
        {
            while (sdr.Read())
            {
                result.Add(sdr["randomid"].ToString());
            }
        }
        else
        {
            result.Add("Invalid Card No");
        }
        sdr.Close();
        sdr.Dispose();
        return result;
    }

    [WebMethod]
    public int CheckInvertory(string abcda, string RegNo)
    {
        int intStock = Convert.ToInt32(objDUT.GetScalar("select Count(*) from epin_master where sepinid=0 and regno=0 and eactive=1"));
        return intStock;
    }

    [WebMethod]
    public List<string> GetCompanyList(string CompanyName)
    {
        sdr = null;
        List<string> result = new List<string>();
        sdr = objDUT.GetDataReader("select top 10 catalogname from catalog where active=1 and catalogname like LIKE '%" + CompanyName + "%'");
        if (sdr.HasRows)
        {
            while (sdr.Read())
            {
                result.Add(sdr["randomid"].ToString());
            }
        }
        else
        {
            result.Add("Invalid Card No");
        }
        sdr.Close();
        sdr.Dispose();
        return result;
    }
    [WebMethod]
    public List<ReloadableTopupRequset> GetMemberToupDetails(string MaxRegno, string TRID)
    {
        sdr = null;
        string st = null;

        List<ReloadableTopupRequset> Requestlist = new List<ReloadableTopupRequset>();
        try
        {
            st = "select t.TRID,t.ReqID,t.Regno,convert(varchar(30),t.RequestDate,103) as RequestDate,t.catalogid,c.catalogname,t.categoryid,ca.categoryname,isnull(t.CardNo,'N/A') as CardNo,cast(t.TopUpAmount as varchar(20)) as TopUpAmount,case when isnull(convert(varchar(20),t.TopupDate,103),'')='' then 'N/A' else convert(varchar(20),t.TopupDate,103) end as TopupDate,t.Isactive,t.mpoid from TopupRequest t,catalog c,category ca where c.catalogid=t.catalogid and ca.categoryid=t.categoryid";
            if (MaxRegno != "")
            {
                st += "  and t.Regno='" + MaxRegno + "'";
            }
            if (TRID != "")
            {
                st += " and t.TRID='" + TRID + "'";
            }
            st += " order by TRID desc";

            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ReloadableTopupRequset listv = new ReloadableTopupRequset();
                listv.TRID = sdr["TRID"].ToString();
                listv.ReqID = sdr["ReqID"].ToString();
                listv.Regno = sdr["Regno"].ToString();
                listv.RequestDate = sdr["RequestDate"].ToString();
                listv.catalogid = sdr["catalogid"].ToString();
                listv.catalogname = sdr["catalogname"].ToString();
                listv.categoryid = sdr["categoryid"].ToString();
                listv.categoryname = sdr["categoryname"].ToString();
                listv.CardNo = sdr["CardNo"].ToString();
                listv.TopUpAmount = sdr["TopUpAmount"].ToString();
                listv.TopupDate = sdr["TopupDate"].ToString();
                listv.Isactive = sdr["Isactive"].ToString();
                listv.mpoid = sdr["mpoid"].ToString();
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public int ToupReRequest(ReloadableTopupRequset request)
    {
        SqlParameter[] Reqq = new SqlParameter[7];
        Reqq[0] = new SqlParameter("@Regno", SqlDbType.BigInt);
        Reqq[0].Value = Convert.ToInt64(request.Regno);

        Reqq[1] = new SqlParameter("@catalogid", SqlDbType.Int);
        Reqq[1].Value = Convert.ToInt32(request.catalogid);

        Reqq[2] = new SqlParameter("@categoryid", SqlDbType.Int);
        Reqq[2].Value = Convert.ToInt32(request.categoryid);

        Reqq[3] = new SqlParameter("@CardNo", SqlDbType.VarChar, 50);
        Reqq[3].Value = request.CardNo.Trim();

        Reqq[4] = new SqlParameter("@TopUpAmount", SqlDbType.Money);
        Reqq[4].Value = Convert.ToDouble(request.TopUpAmount.Trim());

        Reqq[5] = new SqlParameter("@query", SqlDbType.VarChar, 20);
        Reqq[5].Value = "insert";

        Reqq[6] = new SqlParameter("@intresult", SqlDbType.Int, 4);
        Reqq[6].Direction = ParameterDirection.Output;

        int intresult = objDUT.ExecuteSqlSP(Reqq, "sp_Requesttopupdata");
        return intresult;
    }
    [WebMethod]
    public string UpdatePasswordMerchant(string loginid, string oldpassword, string newpassword)
    {
        string status = "false";
        try
        {
            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
            param[0].Value = loginid;
            param[1] = new SqlParameter("@Newpassword", SqlDbType.VarChar, 100);
            param[1].Value = newpassword;
            param[2] = new SqlParameter("@oldpassword", SqlDbType.VarChar, 100);
            param[2].Value = oldpassword;
            param[3] = new SqlParameter("@intResult", SqlDbType.Int, 4);
            param[3].Direction = ParameterDirection.Output;

            int result = objDUT.ExecuteSqlSP(param, "sp_updatepassword_merchant");

            if (result > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }
        return status;
    }
    [WebMethod]
    public int MerchantRequestEvoucher(Request_Param request)
    {
        int res = 0;
        SqlParameter[] arrParam = new SqlParameter[18];
        arrParam[0] = new SqlParameter("@RefRegNo", SqlDbType.BigInt, 8);
        arrParam[0].Value = request.RefRegNo;
        arrParam[1] = new SqlParameter("@kid", SqlDbType.Int, 8);
        arrParam[1].Value = request.kid;
        arrParam[2] = new SqlParameter("@SEQty", SqlDbType.Int, 8);
        arrParam[2].Value = request.SEQty;
        arrParam[3] = new SqlParameter("@amount", SqlDbType.Decimal, 8);
        arrParam[3].Value = request.netAmount;
        arrParam[4] = new SqlParameter("@paymode", SqlDbType.VarChar, 50);
        arrParam[4].Value = request.paymode;
        arrParam[5] = new SqlParameter("@paydate", SqlDbType.DateTime, 8);
        arrParam[5].Value = DateTime.Today.ToString("MM/dd/yyyy");
        arrParam[6] = new SqlParameter("@refNo", SqlDbType.VarChar, 50);
        arrParam[6].Value = request.refNo;
        arrParam[7] = new SqlParameter("@bankName", SqlDbType.VarChar, 50);
        arrParam[7].Value = request.bankName;
        arrParam[8] = new SqlParameter("@bankBranch", SqlDbType.VarChar, 50);
        arrParam[8].Value = "";
        arrParam[9] = new SqlParameter("@Country", SqlDbType.VarChar, 50);
        arrParam[9].Value = "";
        arrParam[10] = new SqlParameter("@comment", SqlDbType.VarChar, 50);
        arrParam[10].Value = request.comment;

        arrParam[11] = new SqlParameter("@vatRate", SqlDbType.Money);
        arrParam[11].Value = Convert.ToDecimal(request.vatRates);
        arrParam[12] = new SqlParameter("@vatAmt", SqlDbType.Money);
        arrParam[12].Value = Convert.ToDecimal(request.vatAmount);
        arrParam[13] = new SqlParameter("@shipRate", SqlDbType.Money);
        arrParam[13].Value = Convert.ToDecimal(request.shipingRate);
        arrParam[14] = new SqlParameter("@shipAmt", SqlDbType.Money);
        arrParam[14].Value = Convert.ToDecimal(request.shipAmount);
        arrParam[15] = new SqlParameter("@linkTo", SqlDbType.VarChar, 50);
        arrParam[15].Value = request.RLinkTo;
        arrParam[16] = new SqlParameter("@ShipRateType", SqlDbType.VarChar, 50);
        arrParam[16].Value = request.shiprateType;

        arrParam[17] = new SqlParameter("@intResult", SqlDbType.Int);
        arrParam[17].Direction = ParameterDirection.Output;
        int result = objDUT.ExecuteSqlSP(arrParam, "SP_RequestCard");
        return result;
    }

    [WebMethod]
    public List<LastPurchasing> GetLastPurchaseing(string MRegNo)
    {
        List<LastPurchasing> PurchaseList = new List<LastPurchasing>();
        try
        {
            sdr = null;
            long Mregno = Convert.ToInt64(objDUT.GetScalar("select regno from merchant_master where mid='" + MRegNo + "'"));
            sdr = objDUT.GetDataReader("select m.randomid,p.gbp,p.totalbv,p.lrp from product_order_today p left outer join member_master m on m.regno=p.regno and p.regno='" + Mregno + "' order by p.invno desc");
            while (sdr.Read())
            {
                LastPurchasing LastPurchase = new LastPurchasing();
                LastPurchase.randomid = sdr["randomid"].ToString();
                LastPurchase.gbp = sdr["gbp"].ToString();
                LastPurchase.totalbv = sdr["totalbv"].ToString();
                LastPurchase.lrp = sdr["lrp"].ToString();
                PurchaseList.Add(LastPurchase);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return PurchaseList;
    }
    [WebMethod]
    public List<string> GetAutoCompleteData1(string cardnumber, string regno)
    {
        sdr = null;
        string st = null;
        List<string> result = new List<string>();
        try
        {
            string sp = "Sp_GetDownlineCard";
            SqlParameter[] Param = new SqlParameter[2];
            Param[0] = new SqlParameter("@regno", SqlDbType.BigInt);
            Param[0].Value = regno;
            Param[1] = new SqlParameter("@cardno", SqlDbType.VarChar, 100);
            Param[1].Value = cardnumber;
            sdr = objDUT.GetDataReaderSP(Param, sp);
            if (sdr.HasRows)
            {
                while (sdr.Read())
                {
                    result.Add(sdr["randomid"].ToString());
                }
            }
            else
            {
                result.Add("Invalid Card Number");
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return result;
    }

    [WebMethod]
    public List<SponsorList> GetSponsorList(string loginid)
    {
        long regno = objUT.GetRegistrationNo(loginid);
        List<SponsorList> sponsorlist = new List<SponsorList>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 10);
        param[0].Value = regno;
        sdr = objDUT.GetDataReaderSP(param, "sp_sponsorlist");
        while (sdr.Read())
        {
            SponsorList sponsor = new SponsorList();
            sponsor.regNo = sdr["regno"].ToString();
            sponsor.Loginid = sdr["Username"].ToString();
            sponsor.fullName = sdr["Name"].ToString();
            sponsor.regDate = Convert.ToDateTime(sdr["RegistrationDate"].ToString()).ToString("dd/MM/yyyy");
            sponsor.kitcode = sdr["Kit"].ToString();
            sponsor.kitpv = sdr["kitpv"].ToString();
            sponsor.mobileNo = sdr["Mobile"].ToString();
            sponsor.SponsorCount = sdr["Sponsor"].ToString();
            sponsor.statusconf = sdr["memstatus"].ToString();
            sponsor.colorclass = sdr["class"].ToString();
            sponsorlist.Add(sponsor);
        }
        sdr.Dispose();
        return sponsorlist;
    }


    [WebMethod]
    public List<EpinTransaction_Invoice> EpinTransactionInvoice_kitDetails(Invoice_Param invoice)
    {
        List<EpinTransaction_Invoice> epinInvoicelist = new List<EpinTransaction_Invoice>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@trans", SqlDbType.BigInt);
        param[0].Value = invoice.TransactionNo;
        sdr = objDUT.GetDataReaderSP(param, "Sp_KitDetails_Invoices");
        while (sdr.Read())
        {
            EpinTransaction_Invoice epininvoice = new EpinTransaction_Invoice();

            epininvoice.epinnumber = sdr["epinnumber"].ToString();
            epininvoice.epincode = sdr["epincode"].ToString();
            epininvoice.kitprice = string.Format("{0:f}", Convert.ToDouble(sdr["kitprice"].ToString()));
            epininvoice.kitcode = sdr["kitcode"].ToString().ToString();
            epinInvoicelist.Add(epininvoice);
        }
        sdr.Dispose();
        return epinInvoicelist;


    }
    [WebMethod]
    public List<YearAndMonth> getDirectLine(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select distinct introposm from member_master where introposm>0 order by introposm asc";
            DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= dt.Rows.Count; i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Line-" + i.ToString();
                    listv.MonthID = i.ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<YearAndMonth> getDirectLinememberwise(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select distinct introposm from member_master where introposm>0 and introregno=" + YearString + " order by introposm asc";
            DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= dt.Rows.Count; i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Line-" + i.ToString();
                    listv.MonthID = i.ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<YearAndMonth> getGenerationLine(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            StrQuery = "select distinct depthsM from member_master  where depthsm>0";
            DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= dt.Rows.Count; i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Level Depth-" + (i).ToString();
                    listv.MonthID = (i).ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<YearAndMonth> getGenerationLinememberwise(string YearString)
    {
        sdr = null;
        string StrQuery = null;
        List<YearAndMonth> YearMonthlist = new List<YearAndMonth>();
        try
        {
            SqlParameter[] param = new SqlParameter[1];
            param[0] = new SqlParameter("@mRegno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(YearString);
            DataTable dt = objDUT.GetDataTableSP(param, "sp_leveldepth");
            //DataTable dt = objDUT.GetDataTable(StrQuery);
            if (dt.Rows.Count > 0)
            {
                for (int i = 1; i <= Convert.ToInt32(dt.Rows[0]["showdepth"].ToString()); i++)
                {
                    YearAndMonth listv = new YearAndMonth();
                    listv.Year = "Level Depth-" + (i).ToString();
                    listv.MonthID = (i).ToString();
                    YearMonthlist.Add(listv);
                }
            }
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return YearMonthlist;
    }
    [WebMethod]
    public List<ProductOrderToday> GetteamIncome(string regno, string type, string generation, string month)
    {
        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            if (generation == "--Generation--")
            {
                generation = "0";
            }
            if (generation == "-1")
            {
                generation = "0";
            }
            if (month == null)
            {
                month = "0";
            }
            if (Convert.ToInt32(month) <= 0)
            {
                month = "0";
            }

            SqlParameter[] param = new SqlParameter[4];
            param[0] = new SqlParameter("@mRegno", SqlDbType.BigInt);
            param[0].Value = Convert.ToInt64(regno);
            param[1] = new SqlParameter("@generation", SqlDbType.Int);
            param[1].Value = Convert.ToInt32(generation);
            param[2] = new SqlParameter("@payid", SqlDbType.Int);
            param[2].Value = Convert.ToInt32(month);
            param[3] = new SqlParameter("@typecondition", SqlDbType.VarChar, 100);
            param[3].Value = type;
            sdr = objDUT.GetDataReaderSP(param, "Sp_getTeamIncomeDetails");
            while (sdr.Read())
            {
                ProductOrderToday mail = new ProductOrderToday();

                mail.Username = sdr["regno"].ToString();
                mail.gp1 = sdr["generation"].ToString();
                mail.Icon = sdr["loginid"].ToString();
                mail.Username = sdr["name"].ToString();
                mail.Invoice = sdr["mobile"].ToString();
                mail.LRP = string.Format("{0:f}", sdr["Income"]);
                Requestlist.Add(mail);
            }
        }
        catch (Exception ex)
        {


        }
        return Requestlist;
    }

    [WebMethod]
    public List<ProductOrderToday> getProductOrderToday(string loginid, string orderno, string status, string datefrom, string DateTo)
    {
        sdr = null;
        string st = null;
        if (datefrom != "")
        {
            string[] a1 = datefrom.Split('/');

            datefrom = a1[1] + "/" + a1[0] + "/" + a1[2];

        }
        if (DateTo != "")
        {

            string[] a2 = DateTo.Split('/');

            DateTo = a2[1] + "/" + a2[0] + "/" + a2[2];
        }

        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            //st = "select productdispatch=isnull(pot.productdispatch,0),deliverypin= case isnull(deliverypin),'',orderstatus=case when pot.status=1 then 'confirmed' when pot.status=2 then 'Rejected' else 'Pending' end,p=pot.status,pot.totalquantity, Mname=M.lName, pot.mpoid,pot.regno,pot.OrderNo,pot.invno,pot.invdate,pot.orderdate,pot.totalamount as GBP,totalbv from Product_order pot,member_master M where pot.regno=M.regno and pot.regno='" + loginid + "' ";

            st = "select   bvtype= case when pot.bvtype = 'A' then 0  when pot.bvtype = 'R' then  1  end, productdispatch=isnull(pot.productdispatch,0),deliverypin2= case when isnull(pot.deliverypin,'N/A')='N/A' then 'N/A' else pot.deliverypin end,orderstatus=case when pot.status=1 then 'confirmed' when pot.status=2 then 'Rejected' else 'Pending' end,p=pot.status,pot.totalquantity, Mname=M.lName, pot.mpoid,pot.regno,pot.OrderNo,pot.invno,pot.invdate,pot.orderdate,pot.totalamount as GBP,totalbv from Product_order pot,member_master M where pot.regno=M.regno and pot.regno='" + loginid + "'";
            if (status != "")
            {
                st = st + " and pot.status='" + status + "' ";
            }

            if (orderno != "")
            {
                st = st + " and pot.orderno='" + orderno + "' ";
            }

            //if (DateTo != "")
            //{
            //    st = st + " and pot.invdate,110='" + DateTo + "' ";
            //}
            if (datefrom != "")
            {
                st = st + " and convert(date,pot.orderdate,103) >='" + datefrom + "'";
            }
            if (DateTo != "")
            {
                st = st + " and convert(date,pot.orderdate,103) <='" + DateTo + "' ";
            }
            st = st + " order by pot.mpoid desc ";

            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt32(sdr["mpoid"].ToString());
                listv.Username = sdr["Mname"].ToString();
                listv.orderno = sdr["orderno"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["GBP"]);
                //listv.CashBack = string.Format("{0:f}", sdr["CashBack"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                listv.LRP = string.Format("{0:f}", sdr["totalbv"]);
                listv.noofitems = Convert.ToInt32(sdr["totalquantity"]);
                listv.states = sdr["deliverypin2"].ToString();
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                // listv.Activeclass = sdr["status"].ToString();
                listv.CashBack = sdr["orderstatus"].ToString();
                listv.Invoice = sdr["invno"].ToString();
                listv.Activeclass = Convert.ToInt32(sdr["p"].ToString()) == 1 ? "success" : "warning";
                listv.Bvtype = Convert.ToInt32(sdr["bvtype"].ToString()) == 1 ? "Repurchase" : "Activation";
                listv.gp1 = sdr["productdispatch"].ToString();


                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }


    [WebMethod]
    public List<ProductOrderToday> getProductOrderTodayDispatch(string loginid, string orderno, string status, string datefrom, string DateTo)
    {
        sdr = null;
        string st = null;
        if (datefrom != "")
        {
            string[] a1 = datefrom.Split('/');

            datefrom = a1[1] + "/" + a1[0] + "/" + a1[2];

        }
        if (DateTo != "")
        {

            string[] a2 = DateTo.Split('/');

            DateTo = a2[1] + "/" + a2[0] + "/" + a2[2];
        }

        List<ProductOrderToday> Requestlist = new List<ProductOrderToday>();
        try
        {
            st = "select pot.totalquantity, Mname=M.lName, pot.mpoid,pot.regno,pot.OrderNo,pot.invno,pot.invdate,pot.orderdate,pot.totalamount as GBP,totalbv from Product_order pot,member_master M where pot.regno=M.regno and pot.status=1 and pot.regno='" + loginid + "' ";

            if (status != "")
            {
                st = st + " and pot.productdispatch='" + status + "' ";
            }

            if (orderno != "")
            {
                st = st + " and pot.orderno='" + orderno + "' ";
            }

            if (datefrom != "")
            {
                st = st + " and convert(date,pot.invdate,103) >='" + datefrom + "'";
            }
            if (DateTo != "")
            {
                st = st + " and convert(date,pot.invdate,103) <='" + DateTo + "' ";
            }
            st = st + " order by pot.mpoid desc ";

            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                ProductOrderToday listv = new ProductOrderToday();
                listv.mpoid = Convert.ToInt32(sdr["mpoid"].ToString());
                listv.Username = sdr["Mname"].ToString();
                listv.orderno = sdr["orderno"].ToString();
                listv.GBP = string.Format("{0:f}", sdr["GBP"]);
                //listv.CashBack = string.Format("{0:f}", sdr["CashBack"]);
                listv.orderdate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                listv.LRP = string.Format("{0:f}", sdr["totalbv"]);
                listv.noofitems = Convert.ToInt32(sdr["totalquantity"]);
                listv.Paydate = string.Format("{0:dd/MM/yyyy}", sdr["orderdate"]);
                // listv.Activeclass = sdr["status"].ToString();
                // listv.oActive = sdr["orderstatus"].ToString();
                listv.Invoice = sdr["invno"].ToString();
                //listv.Activeclass = Convert.ToInt32(sdr["p"].ToString()) == 1 ? "success" : "warning";
                // listv.Packname = Convert.ToInt32(sdr["s"].ToString()) == 1 ? "success" : "warning";


                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {

        }
        return Requestlist;
    }

    [WebMethod]
    public string CheckEpinNumber(string epinnumber)
    {
        string status = "false";
        try
        {
            string query = "Select e.EpinNumber from Epin_master e,Kit_Master k where e.kid=k.kid and e.EpinNumber='" + epinnumber + "' and e.regNo=0 AND e.sepinid<>0  and e.eactive=1 and k.kittype=0";
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";
            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod]
    public List<LastPurchasing> getrank(string MRegNo)
    {
        List<LastPurchasing> PurchaseList = new List<LastPurchasing>();
        try
        {
            sdr = null;
            sdr = objDUT.GetDataReader("select designame,levels from slabrates order by levels");
            while (sdr.Read())
            {
                LastPurchasing LastPurchase = new LastPurchasing();
                LastPurchase.randomid = sdr["designame"].ToString();
                LastPurchase.gbp = sdr["levels"].ToString();

                PurchaseList.Add(LastPurchase);
            }
            sdr.Dispose();

        }
        catch (Exception exce)
        {
        }
        return PurchaseList;
    }

    [WebMethod]
    public List<dispatchmode> Gettransactions(int did)
    {
        string query = string.Empty;
        List<dispatchmode> dmodeList = new List<dispatchmode>();
        try
        {
            query = "select incomeclub,transtype from IncomeClub where isactive=1 and transtype<>'RB'";

            sdr = objDUT.GetDataReader(query);
            while (sdr.Read())
            {
                dispatchmode kit = new dispatchmode();
                kit.dActive = sdr["transtype"].ToString();
                kit.dmode = sdr["incomeclub"].ToString();
                dmodeList.Add(kit);
            }
        }
        catch (Exception ex)
        {
        }
        return dmodeList;
    }

    [WebMethod]
    public List<payoutdetails> getStatements(string regno, string fromdate, string todate, string transtype, string transaction, string wallettype)
    {
        sdr = null;
        string st = null;
        List<payoutdetails> Requestlist = new List<payoutdetails>();
        try
        {
            if (regno != "" && transtype == "undefined")
            {
                st = "select regno,  convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
            }
            else if (regno != "" && transtype != "undefined")
            {
                if (regno != "" && transtype == "CASHBACK" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transtype + "'";

                } if (regno != "" && transtype == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0 ";
                }
                if (regno != "" && transtype == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0 ";
                }

                if (regno != "" && transtype == "" && transaction != "-1" && transaction != "c" && transaction != "d" && transaction != "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and transtype='" + transaction + "'";
                }
                if (regno != "" && transtype == "" && transaction == "-1" && wallettype != "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "d")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and debit!=0 ";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "c")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " and credit!=0 ";
                }
                if (regno != "" && transtype == "" && transaction != "-1" && transaction == "both")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
                }
                if (regno != "" && transtype == "" && transaction == "-1")
                {
                    st = "select regno,convert(varchar, transdate,106) as transdate,remark,debit,credit from member_account where regno=" + regno + " ";
                }

            }


            //else
            //{
            //    st = "select regno,transdate,remark,debit,credit from member_account";
            //}


            //if (wallettype != "-1")
            //{
            //    st += " and  isnull(wallettype,'RP')='" + wallettype + "' ";
            //}
            if (fromdate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime)>='" + dateformat(fromdate) + "'";
            }
            if (todate != "")
            {
                st += " and  cast( CONVERT(VARCHAR(10),transdate ,110) as datetime)<='" + dateformat(todate) + "'";
            }
            st += " and trstatus not in(3,5) order by acid desc";
            sdr = objDUT.GetDataReader(st);
            while (sdr.Read())
            {
                payoutdetails listv = new payoutdetails();
                listv.regno = Convert.ToInt32(sdr["regno"].ToString());
                listv.name = sdr["remark"].ToString();
                listv.batchconfdate = sdr["transdate"].ToString();
                listv.netpayable = string.Format("{0:f}", sdr["debit"]);
                listv.totalamont = string.Format("{0:f}", sdr["credit"]);
                Requestlist.Add(listv);
            }
            sdr.Dispose();
        }
        catch (Exception ex)
        {
            LogException.WriteToLog(ex);
        }
        finally
        {
        }
        return Requestlist;
    }
    [WebMethod]
    public int CheckPancard1(int regno)
    {
        int status = 0;
        try
        {
            if (regno != 0)
            {
                //  int query = "Select  mempan from Member_master where regno='" + regno + "'";
                string loginid = Convert.ToString(objDUT.GetScalar("Select  mempan from Member_master where regno='" + regno + "'"));
                if (loginid != "")
                {
                    status = 1;
                }
                else
                {
                    status = 0;
                }
            }
            else
            {
                status = 0;
            }
        }
        catch (Exception excep)
        {
            status = 0;
        }
        return status;
    }
    // For Index page
    [WebMethod(EnableSession = true)]
    public string CheckLogin(string login)
    {
        string result = " ";

        if (Session["Mloginid"] != null)
        {

            result = objDUT.GetScalar("select isnull(title,'')+' '+fname+' '+isnull(lname,' ') as name from member_master where loginid='" + Session["Mloginid"] + "'").ToString();
        }
        else
        {
            result = "login";
        }


        return result;
    }

    [WebMethod]
    public List<Kit> upgradekitdetail(string regno)
    {
        List<Kit> kitdetails = new List<Kit>();
        string query = string.Empty;
        query = "select  km.kitcode,km.kitprice,km.kittype,rt.rkpv from recharge_transaction  rt left outer join kit_master km on km.kid=rt.rkid where regno='" + regno + "'";
        DataTable tb = objDUT.GetDataTable(query);
        if (tb.Rows.Count > 0)
        {
            for (int i = 0; i < tb.Rows.Count; i++)
            {
                Kit kitdetails1 = new Kit();
                kitdetails1.kitCode = tb.Rows[i]["kitcode"].ToString();
                kitdetails1.kitPrice = Convert.ToDecimal(tb.Rows[i]["kitprice"]);
                kitdetails1.kitPV = Convert.ToInt32(tb.Rows[i]["rkpv"]);
                if (Convert.ToInt32(tb.Rows[i]["kittype"]) == 0)
                {
                    kitdetails1.kitDesc = "Joining Kit";
                }
                else
                {
                    kitdetails1.kitDesc = "Upgraded Kit";
                }
                kitdetails.Add(kitdetails1);
            }
        }
        return kitdetails;
    }
    [WebMethod]
    public List<Kit> GetKitsell(string kid, string kitType, string loginid)
    {
        long regno = Convert.ToInt64(objUT.GetRegistrationNo(loginid));
        string countkit = objDUT.GetScalar("select max (rkid) from  recharge_transaction where regno=" + regno + "").ToString();
        string query1 = string.Empty;
        List<Kit> kitList = new List<Kit>();
        //try
        //{
        //string query = "select kid from member_master where regno=" + Session["kitreg"].ToString();
        query1 = "Select kid, kitCode, KitDesc, KitPrice, kitPV, boardBV, kitType,kitproducts from kit_master where kitActive=1 and kid>" + countkit + " and kid<5";

        if (kid != "0")
        {
            query1 += " and kid='" + kid + "'   ";
        }
        if (kitType != "-1")
        {
            query1 += " and kitType='" + kitType + "' ";
        }
        query1 = query1 + "order by kid ";
        sdr = objDUT.GetDataReader(query1);
        while (sdr.Read())
        {
            Kit kit = new Kit();
            kit.kID = sdr.GetInt32(0);
            kit.kitCode = sdr.GetString(1);
            kit.kitDesc = sdr.GetString(2);
            kit.kitPrice = Convert.ToDecimal(string.Format("{0:f}", sdr.GetDecimal(3)));
            kit.kitPV = Convert.ToDecimal(string.Format("{0:f}", sdr.GetDecimal(4)));
            kit.boardBV = sdr.GetDecimal(5);
            kit.kitType = sdr.GetInt32(6);

            kitList.Add(kit);
        }
        //}
        //catch (Exception ex)
        //{


        //}
        return kitList;
    }

    [WebMethod]
    public List<Kit> GetKitCombo(string kid)
    {
        List<Kit> ComboList = new List<Kit>();
        DataTable dt;
        try
        {
            dt = objDUT.GetDataTable("Select kitCode, KitPrice, kitPV, directIncome from kit_master where kitActive=1 and kid='" + kid + "'");

            if (dt.Rows.Count > 0)
            {
                Kit Combo = new Kit();
                Combo.kitCode = dt.Rows[0]["kitCode"].ToString();
                Combo.kitPV = Convert.ToDecimal(dt.Rows[0]["kitpv"]);
                Combo.kitPrice = Convert.ToDecimal(dt.Rows[0]["KitPrice"]);
                Combo.directIncome = Convert.ToDecimal(dt.Rows[0]["DirectIncome"]);
                ComboList.Add(Combo);

            }
        }
        catch (Exception ex)
        {

        }
        return ComboList;

    }

    [WebMethod]
    public string CheckEpinNumber1(string epinnumber, string kitcode)
    {
        string status = "false";
        string query = "";
        try
        {
            query = "Select k.kitcode,e.EpinNumber from kit_master k,Epin_master e  where k.kid=e.kid and k.kid='" + kitcode + "' and  e.Epinnumber='" + epinnumber + "' and e.RegNo=0 and SEPinID<>0 and e.eActive=1 and k.kittype=0";
            ;
            string loginid = Convert.ToString(objDUT.GetScalar(query));
            if (loginid.Length > 0)
            {
                status = "true";

            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod]
    public string validateEpin(string epinnumber, string kid)
    {
        string status = "false";
        string query = "";
        try
        {
            query = "Select count(*) from kit_master k,Epin_master e  where k.kid=e.kid and k.kid='" + kid + "' and  e.Epinnumber='" + epinnumber + "' and e.RegNo=0 and e.eActive=1 and sepinid>0 ";
            int loginid = Convert.ToInt32(objDUT.GetScalar(query));
            if (loginid > 0)
            {
                status = "true";

            }
            else
            {
                status = "false";
            }
        }
        catch (Exception excep)
        {
            status = "false";
        }

        return status;
    }
    [WebMethod(EnableSession = true)]
    public string SendKYCPINMail(string EmailID, string KYCPIN)
    {
        string result = " ";
        try
        {
            CompanySettings comSettings;
            SendMail objSent = new SendMail();
            string CompanyName, ComNoreply, ComEpass, ComLogo, ComSenderPort;
            comSettings = Session["CompanySettings"] as CompanySettings;
            CompanyName = comSettings.CompanyName;
            ComNoreply = comSettings.Sender_Email;
            ComEpass = comSettings.Sender_Email_Password;
            ComLogo = comSettings.Company_Logo;
            ComSenderPort = comSettings.Sender_Email_SMTP;
           

            if (Session["Mloginid"] != null)
            {

                result = objDUT.GetScalar("select isnull(title,'')+' '+fname+' '+isnull(lname,' ') as name from member_master where loginid='" + Session["Mloginid"] + "'").ToString();
                objSent.SendKYCPINMail(result, EmailID, KYCPIN, ComLogo, CompanyName, ComNoreply, ComEpass, ComSenderPort);
                result = "true";
                return result;
            }
            else
            {
                result = "false";
                return result;
            }
        }
        catch
        {
            result = "false";
            return result;
        }
        
    }

    [WebMethod]
    public List<Reward> MemberReward(string loginid)
    {
        List<Reward> MRewardReport = new List<Reward>();
        long regno = objUT.GetRegistrationNo(loginid);
        if (regno == 0)
        {
            Reward Rwrd = new Reward();
            Rwrd.error = "Wrong";
            MRewardReport.Add(Rwrd);
            return MRewardReport;
        }

        sdr = null;
        SqlParameter[] param = new SqlParameter[1];
        param[0] = new SqlParameter("@regno", SqlDbType.VarChar, 10);
        param[0].Value = regno;
        sdr = objDUT.GetDataReader("select mr.reqpv,mr.lpv,mr.rpv,startdate=isnull(Convert(varchar,mr.startdate,103),'N/A'),paid=case when mr.paid=0 then 'Unpaid' when mr.paid=1 then 'paid' else 'N/A' end, rm.rlevel,rm.rewardpoint,rewardgroup=case when mm.rewardgroup='A' then ' A' else ' B' end ,qualify=case when mr.Qualify=0 then 'Not Qualified' when mr.Qualify=1 then 'Qualified' else 'N/A' end from member_reward mr,reward_master rm,member_master mm where mr.regno=mm.regno and mm.kid>=3 and mr.rlevel=rm.rlevel and mm.regno='" + @regno + "'");
        try
        {
            while (sdr.Read())
            {
                Reward Rwrd = new Reward();
                Rwrd.rlevel = string.Format("{0:f}", Convert.ToDouble(sdr["reqpv"].ToString()));
                Rwrd.targetpoint = string.Format("{0:f}", Convert.ToDouble(sdr["reqpv"].ToString()));
                Rwrd.RPleftO = string.Format("{0:f}", Convert.ToDouble(sdr["lpv"].ToString()));
                Rwrd.RPrightO = string.Format("{0:f}", Convert.ToDouble(sdr["rpv"].ToString()));
                Rwrd.startDate = sdr["startdate"].ToString();
                Rwrd.rewardgroup = sdr["rewardgroup"].ToString();
                Rwrd.RpachivedO = string.Format("{0:f}", Convert.ToDouble(sdr["rlevel"].ToString()));
                Rwrd.paid = sdr["paid"].ToString();
                Rwrd.RPstatusO = sdr["qualify"].ToString();
                MRewardReport.Add(Rwrd);
            }
        }
        catch (Exception ex)
        {

        }
        sdr.Dispose();
        return MRewardReport;
    }
    [WebMethod]
    public List<EpinTransaction_Invoice> EpinTransactionInvoice_VOUCHERList(string loginid, string SEVID)
    {
        List<EpinTransaction_Invoice> epinInvoicelist = new List<EpinTransaction_Invoice>();
        sdr = null;
        SqlParameter[] param = new SqlParameter[2];
        param[0] = new SqlParameter("@loginid", SqlDbType.VarChar, 100);
        param[0].Value = loginid;
        param[1] = new SqlParameter("@SEVID", SqlDbType.BigInt);
        param[1].Value = Convert.ToInt64(SEVID);
        sdr = objDUT.GetDataReaderSP(param, "Sp_Voucher_List");
        while (sdr.Read())
        {
            EpinTransaction_Invoice epininvoice = new EpinTransaction_Invoice();

            epininvoice.epinnumber = sdr["VoucherNumber"].ToString();
            epininvoice.epincode = sdr["VoucherCode"].ToString();
            epininvoice.kitprice = string.Format("{0:f}", Convert.ToDouble(sdr["VoucherValue"].ToString()));
            epininvoice.S_Name = sdr["UsedBy"].ToString().ToString();
            epininvoice.P_Name = sdr["BelogTo"].ToString().ToString();
            epininvoice.regdate = sdr["regdate"].ToString().ToString();
            epininvoice.Mobileno = sdr["Mobileno"].ToString().ToString();
            epininvoice.P_City = string.Format("{0:dd/MM/yyyy}", sdr["BelongToDate"]);
            epininvoice.DuaDate = string.Format("{0:dd/MM/yyyy}", sdr["ValidTo"]); //sdr["ValidTo"].ToString().ToString();
            epininvoice.Date = string.Format("{0:dd/MM/yyyy}", sdr["ValidFrom"]);// sdr["ValidFrom"].ToString().ToString();
            epinInvoicelist.Add(epininvoice);
        }
        sdr.Dispose();
        return epinInvoicelist;


    }

    [WebMethod]
    public string SendvoucherPINMobile(string MobileNo, string KYCPIN)
    {
        string result = "";
        if (MobileNo != "")
        {
            try
            {

                string msg = " Your Activation Pin No. is : " + KYCPIN + "  Thanks and regards Sonsy Team. ";
                SMS sms = new SMS();
                sms.SendSMS(MobileNo, msg);
                objDUT.ExecuteSql("update voucher_master set mobileno=" + MobileNo + " where vouchernumber='" + KYCPIN + "' ");
                result = "true";
            }
            catch
            {
                result = "false";
            }

        }


        return result;
    }
}
******
  <asp:Repeater ID="Currency_MasterRep" runat="server" OnItemCommand="Currency_MasterRep_ItemCommand"
                                    OnItemDataBound="Currency_MasterRep_ItemDataBound">
                                    <ItemTemplate>
                                        <li><a href='CurrencySessionManage.aspx?CMID=<%#  Eval("CMID") %>&CountryID=<%#  Eval("CID") %>'>
                                            <span class="photo">
                                                <img src='<%# Eval("Flag") %>' alt="flag" /></span>

                                             <span class="subject">
                                                    <span class="from"> <%# Eval("CurrencyName")%></span>

                                                     <span class="time">
                                                          <%# Eval("CurrencySymbol") %>
                                                        <%# Eval("CurrencyRate", "{0:f}")%>
                                                        <%# Eval("CurrencyCode")%>
                                                    </span>

                                              </span>
                                            
                                                <span class="message">
                                                        <%# Eval("CountryName")%>
                                                    </span></a></li>
                                    </ItemTemplate>
                                </asp:Repeater>
*****

getRejectOrder
*************
